(function() {
  var decl = this.newGrammar("Metamaya")
    .withSource("Metamaya {\r\n\r\n\tFile = Statement*\r\n\r\n\tStatement =\r\n\t\t| Definition\r\n\r\n\tDefinition =\r\n\t\t| identifier \"=\" Expression #sc -- namedValue\r\n\t\t| identifier \"{\" Statement* \"}\" #sc -- namedObject\r\n\t\t| identifier ParamList \"=\" Expression #sc -- namedFunction\r\n\r\n\tImport = \"@import\" stringLiteral #sc\r\n\r\n\tDeclaration = \"@declare\" listOf<identifier, \",\"> #sc\r\n\r\n\tExpression = Relation\r\n\r\n\tRelation =\r\n\t\t| Relation (\"==\" | \"!=\" | \"<\" | \">\" | \"<=\" | \">=\") Additive -- infix\r\n\t\t| Additive\r\n\r\n\tAdditive =\r\n\t\t| Additive (\"+\" | \"-\") Multiplicative -- infix\r\n\t\t| Multiplicative\r\n\r\n\tMultiplicative =\r\n\t\t| Multiplicative (\"*\" | \"/\" | \"%\") Factor -- infix\r\n\t\t| Factor\r\n\r\n\tFactor =\r\n\t\t| \"-\" Primary -- prefix\r\n\t\t| Primary\r\n\r\n\tPrimary =\r\n\t\t| \"(\" Expression \")\" -- parens\r\n\t\t| Primary \"[\" Expression \"]\" -- index\r\n\t\t| \"{\" Statement* \"}\" -- object\r\n\t\t| Primary \"{\" Statement* \"}\" -- objectExtend\r\n\t\t| Primary ArgumentList -- invoke\r\n\t\t| Primary \".\" identifier ArgumentList -- invokeProperty\r\n\t\t| Primary \".\" identifier -- getProperty\r\n\t\t| identifier -- nameReference\r\n\t\t| literal\r\n\t\t| \"_\"\r\n\r\n\tParamList = \"(\" listOf<Parameter, \",\"> \")\"\r\n\r\n\tParameter = identifier\r\n\r\n\tArgumentList = \"(\" listOf<Expression, \",\"> \")\"\r\n\r\n// --------------------------------------------------------------------------\r\n\r\n  // ï¿½A.1 Lexical Grammar -- http://ecma-international.org/ecma-262/5.1/#sec-A.1\r\n\r\n  /*\r\n\tNote: the following lexical conventions (see http://ecma-international.org/ecma-262/5.1/#sec-7)\r\n\tare not implemented in this parser.\r\n\r\n\t// Goal production in contexts where a leading \"/\" or \"/=\" is permitted:\r\n\tInputElementDiv = whitespace | lineTerminator | comment | token | DivPunctuator\r\n\r\n\t// Goal production in contexts where a leading \"/\" or \"/=' is not permitted:\r\n\tInputElementRegExp = whitespace | lineTerminator | comment | token | regularExpressionLiteral\r\n  */\r\n\r\n  sourceCharacter = any\r\n\r\n  // Override Ohm's built-in definition of space.\r\n  space := whitespace | lineTerminator | comment\r\n\r\n  whitespace = \"\\t\"\r\n\t\t\t | \"\\x0B\"    -- verticalTab\r\n\t\t\t | \"\\x0C\"    -- formFeed\r\n\t\t\t | \" \"\r\n\t\t\t | \"\\u00A0\"  -- noBreakSpace\r\n\t\t\t | \"\\uFEFF\"  -- byteOrderMark\r\n\t\t\t | unicodeSpaceSeparator\r\n\r\n  lineTerminator = \"\\n\" | \"\\r\" | \"\\u2028\" | \"\\u2029\"\r\n  lineTerminatorSequence = \"\\n\" | \"\\r\" ~\"\\n\" | \"\\u2028\" | \"\\u2029\" | \"\\r\\n\"\r\n\r\n  comment = multiLineComment | singleLineComment\r\n\r\n  multiLineComment = \"/*\" (~\"*/\" sourceCharacter)* \"*/\"\r\n  singleLineComment = \"//\" (~lineTerminator sourceCharacter)*\r\n\r\n  identifier (an indentifier) = ~reservedWord identifierName\r\n  identifierName = identifierStart identifierPart*\r\n\r\n  identifierStart = letter | \"$\" | \"_\"\r\n\t\t\t\t  | \"\\\\\" unicodeEscapeSequence -- escaped\r\n  identifierPart = identifierStart | unicodeCombiningMark\r\n\t\t\t\t | unicodeDigit | unicodeConnectorPunctuation\r\n\t\t\t\t | \"\\u200C\" | \"\\u200D\"\r\n letter += unicodeCategoryNl\r\n  unicodeCategoryNl\r\n\t= \"\\u2160\"..\"\\u2182\" | \"\\u3007\" | \"\\u3021\"..\"\\u3029\"\r\n  unicodeDigit (a digit)\r\n\t= \"\\u0030\"..\"\\u0039\" | \"\\u0660\"..\"\\u0669\" | \"\\u06F0\"..\"\\u06F9\" | \"\\u0966\"..\"\\u096F\" | \"\\u09E6\"..\"\\u09EF\" | \"\\u0A66\"..\"\\u0A6F\" | \"\\u0AE6\"..\"\\u0AEF\" | \"\\u0B66\"..\"\\u0B6F\" | \"\\u0BE7\"..\"\\u0BEF\" | \"\\u0C66\"..\"\\u0C6F\" | \"\\u0CE6\"..\"\\u0CEF\" | \"\\u0D66\"..\"\\u0D6F\" | \"\\u0E50\"..\"\\u0E59\" | \"\\u0ED0\"..\"\\u0ED9\" | \"\\u0F20\"..\"\\u0F29\" | \"\\uFF10\"..\"\\uFF19\"\r\n\r\n  unicodeCombiningMark (a Unicode combining mark)\r\n\t= \"\\u0300\"..\"\\u0345\" | \"\\u0360\"..\"\\u0361\" | \"\\u0483\"..\"\\u0486\" | \"\\u0591\"..\"\\u05A1\" | \"\\u05A3\"..\"\\u05B9\" | \"\\u05BB\"..\"\\u05BD\" | \"\\u05BF\"..\"\\u05BF\" | \"\\u05C1\"..\"\\u05C2\" | \"\\u05C4\"..\"\\u05C4\" | \"\\u064B\"..\"\\u0652\" | \"\\u0670\"..\"\\u0670\" | \"\\u06D6\"..\"\\u06DC\" | \"\\u06DF\"..\"\\u06E4\" | \"\\u06E7\"..\"\\u06E8\" | \"\\u06EA\"..\"\\u06ED\" | \"\\u0901\"..\"\\u0902\" | \"\\u093C\"..\"\\u093C\" | \"\\u0941\"..\"\\u0948\" | \"\\u094D\"..\"\\u094D\" | \"\\u0951\"..\"\\u0954\" | \"\\u0962\"..\"\\u0963\" | \"\\u0981\"..\"\\u0981\" | \"\\u09BC\"..\"\\u09BC\" | \"\\u09C1\"..\"\\u09C4\" | \"\\u09CD\"..\"\\u09CD\" | \"\\u09E2\"..\"\\u09E3\" | \"\\u0A02\"..\"\\u0A02\" | \"\\u0A3C\"..\"\\u0A3C\" | \"\\u0A41\"..\"\\u0A42\" | \"\\u0A47\"..\"\\u0A48\" | \"\\u0A4B\"..\"\\u0A4D\" | \"\\u0A70\"..\"\\u0A71\" | \"\\u0A81\"..\"\\u0A82\" | \"\\u0ABC\"..\"\\u0ABC\" | \"\\u0AC1\"..\"\\u0AC5\" | \"\\u0AC7\"..\"\\u0AC8\" | \"\\u0ACD\"..\"\\u0ACD\" | \"\\u0B01\"..\"\\u0B01\" | \"\\u0B3C\"..\"\\u0B3C\" | \"\\u0B3F\"..\"\\u0B3F\" | \"\\u0B41\"..\"\\u0B43\" | \"\\u0B4D\"..\"\\u0B4D\" | \"\\u0B56\"..\"\\u0B56\" | \"\\u0B82\"..\"\\u0B82\" | \"\\u0BC0\"..\"\\u0BC0\" | \"\\u0BCD\"..\"\\u0BCD\" | \"\\u0C3E\"..\"\\u0C40\" | \"\\u0C46\"..\"\\u0C48\" | \"\\u0C4A\"..\"\\u0C4D\" | \"\\u0C55\"..\"\\u0C56\" | \"\\u0CBF\"..\"\\u0CBF\" | \"\\u0CC6\"..\"\\u0CC6\" | \"\\u0CCC\"..\"\\u0CCD\" | \"\\u0D41\"..\"\\u0D43\" | \"\\u0D4D\"..\"\\u0D4D\" | \"\\u0E31\"..\"\\u0E31\" | \"\\u0E34\"..\"\\u0E3A\" | \"\\u0E47\"..\"\\u0E4E\" | \"\\u0EB1\"..\"\\u0EB1\" | \"\\u0EB4\"..\"\\u0EB9\" | \"\\u0EBB\"..\"\\u0EBC\" | \"\\u0EC8\"..\"\\u0ECD\" | \"\\u0F18\"..\"\\u0F19\" | \"\\u0F35\"..\"\\u0F35\" | \"\\u0F37\"..\"\\u0F37\" | \"\\u0F39\"..\"\\u0F39\" | \"\\u0F71\"..\"\\u0F7E\" | \"\\u0F80\"..\"\\u0F84\" | \"\\u0F86\"..\"\\u0F87\" | \"\\u0F90\"..\"\\u0F95\" | \"\\u0F97\"..\"\\u0F97\" | \"\\u0F99\"..\"\\u0FAD\" | \"\\u0FB1\"..\"\\u0FB7\" | \"\\u0FB9\"..\"\\u0FB9\" | \"\\u20D0\"..\"\\u20DC\" | \"\\u20E1\"..\"\\u20E1\" | \"\\u302A\"..\"\\u302F\" | \"\\u3099\"..\"\\u309A\" | \"\\uFB1E\"..\"\\uFB1E\" | \"\\uFE20\"..\"\\uFE23\"\r\n\r\n  unicodeConnectorPunctuation = \"\\u005F\" | \"\\u203F\"..\"\\u2040\" | \"\\u30FB\" | \"\\uFE33\"..\"\\uFE34\" | \"\\uFE4D\"..\"\\uFE4F\" | \"\\uFF3F\" | \"\\uFF65\"\r\n  unicodeSpaceSeparator = \"\\u2000\"..\"\\u200B\" | \"\\u3000\"\r\n\r\n  reservedWord = keyword | futureReservedWord | nullLiteral | booleanLiteral\r\n\r\n  // Note: keywords that are the complete prefix of another keyword should\r\n  // be prioritized (e.g. 'in' should come before 'instanceof')\r\n  keyword = break    | do        | instanceof | typeof\r\n\t\t  | case     | else      | new        | var\r\n\t\t  | catch    | finally   | return     | void\r\n\t\t  | continue | for       | switch     | while\r\n\t\t  | debugger | function  | this       | with\r\n\t\t  | default  | if        | throw\r\n\t\t  | delete   | in        | try\r\n\r\n  futureReservedWordLax = class  | enum  | extends\r\n\t\t\t\t\t\t| super  | const | export\r\n\t\t\t\t\t\t| import\r\n\r\n  futureReservedWordStrict = futureReservedWordLax\r\n\t\t\t\t\t\t   | implements | let     | private   | public\r\n\t\t\t\t\t\t   | interface  | package | protected | static\r\n\t\t\t\t\t\t   | yield\r\n\r\n  futureReservedWord = futureReservedWordStrict\r\n\r\n  /*\r\n\tNote: Punctuator and DivPunctuator (see https://es5.github.io/x7.html#x7.7) are\r\n\tnot currently used by this grammar.\r\n  */\r\n\r\n  literal = nullLiteral | booleanLiteral | numericLiteral\r\n\t\t  | stringLiteral | regularExpressionLiteral // spec forgot Regexp literals in appendix?\r\n\r\n  nullLiteral = \"null\" ~identifierPart\r\n  booleanLiteral = (\"true\" | \"false\") ~identifierPart\r\n\r\n  // For semantics on how decimal literals are constructed, see section 7.8.3\r\n\r\n  // Note that the ordering of hexIntegerLiteral and decimalLiteral is reversed w.r.t. the spec\r\n  // This is intentional: the order decimalLiteral | hexIntegerLiteral will parse\r\n  // \"0x...\" as a decimal literal \"0\" followed by \"x...\"\r\n  numericLiteral = octalIntegerLiteral | hexIntegerLiteral | decimalLiteral\r\n\r\n  decimalLiteral = decimalIntegerLiteral \".\" decimalDigit* exponentPart -- bothParts\r\n\t\t\t\t |                       \".\" decimalDigit+ exponentPart -- decimalsOnly\r\n\t\t\t\t | decimalIntegerLiteral                   exponentPart -- integerOnly\r\n\r\n  decimalIntegerLiteral = nonZeroDigit decimalDigit*  -- nonZero\r\n\t\t\t\t\t\t| \"0\"                         -- zero\r\n  decimalDigit = \"0\"..\"9\"\r\n  nonZeroDigit = \"1\"..\"9\"\r\n\r\n  exponentPart = exponentIndicator signedInteger -- present\r\n\t\t\t   |                                 -- absent\r\n  exponentIndicator = \"e\" | \"E\"\r\n  signedInteger = \"+\" decimalDigit* -- positive\r\n\t\t\t\t| \"-\" decimalDigit* -- negative\r\n\t\t\t\t|     decimalDigit+ -- noSign\r\n\r\n  hexIntegerLiteral = \"0x\" hexDigit+\r\n\t\t\t\t\t| \"0X\" hexDigit+\r\n\r\n  // hexDigit defined in Ohm's built-in rules (otherwise: hexDigit = \"0\"..\"9\" | \"a\"..\"f\" | \"A\"..\"F\")\r\n\r\n  octalIntegerLiteral = \"0\" octalDigit+\r\n\r\n  octalDigit = \"0\"..\"7\"\r\n\r\n  // For semantics on how string literals are constructed, see section 7.8.4\r\n  stringLiteral = \"\\\"\" doubleStringCharacter* \"\\\"\"\r\n\t\t\t\t| \"'\" singleStringCharacter* \"'\"\r\n  doubleStringCharacter = ~(\"\\\"\" | \"\\\\\" | lineTerminator) sourceCharacter -- nonEscaped\r\n\t\t\t\t\t\t| \"\\\\\" escapeSequence                             -- escaped\r\n\t\t\t\t\t\t| lineContinuation                                -- lineContinuation\r\n  singleStringCharacter = ~(\"'\" | \"\\\\\" | lineTerminator) sourceCharacter -- nonEscaped\r\n\t\t\t\t\t\t| \"\\\\\" escapeSequence                            -- escaped\r\n\t\t\t\t\t\t| lineContinuation                               -- lineContinuation\r\n  lineContinuation = \"\\\\\" lineTerminatorSequence\r\n  escapeSequence = unicodeEscapeSequence\r\n\t\t\t\t | hexEscapeSequence\r\n\t\t\t\t | octalEscapeSequence\r\n\t\t\t\t | characterEscapeSequence  // Must come last.\r\n  characterEscapeSequence = singleEscapeCharacter\r\n\t\t\t\t\t\t  | nonEscapeCharacter\r\n  singleEscapeCharacter = \"'\"  // -> ( String.fromCharCode(0039) ) /*\\u0027*/\r\n\t\t\t\t\t\t| \"\\\"\" // -> ( String.fromCharCode(0034) ) /*\\u0022*/\r\n\t\t\t\t\t\t| \"\\\\\" // -> ( String.fromCharCode(0092) ) /*\\u005C*/\r\n\t\t\t\t\t\t| \"b\"  // -> ( String.fromCharCode(0008) ) /*\\u0008*/\r\n\t\t\t\t\t\t| \"f\"  // -> ( String.fromCharCode(0012) ) /*\\u000C*/\r\n\t\t\t\t\t\t| \"n\"  // -> ( String.fromCharCode(0010) ) /*\\u000A*/\r\n\t\t\t\t\t\t| \"r\"  // -> ( String.fromCharCode(0013) ) /*\\u000D*/\r\n\t\t\t\t\t\t| \"t\"  // -> ( String.fromCharCode(0009) ) /*\\u0009*/\r\n\t\t\t\t\t\t| \"v\"  // -> ( String.fromCharCode(0011) ) /*\\u000B*/\r\n  nonEscapeCharacter = ~(escapeCharacter | lineTerminator) sourceCharacter\r\n  escapeCharacter = singleEscapeCharacter | decimalDigit | \"x\" | \"u\"\r\n  octalEscapeSequence = zeroToThree octalDigit octalDigit    -- whole\r\n\t\t\t\t\t  | fourToSeven octalDigit               -- eightTimesfourToSeven\r\n\t\t\t\t\t  | zeroToThree octalDigit ~decimalDigit -- eightTimesZeroToThree\r\n\t\t\t\t\t  | octalDigit ~decimalDigit             -- octal\r\n  hexEscapeSequence = \"x\" hexDigit hexDigit\r\n  unicodeEscapeSequence = \"u\" hexDigit hexDigit hexDigit hexDigit\r\n\r\n  zeroToThree = \"0\"..\"3\"\r\n  fourToSeven = \"4\"..\"7\"\r\n\r\n  // ï¿½7.8.5 Regular Expression Literals -- http://ecma-international.org/ecma-262/5.1/#sec-7.8.5\r\n\r\n  regularExpressionLiteral = \"/\" regularExpressionBody \"/\" regularExpressionFlags\r\n  regularExpressionBody = regularExpressionFirstChar regularExpressionChar*\r\n  regularExpressionFirstChar = ~(\"*\" | \"\\\\\" | \"/\" | \"[\") regularExpressionNonTerminator\r\n\t\t\t\t\t\t\t | regularExpressionBackslashSequence\r\n\t\t\t\t\t\t\t | regularExpressionClass\r\n  regularExpressionChar = ~(\"\\\\\" | \"/\" | \"[\") regularExpressionNonTerminator\r\n\t\t\t\t\t\t| regularExpressionBackslashSequence\r\n\t\t\t\t\t\t| regularExpressionClass\r\n  regularExpressionBackslashSequence = \"\\\\\" regularExpressionNonTerminator\r\n  regularExpressionNonTerminator = ~(lineTerminator) sourceCharacter\r\n  regularExpressionClass = \"[\" regularExpressionClassChar* \"]\"\r\n  regularExpressionClassChar = ~(\"]\" | \"\\\\\") regularExpressionNonTerminator\r\n\t\t\t\t\t\t\t | regularExpressionBackslashSequence\r\n  regularExpressionFlags = identifierPart*\r\n\r\n  // === Implementation-level rules (not part of the spec) ===\r\n\r\n  multiLineCommentNoNL = \"/*\" (~(\"*/\" | lineTerminator) sourceCharacter)* \"*/\"\r\n\r\n  // does not accept lineTerminators, not even implicit ones in a multiLineComment (cf. section 7.4)\r\n  spacesNoNL = (whitespace | singleLineComment | multiLineCommentNoNL)*\r\n\r\n  // A semicolon is \"automatically inserted\" if a newline is reached the end of the input stream\r\n  // is reached, or the offending token is \"}\".\r\n  // See http://ecma-international.org/ecma-262/5.1/#sec-7.9 for more information.\r\n  // NOTE: Applications of this rule *must* appear in a lexical context -- either in the body of a\r\n  // lexical rule, or inside `#()`.\r\n  sc = space* (\";\" | end)\r\n\t | spacesNoNL (lineTerminator | ~multiLineCommentNoNL multiLineComment | &\"}\")\r\n\r\n  // Convenience rules for parsing keyword tokens.\r\n  break = \"break\" ~identifierPart\r\n  do = \"do\" ~identifierPart\r\n  instanceof = \"instanceof\" ~identifierPart\r\n  typeof = \"typeof\" ~identifierPart\r\n  case = \"case\" ~identifierPart\r\n  else = \"else\" ~identifierPart\r\n  new = \"new\" ~identifierPart\r\n  var = \"var\" ~identifierPart\r\n  catch = \"catch\" ~identifierPart\r\n  finally = \"finally\" ~identifierPart\r\n  return = \"return\" ~identifierPart\r\n  void = \"void\" ~identifierPart\r\n  continue = \"continue\" ~identifierPart\r\n  for = \"for\" ~identifierPart\r\n  switch = \"switch\" ~identifierPart\r\n  while = \"while\" ~identifierPart\r\n  debugger = \"debugger\" ~identifierPart\r\n  function = \"function\" ~identifierPart\r\n  this = \"this\" ~identifierPart\r\n  with = \"with\" ~identifierPart\r\n  default = \"default\" ~identifierPart\r\n  if = \"if\" ~identifierPart\r\n  throw = \"throw\" ~identifierPart\r\n  delete = \"delete\" ~identifierPart\r\n  in = \"in\" ~identifierPart\r\n  try = \"try\" ~identifierPart\r\n  get = \"get\" ~identifierPart\r\n  set = \"set\" ~identifierPart\r\n  class = \"class\" ~identifierPart\r\n  enum = \"enum\" ~identifierPart\r\n  extends = \"extends\" ~identifierPart\r\n  super = \"super\" ~identifierPart\r\n  const = \"const\" ~identifierPart\r\n  export = \"export\" ~identifierPart\r\n  import = \"import\" ~identifierPart\r\n  implements = \"implements\" ~identifierPart\r\n  let = \"let\" ~identifierPart\r\n  private = \"private\" ~identifierPart\r\n  public = \"public\" ~identifierPart\r\n  interface = \"interface\" ~identifierPart\r\n  package = \"package\" ~identifierPart\r\n  protected = \"protected\" ~identifierPart\r\n  static = \"static\" ~identifierPart\r\n  yield = \"yield\" ~identifierPart\r\n  \r\n  // end of lexical rules\r\n\r\n}")
    .withDefaultStartRule("File")
  return decl
    .define("File", [], this.star(this.app("Statement").withInterval(decl.sourceInterval(22, 31))).withInterval(decl.sourceInterval(22, 32)))
    .define("Statement", [], this.app("Definition").withInterval(decl.sourceInterval(52, 64)))
    .define("Definition_namedValue", [], this.seq(this.app("identifier").withInterval(decl.sourceInterval(87, 97)), this.terminal("=").withInterval(decl.sourceInterval(98, 101)), this.app("Expression").withInterval(decl.sourceInterval(102, 112)), this.lex(this.app("sc").withInterval(decl.sourceInterval(114, 116))).withInterval(decl.sourceInterval(113, 116))).withInterval(decl.sourceInterval(87, 116)))
    .define("Definition_namedObject", [], this.seq(this.app("identifier").withInterval(decl.sourceInterval(136, 146)), this.terminal("{").withInterval(decl.sourceInterval(147, 150)), this.star(this.app("Statement").withInterval(decl.sourceInterval(151, 160))).withInterval(decl.sourceInterval(151, 161)), this.terminal("}").withInterval(decl.sourceInterval(162, 165)), this.lex(this.app("sc").withInterval(decl.sourceInterval(167, 169))).withInterval(decl.sourceInterval(166, 169))).withInterval(decl.sourceInterval(136, 169)))
    .define("Definition_namedFunction", [], this.seq(this.app("identifier").withInterval(decl.sourceInterval(190, 200)), this.app("ParamList").withInterval(decl.sourceInterval(201, 210)), this.terminal("=").withInterval(decl.sourceInterval(211, 214)), this.app("Expression").withInterval(decl.sourceInterval(215, 225)), this.lex(this.app("sc").withInterval(decl.sourceInterval(227, 229))).withInterval(decl.sourceInterval(226, 229))).withInterval(decl.sourceInterval(190, 229)))
    .define("Definition", [], this.alt(this.app("Definition_namedValue").withInterval(decl.sourceInterval(87, 116)), this.app("Definition_namedObject").withInterval(decl.sourceInterval(136, 169)), this.app("Definition_namedFunction").withInterval(decl.sourceInterval(190, 229))).withInterval(decl.sourceInterval(85, 246)))
    .define("Import", [], this.seq(this.terminal("@import").withInterval(decl.sourceInterval(260, 269)), this.app("stringLiteral").withInterval(decl.sourceInterval(270, 283)), this.lex(this.app("sc").withInterval(decl.sourceInterval(285, 287))).withInterval(decl.sourceInterval(284, 287))).withInterval(decl.sourceInterval(260, 287)))
    .define("Declaration", [], this.seq(this.terminal("@declare").withInterval(decl.sourceInterval(306, 316)), this.app("listOf", [this.app("identifier").withInterval(decl.sourceInterval(324, 334)), this.terminal(",").withInterval(decl.sourceInterval(336, 339))]).withInterval(decl.sourceInterval(317, 340)), this.lex(this.app("sc").withInterval(decl.sourceInterval(342, 344))).withInterval(decl.sourceInterval(341, 344))).withInterval(decl.sourceInterval(306, 344)))
    .define("Expression", [], this.app("Relation").withInterval(decl.sourceInterval(362, 370)))
    .define("Relation_infix", [], this.seq(this.app("Relation").withInterval(decl.sourceInterval(391, 399)), this.alt(this.terminal("==").withInterval(decl.sourceInterval(401, 405)), this.terminal("!=").withInterval(decl.sourceInterval(408, 412)), this.terminal("<").withInterval(decl.sourceInterval(415, 418)), this.terminal(">").withInterval(decl.sourceInterval(421, 424)), this.terminal("<=").withInterval(decl.sourceInterval(427, 431)), this.terminal(">=").withInterval(decl.sourceInterval(434, 438))).withInterval(decl.sourceInterval(401, 438)), this.app("Additive").withInterval(decl.sourceInterval(440, 448))).withInterval(decl.sourceInterval(391, 448)))
    .define("Relation", [], this.alt(this.app("Relation_infix").withInterval(decl.sourceInterval(391, 448)), this.app("Additive").withInterval(decl.sourceInterval(463, 471))).withInterval(decl.sourceInterval(389, 471)))
    .define("Additive_infix", [], this.seq(this.app("Additive").withInterval(decl.sourceInterval(492, 500)), this.alt(this.terminal("+").withInterval(decl.sourceInterval(502, 505)), this.terminal("-").withInterval(decl.sourceInterval(508, 511))).withInterval(decl.sourceInterval(502, 511)), this.app("Multiplicative").withInterval(decl.sourceInterval(513, 527))).withInterval(decl.sourceInterval(492, 527)))
    .define("Additive", [], this.alt(this.app("Additive_infix").withInterval(decl.sourceInterval(492, 527)), this.app("Multiplicative").withInterval(decl.sourceInterval(542, 556))).withInterval(decl.sourceInterval(490, 556)))
    .define("Multiplicative_infix", [], this.seq(this.app("Multiplicative").withInterval(decl.sourceInterval(583, 597)), this.alt(this.terminal("*").withInterval(decl.sourceInterval(599, 602)), this.terminal("/").withInterval(decl.sourceInterval(605, 608)), this.terminal("%").withInterval(decl.sourceInterval(611, 614))).withInterval(decl.sourceInterval(599, 614)), this.app("Factor").withInterval(decl.sourceInterval(616, 622))).withInterval(decl.sourceInterval(583, 622)))
    .define("Multiplicative", [], this.alt(this.app("Multiplicative_infix").withInterval(decl.sourceInterval(583, 622)), this.app("Factor").withInterval(decl.sourceInterval(637, 643))).withInterval(decl.sourceInterval(581, 643)))
    .define("Factor_prefix", [], this.seq(this.terminal("-").withInterval(decl.sourceInterval(662, 665)), this.app("Primary").withInterval(decl.sourceInterval(666, 673))).withInterval(decl.sourceInterval(662, 673)))
    .define("Factor", [], this.alt(this.app("Factor_prefix").withInterval(decl.sourceInterval(662, 673)), this.app("Primary").withInterval(decl.sourceInterval(689, 696))).withInterval(decl.sourceInterval(660, 696)))
    .define("Primary_parens", [], this.seq(this.terminal("(").withInterval(decl.sourceInterval(716, 719)), this.app("Expression").withInterval(decl.sourceInterval(720, 730)), this.terminal(")").withInterval(decl.sourceInterval(731, 734))).withInterval(decl.sourceInterval(716, 734)))
    .define("Primary_index", [], this.seq(this.app("Primary").withInterval(decl.sourceInterval(750, 757)), this.terminal("[").withInterval(decl.sourceInterval(758, 761)), this.app("Expression").withInterval(decl.sourceInterval(762, 772)), this.terminal("]").withInterval(decl.sourceInterval(773, 776))).withInterval(decl.sourceInterval(750, 776)))
    .define("Primary_object", [], this.seq(this.terminal("{").withInterval(decl.sourceInterval(791, 794)), this.star(this.app("Statement").withInterval(decl.sourceInterval(795, 804))).withInterval(decl.sourceInterval(795, 805)), this.terminal("}").withInterval(decl.sourceInterval(806, 809))).withInterval(decl.sourceInterval(791, 809)))
    .define("Primary_objectExtend", [], this.seq(this.app("Primary").withInterval(decl.sourceInterval(825, 832)), this.terminal("{").withInterval(decl.sourceInterval(833, 836)), this.star(this.app("Statement").withInterval(decl.sourceInterval(837, 846))).withInterval(decl.sourceInterval(837, 847)), this.terminal("}").withInterval(decl.sourceInterval(848, 851))).withInterval(decl.sourceInterval(825, 851)))
    .define("Primary_invoke", [], this.seq(this.app("Primary").withInterval(decl.sourceInterval(873, 880)), this.app("ArgumentList").withInterval(decl.sourceInterval(881, 893))).withInterval(decl.sourceInterval(873, 893)))
    .define("Primary_invokeProperty", [], this.seq(this.app("Primary").withInterval(decl.sourceInterval(909, 916)), this.terminal(".").withInterval(decl.sourceInterval(917, 920)), this.app("identifier").withInterval(decl.sourceInterval(921, 931)), this.app("ArgumentList").withInterval(decl.sourceInterval(932, 944))).withInterval(decl.sourceInterval(909, 944)))
    .define("Primary_getProperty", [], this.seq(this.app("Primary").withInterval(decl.sourceInterval(968, 975)), this.terminal(".").withInterval(decl.sourceInterval(976, 979)), this.app("identifier").withInterval(decl.sourceInterval(980, 990))).withInterval(decl.sourceInterval(968, 990)))
    .define("Primary_nameReference", [], this.app("identifier").withInterval(decl.sourceInterval(1011, 1021)))
    .define("Primary", [], this.alt(this.app("Primary_parens").withInterval(decl.sourceInterval(716, 734)), this.app("Primary_index").withInterval(decl.sourceInterval(750, 776)), this.app("Primary_object").withInterval(decl.sourceInterval(791, 809)), this.app("Primary_objectExtend").withInterval(decl.sourceInterval(825, 851)), this.app("Primary_invoke").withInterval(decl.sourceInterval(873, 893)), this.app("Primary_invokeProperty").withInterval(decl.sourceInterval(909, 944)), this.app("Primary_getProperty").withInterval(decl.sourceInterval(968, 990)), this.app("Primary_nameReference").withInterval(decl.sourceInterval(1011, 1021)), this.app("literal").withInterval(decl.sourceInterval(1044, 1051)), this.terminal("_").withInterval(decl.sourceInterval(1057, 1060))).withInterval(decl.sourceInterval(714, 1060)))
    .define("ParamList", [], this.seq(this.terminal("(").withInterval(decl.sourceInterval(1077, 1080)), this.app("listOf", [this.app("Parameter").withInterval(decl.sourceInterval(1088, 1097)), this.terminal(",").withInterval(decl.sourceInterval(1099, 1102))]).withInterval(decl.sourceInterval(1081, 1103)), this.terminal(")").withInterval(decl.sourceInterval(1104, 1107))).withInterval(decl.sourceInterval(1077, 1107)))
    .define("Parameter", [], this.app("identifier").withInterval(decl.sourceInterval(1124, 1134)))
    .define("ArgumentList", [], this.seq(this.terminal("(").withInterval(decl.sourceInterval(1154, 1157)), this.app("listOf", [this.app("Expression").withInterval(decl.sourceInterval(1165, 1175)), this.terminal(",").withInterval(decl.sourceInterval(1177, 1180))]).withInterval(decl.sourceInterval(1158, 1181)), this.terminal(")").withInterval(decl.sourceInterval(1182, 1185))).withInterval(decl.sourceInterval(1154, 1185)))
    .define("sourceCharacter", [], this.app("any").withInterval(decl.sourceInterval(1860, 1863)))
    .override("space", [], this.alt(this.app("whitespace").withInterval(decl.sourceInterval(1929, 1939)), this.app("lineTerminator").withInterval(decl.sourceInterval(1942, 1956)), this.app("comment").withInterval(decl.sourceInterval(1959, 1966))).withInterval(decl.sourceInterval(1929, 1966)))
    .define("whitespace_verticalTab", [], this.terminal("\u000b").withInterval(decl.sourceInterval(1997, 2003)))
    .define("whitespace_formFeed", [], this.terminal("\f").withInterval(decl.sourceInterval(2029, 2035)))
    .define("whitespace_noBreakSpace", [], this.terminal("Â ").withInterval(decl.sourceInterval(2069, 2077)))
    .define("whitespace_byteOrderMark", [], this.terminal("ï»¿").withInterval(decl.sourceInterval(2102, 2110)))
    .define("whitespace", [], this.alt(this.terminal("\t").withInterval(decl.sourceInterval(1985, 1989)), this.app("whitespace_verticalTab").withInterval(decl.sourceInterval(1997, 2003)), this.app("whitespace_formFeed").withInterval(decl.sourceInterval(2029, 2035)), this.terminal(" ").withInterval(decl.sourceInterval(2058, 2061)), this.app("whitespace_noBreakSpace").withInterval(decl.sourceInterval(2069, 2077)), this.app("whitespace_byteOrderMark").withInterval(decl.sourceInterval(2102, 2110)), this.app("unicodeSpaceSeparator").withInterval(decl.sourceInterval(2136, 2157))).withInterval(decl.sourceInterval(1985, 2157)))
    .define("lineTerminator", [], this.alt(this.terminal("\n").withInterval(decl.sourceInterval(2180, 2184)), this.terminal("\r").withInterval(decl.sourceInterval(2187, 2191)), this.terminal("\u2028").withInterval(decl.sourceInterval(2194, 2202)), this.terminal("\u2029").withInterval(decl.sourceInterval(2205, 2213))).withInterval(decl.sourceInterval(2180, 2213)))
    .define("lineTerminatorSequence", [], this.alt(this.terminal("\n").withInterval(decl.sourceInterval(2242, 2246)), this.seq(this.terminal("\r").withInterval(decl.sourceInterval(2249, 2253)), this.not(this.terminal("\n").withInterval(decl.sourceInterval(2255, 2259))).withInterval(decl.sourceInterval(2254, 2259))).withInterval(decl.sourceInterval(2249, 2259)), this.terminal("\u2028").withInterval(decl.sourceInterval(2262, 2270)), this.terminal("\u2029").withInterval(decl.sourceInterval(2273, 2281)), this.terminal("\r\n").withInterval(decl.sourceInterval(2284, 2290))).withInterval(decl.sourceInterval(2242, 2290)))
    .define("comment", [], this.alt(this.app("multiLineComment").withInterval(decl.sourceInterval(2306, 2322)), this.app("singleLineComment").withInterval(decl.sourceInterval(2325, 2342))).withInterval(decl.sourceInterval(2306, 2342)))
    .define("multiLineComment", [], this.seq(this.terminal("/*").withInterval(decl.sourceInterval(2367, 2371)), this.star(this.seq(this.not(this.terminal("*/").withInterval(decl.sourceInterval(2374, 2378))).withInterval(decl.sourceInterval(2373, 2378)), this.app("sourceCharacter").withInterval(decl.sourceInterval(2379, 2394))).withInterval(decl.sourceInterval(2373, 2394))).withInterval(decl.sourceInterval(2372, 2396)), this.terminal("*/").withInterval(decl.sourceInterval(2397, 2401))).withInterval(decl.sourceInterval(2367, 2401)))
    .define("singleLineComment", [], this.seq(this.terminal("//").withInterval(decl.sourceInterval(2425, 2429)), this.star(this.seq(this.not(this.app("lineTerminator").withInterval(decl.sourceInterval(2432, 2446))).withInterval(decl.sourceInterval(2431, 2446)), this.app("sourceCharacter").withInterval(decl.sourceInterval(2447, 2462))).withInterval(decl.sourceInterval(2431, 2462))).withInterval(decl.sourceInterval(2430, 2464))).withInterval(decl.sourceInterval(2425, 2464)))
    .define("identifier", [], this.seq(this.not(this.app("reservedWord").withInterval(decl.sourceInterval(2501, 2513))).withInterval(decl.sourceInterval(2500, 2513)), this.app("identifierName").withInterval(decl.sourceInterval(2514, 2528))).withInterval(decl.sourceInterval(2500, 2528)), "an indentifier")
    .define("identifierName", [], this.seq(this.app("identifierStart").withInterval(decl.sourceInterval(2549, 2564)), this.star(this.app("identifierPart").withInterval(decl.sourceInterval(2565, 2579))).withInterval(decl.sourceInterval(2565, 2580))).withInterval(decl.sourceInterval(2549, 2580)))
    .define("identifierStart_escaped", [], this.seq(this.terminal("\\").withInterval(decl.sourceInterval(2632, 2636)), this.app("unicodeEscapeSequence").withInterval(decl.sourceInterval(2637, 2658))).withInterval(decl.sourceInterval(2632, 2658)))
    .define("identifierStart", [], this.alt(this.app("letter").withInterval(decl.sourceInterval(2604, 2610)), this.terminal("$").withInterval(decl.sourceInterval(2613, 2616)), this.terminal("_").withInterval(decl.sourceInterval(2619, 2622)), this.app("identifierStart_escaped").withInterval(decl.sourceInterval(2632, 2658))).withInterval(decl.sourceInterval(2604, 2669)))
    .define("identifierPart", [], this.alt(this.app("identifierStart").withInterval(decl.sourceInterval(2690, 2705)), this.app("unicodeCombiningMark").withInterval(decl.sourceInterval(2708, 2728)), this.app("unicodeDigit").withInterval(decl.sourceInterval(2737, 2749)), this.app("unicodeConnectorPunctuation").withInterval(decl.sourceInterval(2752, 2779)), this.terminal("â").withInterval(decl.sourceInterval(2788, 2796)), this.terminal("â").withInterval(decl.sourceInterval(2799, 2807))).withInterval(decl.sourceInterval(2690, 2807)))
    .extend("letter", [], this.app("unicodeCategoryNl").withInterval(decl.sourceInterval(2820, 2837)))
    .define("unicodeCategoryNl", [], this.alt(this.range("â ", "â").withInterval(decl.sourceInterval(2863, 2881)), this.terminal("ã").withInterval(decl.sourceInterval(2884, 2892)), this.range("ã¡", "ã©").withInterval(decl.sourceInterval(2895, 2913))).withInterval(decl.sourceInterval(2863, 2913)))
    .define("unicodeDigit", [], this.alt(this.range("0", "9").withInterval(decl.sourceInterval(2944, 2962)), this.range("Ù ", "Ù©").withInterval(decl.sourceInterval(2965, 2983)), this.range("Û°", "Û¹").withInterval(decl.sourceInterval(2986, 3004)), this.range("à¥¦", "à¥¯").withInterval(decl.sourceInterval(3007, 3025)), this.range("à§¦", "à§¯").withInterval(decl.sourceInterval(3028, 3046)), this.range("à©¦", "à©¯").withInterval(decl.sourceInterval(3049, 3067)), this.range("à«¦", "à«¯").withInterval(decl.sourceInterval(3070, 3088)), this.range("à­¦", "à­¯").withInterval(decl.sourceInterval(3091, 3109)), this.range("à¯§", "à¯¯").withInterval(decl.sourceInterval(3112, 3130)), this.range("à±¦", "à±¯").withInterval(decl.sourceInterval(3133, 3151)), this.range("à³¦", "à³¯").withInterval(decl.sourceInterval(3154, 3172)), this.range("àµ¦", "àµ¯").withInterval(decl.sourceInterval(3175, 3193)), this.range("à¹", "à¹").withInterval(decl.sourceInterval(3196, 3214)), this.range("à»", "à»").withInterval(decl.sourceInterval(3217, 3235)), this.range("à¼ ", "à¼©").withInterval(decl.sourceInterval(3238, 3256)), this.range("ï¼", "ï¼").withInterval(decl.sourceInterval(3259, 3277))).withInterval(decl.sourceInterval(2944, 3277)), "a digit")
    .define("unicodeCombiningMark", [], this.alt(this.range("Ì", "Í").withInterval(decl.sourceInterval(3335, 3353)), this.range("Í ", "Í¡").withInterval(decl.sourceInterval(3356, 3374)), this.range("Ò", "Ò").withInterval(decl.sourceInterval(3377, 3395)), this.range("Ö", "Ö¡").withInterval(decl.sourceInterval(3398, 3416)), this.range("Ö£", "Ö¹").withInterval(decl.sourceInterval(3419, 3437)), this.range("Ö»", "Ö½").withInterval(decl.sourceInterval(3440, 3458)), this.range("Ö¿", "Ö¿").withInterval(decl.sourceInterval(3461, 3479)), this.range("×", "×").withInterval(decl.sourceInterval(3482, 3500)), this.range("×", "×").withInterval(decl.sourceInterval(3503, 3521)), this.range("Ù", "Ù").withInterval(decl.sourceInterval(3524, 3542)), this.range("Ù°", "Ù°").withInterval(decl.sourceInterval(3545, 3563)), this.range("Û", "Û").withInterval(decl.sourceInterval(3566, 3584)), this.range("Û", "Û¤").withInterval(decl.sourceInterval(3587, 3605)), this.range("Û§", "Û¨").withInterval(decl.sourceInterval(3608, 3626)), this.range("Ûª", "Û­").withInterval(decl.sourceInterval(3629, 3647)), this.range("à¤", "à¤").withInterval(decl.sourceInterval(3650, 3668)), this.range("à¤¼", "à¤¼").withInterval(decl.sourceInterval(3671, 3689)), this.range("à¥", "à¥").withInterval(decl.sourceInterval(3692, 3710)), this.range("à¥", "à¥").withInterval(decl.sourceInterval(3713, 3731)), this.range("à¥", "à¥").withInterval(decl.sourceInterval(3734, 3752)), this.range("à¥¢", "à¥£").withInterval(decl.sourceInterval(3755, 3773)), this.range("à¦", "à¦").withInterval(decl.sourceInterval(3776, 3794)), this.range("à¦¼", "à¦¼").withInterval(decl.sourceInterval(3797, 3815)), this.range("à§", "à§").withInterval(decl.sourceInterval(3818, 3836)), this.range("à§", "à§").withInterval(decl.sourceInterval(3839, 3857)), this.range("à§¢", "à§£").withInterval(decl.sourceInterval(3860, 3878)), this.range("à¨", "à¨").withInterval(decl.sourceInterval(3881, 3899)), this.range("à¨¼", "à¨¼").withInterval(decl.sourceInterval(3902, 3920)), this.range("à©", "à©").withInterval(decl.sourceInterval(3923, 3941)), this.range("à©", "à©").withInterval(decl.sourceInterval(3944, 3962)), this.range("à©", "à©").withInterval(decl.sourceInterval(3965, 3983)), this.range("à©°", "à©±").withInterval(decl.sourceInterval(3986, 4004)), this.range("àª", "àª").withInterval(decl.sourceInterval(4007, 4025)), this.range("àª¼", "àª¼").withInterval(decl.sourceInterval(4028, 4046)), this.range("à«", "à«").withInterval(decl.sourceInterval(4049, 4067)), this.range("à«", "à«").withInterval(decl.sourceInterval(4070, 4088)), this.range("à«", "à«").withInterval(decl.sourceInterval(4091, 4109)), this.range("à¬", "à¬").withInterval(decl.sourceInterval(4112, 4130)), this.range("à¬¼", "à¬¼").withInterval(decl.sourceInterval(4133, 4151)), this.range("à¬¿", "à¬¿").withInterval(decl.sourceInterval(4154, 4172)), this.range("à­", "à­").withInterval(decl.sourceInterval(4175, 4193)), this.range("à­", "à­").withInterval(decl.sourceInterval(4196, 4214)), this.range("à­", "à­").withInterval(decl.sourceInterval(4217, 4235)), this.range("à®", "à®").withInterval(decl.sourceInterval(4238, 4256)), this.range("à¯", "à¯").withInterval(decl.sourceInterval(4259, 4277)), this.range("à¯", "à¯").withInterval(decl.sourceInterval(4280, 4298)), this.range("à°¾", "à±").withInterval(decl.sourceInterval(4301, 4319)), this.range("à±", "à±").withInterval(decl.sourceInterval(4322, 4340)), this.range("à±", "à±").withInterval(decl.sourceInterval(4343, 4361)), this.range("à±", "à±").withInterval(decl.sourceInterval(4364, 4382)), this.range("à²¿", "à²¿").withInterval(decl.sourceInterval(4385, 4403)), this.range("à³", "à³").withInterval(decl.sourceInterval(4406, 4424)), this.range("à³", "à³").withInterval(decl.sourceInterval(4427, 4445)), this.range("àµ", "àµ").withInterval(decl.sourceInterval(4448, 4466)), this.range("àµ", "àµ").withInterval(decl.sourceInterval(4469, 4487)), this.range("à¸±", "à¸±").withInterval(decl.sourceInterval(4490, 4508)), this.range("à¸´", "à¸º").withInterval(decl.sourceInterval(4511, 4529)), this.range("à¹", "à¹").withInterval(decl.sourceInterval(4532, 4550)), this.range("àº±", "àº±").withInterval(decl.sourceInterval(4553, 4571)), this.range("àº´", "àº¹").withInterval(decl.sourceInterval(4574, 4592)), this.range("àº»", "àº¼").withInterval(decl.sourceInterval(4595, 4613)), this.range("à»", "à»").withInterval(decl.sourceInterval(4616, 4634)), this.range("à¼", "à¼").withInterval(decl.sourceInterval(4637, 4655)), this.range("à¼µ", "à¼µ").withInterval(decl.sourceInterval(4658, 4676)), this.range("à¼·", "à¼·").withInterval(decl.sourceInterval(4679, 4697)), this.range("à¼¹", "à¼¹").withInterval(decl.sourceInterval(4700, 4718)), this.range("à½±", "à½¾").withInterval(decl.sourceInterval(4721, 4739)), this.range("à¾", "à¾").withInterval(decl.sourceInterval(4742, 4760)), this.range("à¾", "à¾").withInterval(decl.sourceInterval(4763, 4781)), this.range("à¾", "à¾").withInterval(decl.sourceInterval(4784, 4802)), this.range("à¾", "à¾").withInterval(decl.sourceInterval(4805, 4823)), this.range("à¾", "à¾­").withInterval(decl.sourceInterval(4826, 4844)), this.range("à¾±", "à¾·").withInterval(decl.sourceInterval(4847, 4865)), this.range("à¾¹", "à¾¹").withInterval(decl.sourceInterval(4868, 4886)), this.range("â", "â").withInterval(decl.sourceInterval(4889, 4907)), this.range("â¡", "â¡").withInterval(decl.sourceInterval(4910, 4928)), this.range("ãª", "ã¯").withInterval(decl.sourceInterval(4931, 4949)), this.range("ã", "ã").withInterval(decl.sourceInterval(4952, 4970)), this.range("ï¬", "ï¬").withInterval(decl.sourceInterval(4973, 4991)), this.range("ï¸ ", "ï¸£").withInterval(decl.sourceInterval(4994, 5012))).withInterval(decl.sourceInterval(3335, 5012)), "a Unicode combining mark")
    .define("unicodeConnectorPunctuation", [], this.alt(this.terminal("_").withInterval(decl.sourceInterval(5048, 5056)), this.range("â¿", "â").withInterval(decl.sourceInterval(5059, 5077)), this.terminal("ã»").withInterval(decl.sourceInterval(5080, 5088)), this.range("ï¸³", "ï¸´").withInterval(decl.sourceInterval(5091, 5109)), this.range("ï¹", "ï¹").withInterval(decl.sourceInterval(5112, 5130)), this.terminal("ï¼¿").withInterval(decl.sourceInterval(5133, 5141)), this.terminal("ï½¥").withInterval(decl.sourceInterval(5144, 5152))).withInterval(decl.sourceInterval(5048, 5152)))
    .define("unicodeSpaceSeparator", [], this.alt(this.range("â", "â").withInterval(decl.sourceInterval(5180, 5198)), this.terminal("ã").withInterval(decl.sourceInterval(5201, 5209))).withInterval(decl.sourceInterval(5180, 5209)))
    .define("reservedWord", [], this.alt(this.app("keyword").withInterval(decl.sourceInterval(5230, 5237)), this.app("futureReservedWord").withInterval(decl.sourceInterval(5240, 5258)), this.app("nullLiteral").withInterval(decl.sourceInterval(5261, 5272)), this.app("booleanLiteral").withInterval(decl.sourceInterval(5275, 5289))).withInterval(decl.sourceInterval(5230, 5289)))
    .define("keyword", [], this.alt(this.app("break").withInterval(decl.sourceInterval(5446, 5451)), this.app("do").withInterval(decl.sourceInterval(5457, 5459)), this.app("instanceof").withInterval(decl.sourceInterval(5469, 5479)), this.app("typeof").withInterval(decl.sourceInterval(5482, 5488)), this.app("case").withInterval(decl.sourceInterval(5496, 5500)), this.app("else").withInterval(decl.sourceInterval(5507, 5511)), this.app("new").withInterval(decl.sourceInterval(5519, 5522)), this.app("var").withInterval(decl.sourceInterval(5532, 5535)), this.app("catch").withInterval(decl.sourceInterval(5543, 5548)), this.app("finally").withInterval(decl.sourceInterval(5554, 5561)), this.app("return").withInterval(decl.sourceInterval(5566, 5572)), this.app("void").withInterval(decl.sourceInterval(5579, 5583)), this.app("continue").withInterval(decl.sourceInterval(5591, 5599)), this.app("for").withInterval(decl.sourceInterval(5602, 5605)), this.app("switch").withInterval(decl.sourceInterval(5614, 5620)), this.app("while").withInterval(decl.sourceInterval(5627, 5632)), this.app("debugger").withInterval(decl.sourceInterval(5640, 5648)), this.app("function").withInterval(decl.sourceInterval(5651, 5659)), this.app("this").withInterval(decl.sourceInterval(5663, 5667)), this.app("with").withInterval(decl.sourceInterval(5676, 5680)), this.app("default").withInterval(decl.sourceInterval(5688, 5695)), this.app("if").withInterval(decl.sourceInterval(5699, 5701)), this.app("throw").withInterval(decl.sourceInterval(5711, 5716)), this.app("delete").withInterval(decl.sourceInterval(5724, 5730)), this.app("in").withInterval(decl.sourceInterval(5735, 5737)), this.app("try").withInterval(decl.sourceInterval(5747, 5750))).withInterval(decl.sourceInterval(5446, 5750)))
    .define("futureReservedWordLax", [], this.alt(this.app("class").withInterval(decl.sourceInterval(5780, 5785)), this.app("enum").withInterval(decl.sourceInterval(5789, 5793)), this.app("extends").withInterval(decl.sourceInterval(5797, 5804)), this.app("super").withInterval(decl.sourceInterval(5814, 5819)), this.app("const").withInterval(decl.sourceInterval(5823, 5828)), this.app("export").withInterval(decl.sourceInterval(5831, 5837)), this.app("import").withInterval(decl.sourceInterval(5847, 5853))).withInterval(decl.sourceInterval(5780, 5853)))
    .define("futureReservedWordStrict", [], this.alt(this.app("futureReservedWordLax").withInterval(decl.sourceInterval(5886, 5907)), this.app("implements").withInterval(decl.sourceInterval(5920, 5930)), this.app("let").withInterval(decl.sourceInterval(5933, 5936)), this.app("private").withInterval(decl.sourceInterval(5943, 5950)), this.app("public").withInterval(decl.sourceInterval(5955, 5961)), this.app("interface").withInterval(decl.sourceInterval(5974, 5983)), this.app("package").withInterval(decl.sourceInterval(5987, 5994)), this.app("protected").withInterval(decl.sourceInterval(5997, 6006)), this.app("static").withInterval(decl.sourceInterval(6009, 6015)), this.app("yield").withInterval(decl.sourceInterval(6028, 6033))).withInterval(decl.sourceInterval(5886, 6033)))
    .define("futureReservedWord", [], this.app("futureReservedWordStrict").withInterval(decl.sourceInterval(6060, 6084)))
    .define("literal", [], this.alt(this.app("nullLiteral").withInterval(decl.sourceInterval(6234, 6245)), this.app("booleanLiteral").withInterval(decl.sourceInterval(6248, 6262)), this.app("numericLiteral").withInterval(decl.sourceInterval(6265, 6279)), this.app("stringLiteral").withInterval(decl.sourceInterval(6287, 6300)), this.app("regularExpressionLiteral").withInterval(decl.sourceInterval(6303, 6327))).withInterval(decl.sourceInterval(6234, 6327)))
    .define("nullLiteral", [], this.seq(this.terminal("null").withInterval(decl.sourceInterval(6391, 6397)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(6399, 6413))).withInterval(decl.sourceInterval(6398, 6413))).withInterval(decl.sourceInterval(6391, 6413)))
    .define("booleanLiteral", [], this.seq(this.alt(this.terminal("true").withInterval(decl.sourceInterval(6435, 6441)), this.terminal("false").withInterval(decl.sourceInterval(6444, 6451))).withInterval(decl.sourceInterval(6435, 6451)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(6454, 6468))).withInterval(decl.sourceInterval(6453, 6468))).withInterval(decl.sourceInterval(6434, 6468)))
    .define("numericLiteral", [], this.alt(this.app("octalIntegerLiteral").withInterval(decl.sourceInterval(6810, 6829)), this.app("hexIntegerLiteral").withInterval(decl.sourceInterval(6832, 6849)), this.app("decimalLiteral").withInterval(decl.sourceInterval(6852, 6866))).withInterval(decl.sourceInterval(6810, 6866)))
    .define("decimalLiteral_bothParts", [], this.seq(this.app("decimalIntegerLiteral").withInterval(decl.sourceInterval(6889, 6910)), this.terminal(".").withInterval(decl.sourceInterval(6911, 6914)), this.star(this.app("decimalDigit").withInterval(decl.sourceInterval(6915, 6927))).withInterval(decl.sourceInterval(6915, 6928)), this.app("exponentPart").withInterval(decl.sourceInterval(6929, 6941))).withInterval(decl.sourceInterval(6889, 6941)))
    .define("decimalLiteral_decimalsOnly", [], this.seq(this.terminal(".").withInterval(decl.sourceInterval(6985, 6988)), this.plus(this.app("decimalDigit").withInterval(decl.sourceInterval(6989, 7001))).withInterval(decl.sourceInterval(6989, 7002)), this.app("exponentPart").withInterval(decl.sourceInterval(7003, 7015))).withInterval(decl.sourceInterval(6985, 7015)))
    .define("decimalLiteral_integerOnly", [], this.seq(this.app("decimalIntegerLiteral").withInterval(decl.sourceInterval(7040, 7061)), this.app("exponentPart").withInterval(decl.sourceInterval(7080, 7092))).withInterval(decl.sourceInterval(7040, 7092)))
    .define("decimalLiteral", [], this.alt(this.app("decimalLiteral_bothParts").withInterval(decl.sourceInterval(6889, 6941)), this.app("decimalLiteral_decimalsOnly").withInterval(decl.sourceInterval(6985, 7015)), this.app("decimalLiteral_integerOnly").withInterval(decl.sourceInterval(7040, 7092))).withInterval(decl.sourceInterval(6889, 7107)))
    .define("decimalIntegerLiteral_nonZero", [], this.seq(this.app("nonZeroDigit").withInterval(decl.sourceInterval(7137, 7149)), this.star(this.app("decimalDigit").withInterval(decl.sourceInterval(7150, 7162))).withInterval(decl.sourceInterval(7150, 7163))).withInterval(decl.sourceInterval(7137, 7163)))
    .define("decimalIntegerLiteral_zero", [], this.terminal("0").withInterval(decl.sourceInterval(7185, 7188)))
    .define("decimalIntegerLiteral", [], this.alt(this.app("decimalIntegerLiteral_nonZero").withInterval(decl.sourceInterval(7137, 7163)), this.app("decimalIntegerLiteral_zero").withInterval(decl.sourceInterval(7185, 7188))).withInterval(decl.sourceInterval(7137, 7220)))
    .define("decimalDigit", [], this.range("0", "9").withInterval(decl.sourceInterval(7239, 7247)))
    .define("nonZeroDigit", [], this.range("1", "9").withInterval(decl.sourceInterval(7266, 7274)))
    .define("exponentPart_present", [], this.seq(this.app("exponentIndicator").withInterval(decl.sourceInterval(7295, 7312)), this.app("signedInteger").withInterval(decl.sourceInterval(7313, 7326))).withInterval(decl.sourceInterval(7295, 7326)))
    .define("exponentPart_absent", [], this.seq().withInterval(decl.sourceInterval(7379, 7379)))
    .define("exponentPart", [], this.alt(this.app("exponentPart_present").withInterval(decl.sourceInterval(7295, 7326)), this.app("exponentPart_absent").withInterval(decl.sourceInterval(7379, 7379))).withInterval(decl.sourceInterval(7295, 7388)))
    .define("exponentIndicator", [], this.alt(this.terminal("e").withInterval(decl.sourceInterval(7412, 7415)), this.terminal("E").withInterval(decl.sourceInterval(7418, 7421))).withInterval(decl.sourceInterval(7412, 7421)))
    .define("signedInteger_positive", [], this.seq(this.terminal("+").withInterval(decl.sourceInterval(7441, 7444)), this.star(this.app("decimalDigit").withInterval(decl.sourceInterval(7445, 7457))).withInterval(decl.sourceInterval(7445, 7458))).withInterval(decl.sourceInterval(7441, 7458)))
    .define("signedInteger_negative", [], this.seq(this.terminal("-").withInterval(decl.sourceInterval(7478, 7481)), this.star(this.app("decimalDigit").withInterval(decl.sourceInterval(7482, 7494))).withInterval(decl.sourceInterval(7482, 7495))).withInterval(decl.sourceInterval(7478, 7495)))
    .define("signedInteger_noSign", [], this.plus(this.app("decimalDigit").withInterval(decl.sourceInterval(7519, 7531))).withInterval(decl.sourceInterval(7519, 7532)))
    .define("signedInteger", [], this.alt(this.app("signedInteger_positive").withInterval(decl.sourceInterval(7441, 7458)), this.app("signedInteger_negative").withInterval(decl.sourceInterval(7478, 7495)), this.app("signedInteger_noSign").withInterval(decl.sourceInterval(7519, 7532))).withInterval(decl.sourceInterval(7441, 7542)))
    .define("hexIntegerLiteral", [], this.alt(this.seq(this.terminal("0x").withInterval(decl.sourceInterval(7568, 7572)), this.plus(this.app("hexDigit").withInterval(decl.sourceInterval(7573, 7581))).withInterval(decl.sourceInterval(7573, 7582))).withInterval(decl.sourceInterval(7568, 7582)), this.seq(this.terminal("0X").withInterval(decl.sourceInterval(7591, 7595)), this.plus(this.app("hexDigit").withInterval(decl.sourceInterval(7596, 7604))).withInterval(decl.sourceInterval(7596, 7605))).withInterval(decl.sourceInterval(7591, 7605))).withInterval(decl.sourceInterval(7568, 7605)))
    .define("octalIntegerLiteral", [], this.seq(this.terminal("0").withInterval(decl.sourceInterval(7737, 7740)), this.plus(this.app("octalDigit").withInterval(decl.sourceInterval(7741, 7751))).withInterval(decl.sourceInterval(7741, 7752))).withInterval(decl.sourceInterval(7737, 7752)))
    .define("octalDigit", [], this.range("0", "7").withInterval(decl.sourceInterval(7771, 7779)))
    .define("stringLiteral", [], this.alt(this.seq(this.terminal("\"").withInterval(decl.sourceInterval(7879, 7883)), this.star(this.app("doubleStringCharacter").withInterval(decl.sourceInterval(7884, 7905))).withInterval(decl.sourceInterval(7884, 7906)), this.terminal("\"").withInterval(decl.sourceInterval(7907, 7911))).withInterval(decl.sourceInterval(7879, 7911)), this.seq(this.terminal("'").withInterval(decl.sourceInterval(7919, 7922)), this.star(this.app("singleStringCharacter").withInterval(decl.sourceInterval(7923, 7944))).withInterval(decl.sourceInterval(7923, 7945)), this.terminal("'").withInterval(decl.sourceInterval(7946, 7949))).withInterval(decl.sourceInterval(7919, 7949))).withInterval(decl.sourceInterval(7879, 7949)))
    .define("doubleStringCharacter_nonEscaped", [], this.seq(this.not(this.alt(this.terminal("\"").withInterval(decl.sourceInterval(7979, 7983)), this.terminal("\\").withInterval(decl.sourceInterval(7986, 7990)), this.app("lineTerminator").withInterval(decl.sourceInterval(7993, 8007))).withInterval(decl.sourceInterval(7979, 8007))).withInterval(decl.sourceInterval(7977, 8008)), this.app("sourceCharacter").withInterval(decl.sourceInterval(8009, 8024))).withInterval(decl.sourceInterval(7977, 8024)))
    .define("doubleStringCharacter_escaped", [], this.seq(this.terminal("\\").withInterval(decl.sourceInterval(8048, 8052)), this.app("escapeSequence").withInterval(decl.sourceInterval(8053, 8067))).withInterval(decl.sourceInterval(8048, 8067)))
    .define("doubleStringCharacter_lineContinuation", [], this.app("lineContinuation").withInterval(decl.sourceInterval(8116, 8132)))
    .define("doubleStringCharacter", [], this.alt(this.app("doubleStringCharacter_nonEscaped").withInterval(decl.sourceInterval(7977, 8024)), this.app("doubleStringCharacter_escaped").withInterval(decl.sourceInterval(8048, 8067)), this.app("doubleStringCharacter_lineContinuation").withInterval(decl.sourceInterval(8116, 8132))).withInterval(decl.sourceInterval(7977, 8183)))
    .define("singleStringCharacter_nonEscaped", [], this.seq(this.not(this.alt(this.terminal("'").withInterval(decl.sourceInterval(8213, 8216)), this.terminal("\\").withInterval(decl.sourceInterval(8219, 8223)), this.app("lineTerminator").withInterval(decl.sourceInterval(8226, 8240))).withInterval(decl.sourceInterval(8213, 8240))).withInterval(decl.sourceInterval(8211, 8241)), this.app("sourceCharacter").withInterval(decl.sourceInterval(8242, 8257))).withInterval(decl.sourceInterval(8211, 8257)))
    .define("singleStringCharacter_escaped", [], this.seq(this.terminal("\\").withInterval(decl.sourceInterval(8281, 8285)), this.app("escapeSequence").withInterval(decl.sourceInterval(8286, 8300))).withInterval(decl.sourceInterval(8281, 8300)))
    .define("singleStringCharacter_lineContinuation", [], this.app("lineContinuation").withInterval(decl.sourceInterval(8348, 8364)))
    .define("singleStringCharacter", [], this.alt(this.app("singleStringCharacter_nonEscaped").withInterval(decl.sourceInterval(8211, 8257)), this.app("singleStringCharacter_escaped").withInterval(decl.sourceInterval(8281, 8300)), this.app("singleStringCharacter_lineContinuation").withInterval(decl.sourceInterval(8348, 8364))).withInterval(decl.sourceInterval(8211, 8414)))
    .define("lineContinuation", [], this.seq(this.terminal("\\").withInterval(decl.sourceInterval(8437, 8441)), this.app("lineTerminatorSequence").withInterval(decl.sourceInterval(8442, 8464))).withInterval(decl.sourceInterval(8437, 8464)))
    .define("escapeSequence", [], this.alt(this.app("unicodeEscapeSequence").withInterval(decl.sourceInterval(8485, 8506)), this.app("hexEscapeSequence").withInterval(decl.sourceInterval(8515, 8532)), this.app("octalEscapeSequence").withInterval(decl.sourceInterval(8541, 8560)), this.app("characterEscapeSequence").withInterval(decl.sourceInterval(8569, 8592))).withInterval(decl.sourceInterval(8485, 8592)))
    .define("characterEscapeSequence", [], this.alt(this.app("singleEscapeCharacter").withInterval(decl.sourceInterval(8642, 8663)), this.app("nonEscapeCharacter").withInterval(decl.sourceInterval(8675, 8693))).withInterval(decl.sourceInterval(8642, 8693)))
    .define("singleEscapeCharacter", [], this.alt(this.terminal("'").withInterval(decl.sourceInterval(8721, 8724)), this.terminal("\"").withInterval(decl.sourceInterval(8782, 8786)), this.terminal("\\").withInterval(decl.sourceInterval(8843, 8847)), this.terminal("b").withInterval(decl.sourceInterval(8904, 8907)), this.terminal("f").withInterval(decl.sourceInterval(8965, 8968)), this.terminal("n").withInterval(decl.sourceInterval(9026, 9029)), this.terminal("r").withInterval(decl.sourceInterval(9087, 9090)), this.terminal("t").withInterval(decl.sourceInterval(9148, 9151)), this.terminal("v").withInterval(decl.sourceInterval(9209, 9212))).withInterval(decl.sourceInterval(8721, 9212)))
    .define("nonEscapeCharacter", [], this.seq(this.not(this.alt(this.app("escapeCharacter").withInterval(decl.sourceInterval(9287, 9302)), this.app("lineTerminator").withInterval(decl.sourceInterval(9305, 9319))).withInterval(decl.sourceInterval(9287, 9319))).withInterval(decl.sourceInterval(9285, 9320)), this.app("sourceCharacter").withInterval(decl.sourceInterval(9321, 9336))).withInterval(decl.sourceInterval(9285, 9336)))
    .define("escapeCharacter", [], this.alt(this.app("singleEscapeCharacter").withInterval(decl.sourceInterval(9358, 9379)), this.app("decimalDigit").withInterval(decl.sourceInterval(9382, 9394)), this.terminal("x").withInterval(decl.sourceInterval(9397, 9400)), this.terminal("u").withInterval(decl.sourceInterval(9403, 9406))).withInterval(decl.sourceInterval(9358, 9406)))
    .define("octalEscapeSequence_whole", [], this.seq(this.app("zeroToThree").withInterval(decl.sourceInterval(9432, 9443)), this.app("octalDigit").withInterval(decl.sourceInterval(9444, 9454)), this.app("octalDigit").withInterval(decl.sourceInterval(9455, 9465))).withInterval(decl.sourceInterval(9432, 9465)))
    .define("octalEscapeSequence_eightTimesfourToSeven", [], this.seq(this.app("fourToSeven").withInterval(decl.sourceInterval(9488, 9499)), this.app("octalDigit").withInterval(decl.sourceInterval(9500, 9510))).withInterval(decl.sourceInterval(9488, 9510)))
    .define("octalEscapeSequence_eightTimesZeroToThree", [], this.seq(this.app("zeroToThree").withInterval(decl.sourceInterval(9560, 9571)), this.app("octalDigit").withInterval(decl.sourceInterval(9572, 9582)), this.not(this.app("decimalDigit").withInterval(decl.sourceInterval(9584, 9596))).withInterval(decl.sourceInterval(9583, 9596))).withInterval(decl.sourceInterval(9560, 9596)))
    .define("octalEscapeSequence_octal", [], this.seq(this.app("octalDigit").withInterval(decl.sourceInterval(9632, 9642)), this.not(this.app("decimalDigit").withInterval(decl.sourceInterval(9644, 9656))).withInterval(decl.sourceInterval(9643, 9656))).withInterval(decl.sourceInterval(9632, 9656)))
    .define("octalEscapeSequence", [], this.alt(this.app("octalEscapeSequence_whole").withInterval(decl.sourceInterval(9432, 9465)), this.app("octalEscapeSequence_eightTimesfourToSeven").withInterval(decl.sourceInterval(9488, 9510)), this.app("octalEscapeSequence_eightTimesZeroToThree").withInterval(decl.sourceInterval(9560, 9596)), this.app("octalEscapeSequence_octal").withInterval(decl.sourceInterval(9632, 9656))).withInterval(decl.sourceInterval(9432, 9677)))
    .define("hexEscapeSequence", [], this.seq(this.terminal("x").withInterval(decl.sourceInterval(9701, 9704)), this.app("hexDigit").withInterval(decl.sourceInterval(9705, 9713)), this.app("hexDigit").withInterval(decl.sourceInterval(9714, 9722))).withInterval(decl.sourceInterval(9701, 9722)))
    .define("unicodeEscapeSequence", [], this.seq(this.terminal("u").withInterval(decl.sourceInterval(9750, 9753)), this.app("hexDigit").withInterval(decl.sourceInterval(9754, 9762)), this.app("hexDigit").withInterval(decl.sourceInterval(9763, 9771)), this.app("hexDigit").withInterval(decl.sourceInterval(9772, 9780)), this.app("hexDigit").withInterval(decl.sourceInterval(9781, 9789))).withInterval(decl.sourceInterval(9750, 9789)))
    .define("zeroToThree", [], this.range("0", "3").withInterval(decl.sourceInterval(9809, 9817)))
    .define("fourToSeven", [], this.range("4", "7").withInterval(decl.sourceInterval(9835, 9843)))
    .define("regularExpressionLiteral", [], this.seq(this.terminal("/").withInterval(decl.sourceInterval(9976, 9979)), this.app("regularExpressionBody").withInterval(decl.sourceInterval(9980, 10001)), this.terminal("/").withInterval(decl.sourceInterval(10002, 10005)), this.app("regularExpressionFlags").withInterval(decl.sourceInterval(10006, 10028))).withInterval(decl.sourceInterval(9976, 10028)))
    .define("regularExpressionBody", [], this.seq(this.app("regularExpressionFirstChar").withInterval(decl.sourceInterval(10056, 10082)), this.star(this.app("regularExpressionChar").withInterval(decl.sourceInterval(10083, 10104))).withInterval(decl.sourceInterval(10083, 10105))).withInterval(decl.sourceInterval(10056, 10105)))
    .define("regularExpressionFirstChar", [], this.alt(this.seq(this.not(this.alt(this.terminal("*").withInterval(decl.sourceInterval(10140, 10143)), this.terminal("\\").withInterval(decl.sourceInterval(10146, 10150)), this.terminal("/").withInterval(decl.sourceInterval(10153, 10156)), this.terminal("[").withInterval(decl.sourceInterval(10159, 10162))).withInterval(decl.sourceInterval(10140, 10162))).withInterval(decl.sourceInterval(10138, 10163)), this.app("regularExpressionNonTerminator").withInterval(decl.sourceInterval(10164, 10194))).withInterval(decl.sourceInterval(10138, 10194)), this.app("regularExpressionBackslashSequence").withInterval(decl.sourceInterval(10206, 10240)), this.app("regularExpressionClass").withInterval(decl.sourceInterval(10252, 10274))).withInterval(decl.sourceInterval(10138, 10274)))
    .define("regularExpressionChar", [], this.alt(this.seq(this.not(this.alt(this.terminal("\\").withInterval(decl.sourceInterval(10304, 10308)), this.terminal("/").withInterval(decl.sourceInterval(10311, 10314)), this.terminal("[").withInterval(decl.sourceInterval(10317, 10320))).withInterval(decl.sourceInterval(10304, 10320))).withInterval(decl.sourceInterval(10302, 10321)), this.app("regularExpressionNonTerminator").withInterval(decl.sourceInterval(10322, 10352))).withInterval(decl.sourceInterval(10302, 10352)), this.app("regularExpressionBackslashSequence").withInterval(decl.sourceInterval(10362, 10396)), this.app("regularExpressionClass").withInterval(decl.sourceInterval(10406, 10428))).withInterval(decl.sourceInterval(10302, 10428)))
    .define("regularExpressionBackslashSequence", [], this.seq(this.terminal("\\").withInterval(decl.sourceInterval(10469, 10473)), this.app("regularExpressionNonTerminator").withInterval(decl.sourceInterval(10474, 10504))).withInterval(decl.sourceInterval(10469, 10504)))
    .define("regularExpressionNonTerminator", [], this.seq(this.not(this.app("lineTerminator").withInterval(decl.sourceInterval(10543, 10557))).withInterval(decl.sourceInterval(10541, 10558)), this.app("sourceCharacter").withInterval(decl.sourceInterval(10559, 10574))).withInterval(decl.sourceInterval(10541, 10574)))
    .define("regularExpressionClass", [], this.seq(this.terminal("[").withInterval(decl.sourceInterval(10603, 10606)), this.star(this.app("regularExpressionClassChar").withInterval(decl.sourceInterval(10607, 10633))).withInterval(decl.sourceInterval(10607, 10634)), this.terminal("]").withInterval(decl.sourceInterval(10635, 10638))).withInterval(decl.sourceInterval(10603, 10638)))
    .define("regularExpressionClassChar", [], this.alt(this.seq(this.not(this.alt(this.terminal("]").withInterval(decl.sourceInterval(10673, 10676)), this.terminal("\\").withInterval(decl.sourceInterval(10679, 10683))).withInterval(decl.sourceInterval(10673, 10683))).withInterval(decl.sourceInterval(10671, 10684)), this.app("regularExpressionNonTerminator").withInterval(decl.sourceInterval(10685, 10715))).withInterval(decl.sourceInterval(10671, 10715)), this.app("regularExpressionBackslashSequence").withInterval(decl.sourceInterval(10727, 10761))).withInterval(decl.sourceInterval(10671, 10761)))
    .define("regularExpressionFlags", [], this.star(this.app("identifierPart").withInterval(decl.sourceInterval(10790, 10804))).withInterval(decl.sourceInterval(10790, 10805)))
    .define("multiLineCommentNoNL", [], this.seq(this.terminal("/*").withInterval(decl.sourceInterval(10900, 10904)), this.star(this.seq(this.not(this.alt(this.terminal("*/").withInterval(decl.sourceInterval(10908, 10912)), this.app("lineTerminator").withInterval(decl.sourceInterval(10915, 10929))).withInterval(decl.sourceInterval(10908, 10929))).withInterval(decl.sourceInterval(10906, 10930)), this.app("sourceCharacter").withInterval(decl.sourceInterval(10931, 10946))).withInterval(decl.sourceInterval(10906, 10946))).withInterval(decl.sourceInterval(10905, 10948)), this.terminal("*/").withInterval(decl.sourceInterval(10949, 10953))).withInterval(decl.sourceInterval(10900, 10953)))
    .define("spacesNoNL", [], this.star(this.alt(this.app("whitespace").withInterval(decl.sourceInterval(11075, 11085)), this.app("singleLineComment").withInterval(decl.sourceInterval(11088, 11105)), this.app("multiLineCommentNoNL").withInterval(decl.sourceInterval(11108, 11128))).withInterval(decl.sourceInterval(11075, 11128))).withInterval(decl.sourceInterval(11074, 11130)))
    .define("sc", [], this.alt(this.seq(this.star(this.app("space").withInterval(decl.sourceInterval(11509, 11514))).withInterval(decl.sourceInterval(11509, 11515)), this.alt(this.terminal(";").withInterval(decl.sourceInterval(11517, 11520)), this.app("end").withInterval(decl.sourceInterval(11523, 11526))).withInterval(decl.sourceInterval(11517, 11526))).withInterval(decl.sourceInterval(11509, 11527)), this.seq(this.app("spacesNoNL").withInterval(decl.sourceInterval(11533, 11543)), this.alt(this.app("lineTerminator").withInterval(decl.sourceInterval(11545, 11559)), this.seq(this.not(this.app("multiLineCommentNoNL").withInterval(decl.sourceInterval(11563, 11583))).withInterval(decl.sourceInterval(11562, 11583)), this.app("multiLineComment").withInterval(decl.sourceInterval(11584, 11600))).withInterval(decl.sourceInterval(11562, 11600)), this.la(this.terminal("}").withInterval(decl.sourceInterval(11604, 11607))).withInterval(decl.sourceInterval(11603, 11607))).withInterval(decl.sourceInterval(11545, 11607))).withInterval(decl.sourceInterval(11533, 11608))).withInterval(decl.sourceInterval(11509, 11608)))
    .define("break", [], this.seq(this.terminal("break").withInterval(decl.sourceInterval(11674, 11681)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(11683, 11697))).withInterval(decl.sourceInterval(11682, 11697))).withInterval(decl.sourceInterval(11674, 11697)))
    .define("do", [], this.seq(this.terminal("do").withInterval(decl.sourceInterval(11706, 11710)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(11712, 11726))).withInterval(decl.sourceInterval(11711, 11726))).withInterval(decl.sourceInterval(11706, 11726)))
    .define("instanceof", [], this.seq(this.terminal("instanceof").withInterval(decl.sourceInterval(11743, 11755)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(11757, 11771))).withInterval(decl.sourceInterval(11756, 11771))).withInterval(decl.sourceInterval(11743, 11771)))
    .define("typeof", [], this.seq(this.terminal("typeof").withInterval(decl.sourceInterval(11784, 11792)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(11794, 11808))).withInterval(decl.sourceInterval(11793, 11808))).withInterval(decl.sourceInterval(11784, 11808)))
    .define("case", [], this.seq(this.terminal("case").withInterval(decl.sourceInterval(11819, 11825)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(11827, 11841))).withInterval(decl.sourceInterval(11826, 11841))).withInterval(decl.sourceInterval(11819, 11841)))
    .define("else", [], this.seq(this.terminal("else").withInterval(decl.sourceInterval(11852, 11858)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(11860, 11874))).withInterval(decl.sourceInterval(11859, 11874))).withInterval(decl.sourceInterval(11852, 11874)))
    .define("new", [], this.seq(this.terminal("new").withInterval(decl.sourceInterval(11884, 11889)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(11891, 11905))).withInterval(decl.sourceInterval(11890, 11905))).withInterval(decl.sourceInterval(11884, 11905)))
    .define("var", [], this.seq(this.terminal("var").withInterval(decl.sourceInterval(11915, 11920)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(11922, 11936))).withInterval(decl.sourceInterval(11921, 11936))).withInterval(decl.sourceInterval(11915, 11936)))
    .define("catch", [], this.seq(this.terminal("catch").withInterval(decl.sourceInterval(11948, 11955)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(11957, 11971))).withInterval(decl.sourceInterval(11956, 11971))).withInterval(decl.sourceInterval(11948, 11971)))
    .define("finally", [], this.seq(this.terminal("finally").withInterval(decl.sourceInterval(11985, 11994)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(11996, 12010))).withInterval(decl.sourceInterval(11995, 12010))).withInterval(decl.sourceInterval(11985, 12010)))
    .define("return", [], this.seq(this.terminal("return").withInterval(decl.sourceInterval(12023, 12031)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(12033, 12047))).withInterval(decl.sourceInterval(12032, 12047))).withInterval(decl.sourceInterval(12023, 12047)))
    .define("void", [], this.seq(this.terminal("void").withInterval(decl.sourceInterval(12058, 12064)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(12066, 12080))).withInterval(decl.sourceInterval(12065, 12080))).withInterval(decl.sourceInterval(12058, 12080)))
    .define("continue", [], this.seq(this.terminal("continue").withInterval(decl.sourceInterval(12095, 12105)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(12107, 12121))).withInterval(decl.sourceInterval(12106, 12121))).withInterval(decl.sourceInterval(12095, 12121)))
    .define("for", [], this.seq(this.terminal("for").withInterval(decl.sourceInterval(12131, 12136)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(12138, 12152))).withInterval(decl.sourceInterval(12137, 12152))).withInterval(decl.sourceInterval(12131, 12152)))
    .define("switch", [], this.seq(this.terminal("switch").withInterval(decl.sourceInterval(12165, 12173)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(12175, 12189))).withInterval(decl.sourceInterval(12174, 12189))).withInterval(decl.sourceInterval(12165, 12189)))
    .define("while", [], this.seq(this.terminal("while").withInterval(decl.sourceInterval(12201, 12208)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(12210, 12224))).withInterval(decl.sourceInterval(12209, 12224))).withInterval(decl.sourceInterval(12201, 12224)))
    .define("debugger", [], this.seq(this.terminal("debugger").withInterval(decl.sourceInterval(12239, 12249)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(12251, 12265))).withInterval(decl.sourceInterval(12250, 12265))).withInterval(decl.sourceInterval(12239, 12265)))
    .define("function", [], this.seq(this.terminal("function").withInterval(decl.sourceInterval(12280, 12290)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(12292, 12306))).withInterval(decl.sourceInterval(12291, 12306))).withInterval(decl.sourceInterval(12280, 12306)))
    .define("this", [], this.seq(this.terminal("this").withInterval(decl.sourceInterval(12317, 12323)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(12325, 12339))).withInterval(decl.sourceInterval(12324, 12339))).withInterval(decl.sourceInterval(12317, 12339)))
    .define("with", [], this.seq(this.terminal("with").withInterval(decl.sourceInterval(12350, 12356)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(12358, 12372))).withInterval(decl.sourceInterval(12357, 12372))).withInterval(decl.sourceInterval(12350, 12372)))
    .define("default", [], this.seq(this.terminal("default").withInterval(decl.sourceInterval(12386, 12395)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(12397, 12411))).withInterval(decl.sourceInterval(12396, 12411))).withInterval(decl.sourceInterval(12386, 12411)))
    .define("if", [], this.seq(this.terminal("if").withInterval(decl.sourceInterval(12420, 12424)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(12426, 12440))).withInterval(decl.sourceInterval(12425, 12440))).withInterval(decl.sourceInterval(12420, 12440)))
    .define("throw", [], this.seq(this.terminal("throw").withInterval(decl.sourceInterval(12452, 12459)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(12461, 12475))).withInterval(decl.sourceInterval(12460, 12475))).withInterval(decl.sourceInterval(12452, 12475)))
    .define("delete", [], this.seq(this.terminal("delete").withInterval(decl.sourceInterval(12488, 12496)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(12498, 12512))).withInterval(decl.sourceInterval(12497, 12512))).withInterval(decl.sourceInterval(12488, 12512)))
    .define("in", [], this.seq(this.terminal("in").withInterval(decl.sourceInterval(12521, 12525)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(12527, 12541))).withInterval(decl.sourceInterval(12526, 12541))).withInterval(decl.sourceInterval(12521, 12541)))
    .define("try", [], this.seq(this.terminal("try").withInterval(decl.sourceInterval(12551, 12556)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(12558, 12572))).withInterval(decl.sourceInterval(12557, 12572))).withInterval(decl.sourceInterval(12551, 12572)))
    .define("get", [], this.seq(this.terminal("get").withInterval(decl.sourceInterval(12582, 12587)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(12589, 12603))).withInterval(decl.sourceInterval(12588, 12603))).withInterval(decl.sourceInterval(12582, 12603)))
    .define("set", [], this.seq(this.terminal("set").withInterval(decl.sourceInterval(12613, 12618)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(12620, 12634))).withInterval(decl.sourceInterval(12619, 12634))).withInterval(decl.sourceInterval(12613, 12634)))
    .define("class", [], this.seq(this.terminal("class").withInterval(decl.sourceInterval(12646, 12653)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(12655, 12669))).withInterval(decl.sourceInterval(12654, 12669))).withInterval(decl.sourceInterval(12646, 12669)))
    .define("enum", [], this.seq(this.terminal("enum").withInterval(decl.sourceInterval(12680, 12686)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(12688, 12702))).withInterval(decl.sourceInterval(12687, 12702))).withInterval(decl.sourceInterval(12680, 12702)))
    .define("extends", [], this.seq(this.terminal("extends").withInterval(decl.sourceInterval(12716, 12725)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(12727, 12741))).withInterval(decl.sourceInterval(12726, 12741))).withInterval(decl.sourceInterval(12716, 12741)))
    .define("super", [], this.seq(this.terminal("super").withInterval(decl.sourceInterval(12753, 12760)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(12762, 12776))).withInterval(decl.sourceInterval(12761, 12776))).withInterval(decl.sourceInterval(12753, 12776)))
    .define("const", [], this.seq(this.terminal("const").withInterval(decl.sourceInterval(12788, 12795)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(12797, 12811))).withInterval(decl.sourceInterval(12796, 12811))).withInterval(decl.sourceInterval(12788, 12811)))
    .define("export", [], this.seq(this.terminal("export").withInterval(decl.sourceInterval(12824, 12832)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(12834, 12848))).withInterval(decl.sourceInterval(12833, 12848))).withInterval(decl.sourceInterval(12824, 12848)))
    .define("import", [], this.seq(this.terminal("import").withInterval(decl.sourceInterval(12861, 12869)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(12871, 12885))).withInterval(decl.sourceInterval(12870, 12885))).withInterval(decl.sourceInterval(12861, 12885)))
    .define("implements", [], this.seq(this.terminal("implements").withInterval(decl.sourceInterval(12902, 12914)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(12916, 12930))).withInterval(decl.sourceInterval(12915, 12930))).withInterval(decl.sourceInterval(12902, 12930)))
    .define("let", [], this.seq(this.terminal("let").withInterval(decl.sourceInterval(12940, 12945)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(12947, 12961))).withInterval(decl.sourceInterval(12946, 12961))).withInterval(decl.sourceInterval(12940, 12961)))
    .define("private", [], this.seq(this.terminal("private").withInterval(decl.sourceInterval(12975, 12984)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(12986, 13000))).withInterval(decl.sourceInterval(12985, 13000))).withInterval(decl.sourceInterval(12975, 13000)))
    .define("public", [], this.seq(this.terminal("public").withInterval(decl.sourceInterval(13013, 13021)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(13023, 13037))).withInterval(decl.sourceInterval(13022, 13037))).withInterval(decl.sourceInterval(13013, 13037)))
    .define("interface", [], this.seq(this.terminal("interface").withInterval(decl.sourceInterval(13053, 13064)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(13066, 13080))).withInterval(decl.sourceInterval(13065, 13080))).withInterval(decl.sourceInterval(13053, 13080)))
    .define("package", [], this.seq(this.terminal("package").withInterval(decl.sourceInterval(13094, 13103)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(13105, 13119))).withInterval(decl.sourceInterval(13104, 13119))).withInterval(decl.sourceInterval(13094, 13119)))
    .define("protected", [], this.seq(this.terminal("protected").withInterval(decl.sourceInterval(13135, 13146)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(13148, 13162))).withInterval(decl.sourceInterval(13147, 13162))).withInterval(decl.sourceInterval(13135, 13162)))
    .define("static", [], this.seq(this.terminal("static").withInterval(decl.sourceInterval(13175, 13183)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(13185, 13199))).withInterval(decl.sourceInterval(13184, 13199))).withInterval(decl.sourceInterval(13175, 13199)))
    .define("yield", [], this.seq(this.terminal("yield").withInterval(decl.sourceInterval(13211, 13218)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(13220, 13234))).withInterval(decl.sourceInterval(13219, 13234))).withInterval(decl.sourceInterval(13211, 13234)))
    .build();
});
