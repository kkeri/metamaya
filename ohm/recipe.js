(function() {
  var decl = this.newGrammar("Metamaya")
    .withSource("Metamaya {\r\n\r\n\tFile = Statement*\r\n\r\n\tStatement =\r\n\t\t| Definition\r\n\r\n\tDefinition =\r\n\t\t| identifier \"=\" Expression #sc -- namedValue\r\n\t\t| identifier ParamList \"=\" Expression #sc -- namedFunction\r\n\r\n\tImport = \"@import\" stringLiteral #sc\r\n\r\n\tDeclaration = \"@declare\" listOf<identifier, \",\"> #sc\r\n\r\n\tExpression = Relation\r\n\r\n\tRelation =\r\n\t\t| Relation (\"==\" | \"!=\" | \"<\" | \">\" | \"<=\" | \">=\") Additive -- infix\r\n\t\t| Additive\r\n\r\n\tAdditive =\r\n\t\t| Additive (\"+\" | \"-\") Multiplicative -- infix\r\n\t\t| Multiplicative\r\n\r\n\tMultiplicative =\r\n\t\t| Multiplicative (\"*\" | \"/\" | \"%\") Factor -- infix\r\n\t\t| Factor\r\n\r\n\tFactor =\r\n\t\t| \"-\" Primary -- prefix\r\n\t\t| Primary\r\n\r\n\tPrimary =\r\n\t\t| Primary \".\" identifier ArgumentList -- bindInstanceMethod\r\n\t\t| Primary \".\" identifier -- select\r\n\t\t| Primary \"[\" Expression \"]\" -- index\r\n\t\t| Primary ArgumentList -- bind\r\n\t\t| \"(\" Expression \")\" -- parens\r\n\t\t| \"{\" Statement* \"}\" -- object\r\n\t\t| identifier -- nameref\r\n\t\t| literal\r\n\t\t| \"_\"\r\n\r\n\tParamList = \"(\" listOf<identifier, \",\"> \")\"\r\n\r\n\tArgumentList = \"(\" listOf<Expression, \",\"> \")\"\r\n\r\n// --------------------------------------------------------------------------\r\n\r\n  // ï¿½A.1 Lexical Grammar -- http://ecma-international.org/ecma-262/5.1/#sec-A.1\r\n\r\n  /*\r\n\tNote: the following lexical conventions (see http://ecma-international.org/ecma-262/5.1/#sec-7)\r\n\tare not implemented in this parser.\r\n\r\n\t// Goal production in contexts where a leading \"/\" or \"/=\" is permitted:\r\n\tInputElementDiv = whitespace | lineTerminator | comment | token | DivPunctuator\r\n\r\n\t// Goal production in contexts where a leading \"/\" or \"/=' is not permitted:\r\n\tInputElementRegExp = whitespace | lineTerminator | comment | token | regularExpressionLiteral\r\n  */\r\n\r\n  sourceCharacter = any\r\n\r\n  // Override Ohm's built-in definition of space.\r\n  space := whitespace | lineTerminator | comment\r\n\r\n  whitespace = \"\\t\"\r\n\t\t\t | \"\\x0B\"    -- verticalTab\r\n\t\t\t | \"\\x0C\"    -- formFeed\r\n\t\t\t | \" \"\r\n\t\t\t | \"\\u00A0\"  -- noBreakSpace\r\n\t\t\t | \"\\uFEFF\"  -- byteOrderMark\r\n\t\t\t | unicodeSpaceSeparator\r\n\r\n  lineTerminator = \"\\n\" | \"\\r\" | \"\\u2028\" | \"\\u2029\"\r\n  lineTerminatorSequence = \"\\n\" | \"\\r\" ~\"\\n\" | \"\\u2028\" | \"\\u2029\" | \"\\r\\n\"\r\n\r\n  comment = multiLineComment | singleLineComment\r\n\r\n  multiLineComment = \"/*\" (~\"*/\" sourceCharacter)* \"*/\"\r\n  singleLineComment = \"//\" (~lineTerminator sourceCharacter)*\r\n\r\n  identifier (an indentifier) = ~reservedWord identifierName\r\n  identifierName = identifierStart identifierPart*\r\n\r\n  identifierStart = letter | \"$\" | \"_\"\r\n\t\t\t\t  | \"\\\\\" unicodeEscapeSequence -- escaped\r\n  identifierPart = identifierStart | unicodeCombiningMark\r\n\t\t\t\t | unicodeDigit | unicodeConnectorPunctuation\r\n\t\t\t\t | \"\\u200C\" | \"\\u200D\"\r\n letter += unicodeCategoryNl\r\n  unicodeCategoryNl\r\n\t= \"\\u2160\"..\"\\u2182\" | \"\\u3007\" | \"\\u3021\"..\"\\u3029\"\r\n  unicodeDigit (a digit)\r\n\t= \"\\u0030\"..\"\\u0039\" | \"\\u0660\"..\"\\u0669\" | \"\\u06F0\"..\"\\u06F9\" | \"\\u0966\"..\"\\u096F\" | \"\\u09E6\"..\"\\u09EF\" | \"\\u0A66\"..\"\\u0A6F\" | \"\\u0AE6\"..\"\\u0AEF\" | \"\\u0B66\"..\"\\u0B6F\" | \"\\u0BE7\"..\"\\u0BEF\" | \"\\u0C66\"..\"\\u0C6F\" | \"\\u0CE6\"..\"\\u0CEF\" | \"\\u0D66\"..\"\\u0D6F\" | \"\\u0E50\"..\"\\u0E59\" | \"\\u0ED0\"..\"\\u0ED9\" | \"\\u0F20\"..\"\\u0F29\" | \"\\uFF10\"..\"\\uFF19\"\r\n\r\n  unicodeCombiningMark (a Unicode combining mark)\r\n\t= \"\\u0300\"..\"\\u0345\" | \"\\u0360\"..\"\\u0361\" | \"\\u0483\"..\"\\u0486\" | \"\\u0591\"..\"\\u05A1\" | \"\\u05A3\"..\"\\u05B9\" | \"\\u05BB\"..\"\\u05BD\" | \"\\u05BF\"..\"\\u05BF\" | \"\\u05C1\"..\"\\u05C2\" | \"\\u05C4\"..\"\\u05C4\" | \"\\u064B\"..\"\\u0652\" | \"\\u0670\"..\"\\u0670\" | \"\\u06D6\"..\"\\u06DC\" | \"\\u06DF\"..\"\\u06E4\" | \"\\u06E7\"..\"\\u06E8\" | \"\\u06EA\"..\"\\u06ED\" | \"\\u0901\"..\"\\u0902\" | \"\\u093C\"..\"\\u093C\" | \"\\u0941\"..\"\\u0948\" | \"\\u094D\"..\"\\u094D\" | \"\\u0951\"..\"\\u0954\" | \"\\u0962\"..\"\\u0963\" | \"\\u0981\"..\"\\u0981\" | \"\\u09BC\"..\"\\u09BC\" | \"\\u09C1\"..\"\\u09C4\" | \"\\u09CD\"..\"\\u09CD\" | \"\\u09E2\"..\"\\u09E3\" | \"\\u0A02\"..\"\\u0A02\" | \"\\u0A3C\"..\"\\u0A3C\" | \"\\u0A41\"..\"\\u0A42\" | \"\\u0A47\"..\"\\u0A48\" | \"\\u0A4B\"..\"\\u0A4D\" | \"\\u0A70\"..\"\\u0A71\" | \"\\u0A81\"..\"\\u0A82\" | \"\\u0ABC\"..\"\\u0ABC\" | \"\\u0AC1\"..\"\\u0AC5\" | \"\\u0AC7\"..\"\\u0AC8\" | \"\\u0ACD\"..\"\\u0ACD\" | \"\\u0B01\"..\"\\u0B01\" | \"\\u0B3C\"..\"\\u0B3C\" | \"\\u0B3F\"..\"\\u0B3F\" | \"\\u0B41\"..\"\\u0B43\" | \"\\u0B4D\"..\"\\u0B4D\" | \"\\u0B56\"..\"\\u0B56\" | \"\\u0B82\"..\"\\u0B82\" | \"\\u0BC0\"..\"\\u0BC0\" | \"\\u0BCD\"..\"\\u0BCD\" | \"\\u0C3E\"..\"\\u0C40\" | \"\\u0C46\"..\"\\u0C48\" | \"\\u0C4A\"..\"\\u0C4D\" | \"\\u0C55\"..\"\\u0C56\" | \"\\u0CBF\"..\"\\u0CBF\" | \"\\u0CC6\"..\"\\u0CC6\" | \"\\u0CCC\"..\"\\u0CCD\" | \"\\u0D41\"..\"\\u0D43\" | \"\\u0D4D\"..\"\\u0D4D\" | \"\\u0E31\"..\"\\u0E31\" | \"\\u0E34\"..\"\\u0E3A\" | \"\\u0E47\"..\"\\u0E4E\" | \"\\u0EB1\"..\"\\u0EB1\" | \"\\u0EB4\"..\"\\u0EB9\" | \"\\u0EBB\"..\"\\u0EBC\" | \"\\u0EC8\"..\"\\u0ECD\" | \"\\u0F18\"..\"\\u0F19\" | \"\\u0F35\"..\"\\u0F35\" | \"\\u0F37\"..\"\\u0F37\" | \"\\u0F39\"..\"\\u0F39\" | \"\\u0F71\"..\"\\u0F7E\" | \"\\u0F80\"..\"\\u0F84\" | \"\\u0F86\"..\"\\u0F87\" | \"\\u0F90\"..\"\\u0F95\" | \"\\u0F97\"..\"\\u0F97\" | \"\\u0F99\"..\"\\u0FAD\" | \"\\u0FB1\"..\"\\u0FB7\" | \"\\u0FB9\"..\"\\u0FB9\" | \"\\u20D0\"..\"\\u20DC\" | \"\\u20E1\"..\"\\u20E1\" | \"\\u302A\"..\"\\u302F\" | \"\\u3099\"..\"\\u309A\" | \"\\uFB1E\"..\"\\uFB1E\" | \"\\uFE20\"..\"\\uFE23\"\r\n\r\n  unicodeConnectorPunctuation = \"\\u005F\" | \"\\u203F\"..\"\\u2040\" | \"\\u30FB\" | \"\\uFE33\"..\"\\uFE34\" | \"\\uFE4D\"..\"\\uFE4F\" | \"\\uFF3F\" | \"\\uFF65\"\r\n  unicodeSpaceSeparator = \"\\u2000\"..\"\\u200B\" | \"\\u3000\"\r\n\r\n  reservedWord = keyword | futureReservedWord | nullLiteral | booleanLiteral\r\n\r\n  // Note: keywords that are the complete prefix of another keyword should\r\n  // be prioritized (e.g. 'in' should come before 'instanceof')\r\n  keyword = break    | do        | instanceof | typeof\r\n\t\t  | case     | else      | new        | var\r\n\t\t  | catch    | finally   | return     | void\r\n\t\t  | continue | for       | switch     | while\r\n\t\t  | debugger | function  | this       | with\r\n\t\t  | default  | if        | throw\r\n\t\t  | delete   | in        | try\r\n\r\n  futureReservedWordLax = class  | enum  | extends\r\n\t\t\t\t\t\t| super  | const | export\r\n\t\t\t\t\t\t| import\r\n\r\n  futureReservedWordStrict = futureReservedWordLax\r\n\t\t\t\t\t\t   | implements | let     | private   | public\r\n\t\t\t\t\t\t   | interface  | package | protected | static\r\n\t\t\t\t\t\t   | yield\r\n\r\n  futureReservedWord = futureReservedWordStrict\r\n\r\n  /*\r\n\tNote: Punctuator and DivPunctuator (see https://es5.github.io/x7.html#x7.7) are\r\n\tnot currently used by this grammar.\r\n  */\r\n\r\n  literal = nullLiteral | booleanLiteral | numericLiteral\r\n\t\t  | stringLiteral | regularExpressionLiteral // spec forgot Regexp literals in appendix?\r\n\r\n  nullLiteral = \"null\" ~identifierPart\r\n  booleanLiteral = (\"true\" | \"false\") ~identifierPart\r\n\r\n  // For semantics on how decimal literals are constructed, see section 7.8.3\r\n\r\n  // Note that the ordering of hexIntegerLiteral and decimalLiteral is reversed w.r.t. the spec\r\n  // This is intentional: the order decimalLiteral | hexIntegerLiteral will parse\r\n  // \"0x...\" as a decimal literal \"0\" followed by \"x...\"\r\n  numericLiteral = octalIntegerLiteral | hexIntegerLiteral | decimalLiteral\r\n\r\n  decimalLiteral = decimalIntegerLiteral \".\" decimalDigit* exponentPart -- bothParts\r\n\t\t\t\t |                       \".\" decimalDigit+ exponentPart -- decimalsOnly\r\n\t\t\t\t | decimalIntegerLiteral                   exponentPart -- integerOnly\r\n\r\n  decimalIntegerLiteral = nonZeroDigit decimalDigit*  -- nonZero\r\n\t\t\t\t\t\t| \"0\"                         -- zero\r\n  decimalDigit = \"0\"..\"9\"\r\n  nonZeroDigit = \"1\"..\"9\"\r\n\r\n  exponentPart = exponentIndicator signedInteger -- present\r\n\t\t\t   |                                 -- absent\r\n  exponentIndicator = \"e\" | \"E\"\r\n  signedInteger = \"+\" decimalDigit* -- positive\r\n\t\t\t\t| \"-\" decimalDigit* -- negative\r\n\t\t\t\t|     decimalDigit+ -- noSign\r\n\r\n  hexIntegerLiteral = \"0x\" hexDigit+\r\n\t\t\t\t\t| \"0X\" hexDigit+\r\n\r\n  // hexDigit defined in Ohm's built-in rules (otherwise: hexDigit = \"0\"..\"9\" | \"a\"..\"f\" | \"A\"..\"F\")\r\n\r\n  octalIntegerLiteral = \"0\" octalDigit+\r\n\r\n  octalDigit = \"0\"..\"7\"\r\n\r\n  // For semantics on how string literals are constructed, see section 7.8.4\r\n  stringLiteral = \"\\\"\" doubleStringCharacter* \"\\\"\"\r\n\t\t\t\t| \"'\" singleStringCharacter* \"'\"\r\n  doubleStringCharacter = ~(\"\\\"\" | \"\\\\\" | lineTerminator) sourceCharacter -- nonEscaped\r\n\t\t\t\t\t\t| \"\\\\\" escapeSequence                             -- escaped\r\n\t\t\t\t\t\t| lineContinuation                                -- lineContinuation\r\n  singleStringCharacter = ~(\"'\" | \"\\\\\" | lineTerminator) sourceCharacter -- nonEscaped\r\n\t\t\t\t\t\t| \"\\\\\" escapeSequence                            -- escaped\r\n\t\t\t\t\t\t| lineContinuation                               -- lineContinuation\r\n  lineContinuation = \"\\\\\" lineTerminatorSequence\r\n  escapeSequence = unicodeEscapeSequence\r\n\t\t\t\t | hexEscapeSequence\r\n\t\t\t\t | octalEscapeSequence\r\n\t\t\t\t | characterEscapeSequence  // Must come last.\r\n  characterEscapeSequence = singleEscapeCharacter\r\n\t\t\t\t\t\t  | nonEscapeCharacter\r\n  singleEscapeCharacter = \"'\"  // -> ( String.fromCharCode(0039) ) /*\\u0027*/\r\n\t\t\t\t\t\t| \"\\\"\" // -> ( String.fromCharCode(0034) ) /*\\u0022*/\r\n\t\t\t\t\t\t| \"\\\\\" // -> ( String.fromCharCode(0092) ) /*\\u005C*/\r\n\t\t\t\t\t\t| \"b\"  // -> ( String.fromCharCode(0008) ) /*\\u0008*/\r\n\t\t\t\t\t\t| \"f\"  // -> ( String.fromCharCode(0012) ) /*\\u000C*/\r\n\t\t\t\t\t\t| \"n\"  // -> ( String.fromCharCode(0010) ) /*\\u000A*/\r\n\t\t\t\t\t\t| \"r\"  // -> ( String.fromCharCode(0013) ) /*\\u000D*/\r\n\t\t\t\t\t\t| \"t\"  // -> ( String.fromCharCode(0009) ) /*\\u0009*/\r\n\t\t\t\t\t\t| \"v\"  // -> ( String.fromCharCode(0011) ) /*\\u000B*/\r\n  nonEscapeCharacter = ~(escapeCharacter | lineTerminator) sourceCharacter\r\n  escapeCharacter = singleEscapeCharacter | decimalDigit | \"x\" | \"u\"\r\n  octalEscapeSequence = zeroToThree octalDigit octalDigit    -- whole\r\n\t\t\t\t\t  | fourToSeven octalDigit               -- eightTimesfourToSeven\r\n\t\t\t\t\t  | zeroToThree octalDigit ~decimalDigit -- eightTimesZeroToThree\r\n\t\t\t\t\t  | octalDigit ~decimalDigit             -- octal\r\n  hexEscapeSequence = \"x\" hexDigit hexDigit\r\n  unicodeEscapeSequence = \"u\" hexDigit hexDigit hexDigit hexDigit\r\n\r\n  zeroToThree = \"0\"..\"3\"\r\n  fourToSeven = \"4\"..\"7\"\r\n\r\n  // ï¿½7.8.5 Regular Expression Literals -- http://ecma-international.org/ecma-262/5.1/#sec-7.8.5\r\n\r\n  regularExpressionLiteral = \"/\" regularExpressionBody \"/\" regularExpressionFlags\r\n  regularExpressionBody = regularExpressionFirstChar regularExpressionChar*\r\n  regularExpressionFirstChar = ~(\"*\" | \"\\\\\" | \"/\" | \"[\") regularExpressionNonTerminator\r\n\t\t\t\t\t\t\t | regularExpressionBackslashSequence\r\n\t\t\t\t\t\t\t | regularExpressionClass\r\n  regularExpressionChar = ~(\"\\\\\" | \"/\" | \"[\") regularExpressionNonTerminator\r\n\t\t\t\t\t\t| regularExpressionBackslashSequence\r\n\t\t\t\t\t\t| regularExpressionClass\r\n  regularExpressionBackslashSequence = \"\\\\\" regularExpressionNonTerminator\r\n  regularExpressionNonTerminator = ~(lineTerminator) sourceCharacter\r\n  regularExpressionClass = \"[\" regularExpressionClassChar* \"]\"\r\n  regularExpressionClassChar = ~(\"]\" | \"\\\\\") regularExpressionNonTerminator\r\n\t\t\t\t\t\t\t | regularExpressionBackslashSequence\r\n  regularExpressionFlags = identifierPart*\r\n\r\n  // === Implementation-level rules (not part of the spec) ===\r\n\r\n  multiLineCommentNoNL = \"/*\" (~(\"*/\" | lineTerminator) sourceCharacter)* \"*/\"\r\n\r\n  // does not accept lineTerminators, not even implicit ones in a multiLineComment (cf. section 7.4)\r\n  spacesNoNL = (whitespace | singleLineComment | multiLineCommentNoNL)*\r\n\r\n  // A semicolon is \"automatically inserted\" if a newline is reached the end of the input stream\r\n  // is reached, or the offending token is \"}\".\r\n  // See http://ecma-international.org/ecma-262/5.1/#sec-7.9 for more information.\r\n  // NOTE: Applications of this rule *must* appear in a lexical context -- either in the body of a\r\n  // lexical rule, or inside `#()`.\r\n  sc = space* (\";\" | end)\r\n\t | spacesNoNL (lineTerminator | ~multiLineCommentNoNL multiLineComment | &\"}\")\r\n\r\n  // Convenience rules for parsing keyword tokens.\r\n  break = \"break\" ~identifierPart\r\n  do = \"do\" ~identifierPart\r\n  instanceof = \"instanceof\" ~identifierPart\r\n  typeof = \"typeof\" ~identifierPart\r\n  case = \"case\" ~identifierPart\r\n  else = \"else\" ~identifierPart\r\n  new = \"new\" ~identifierPart\r\n  var = \"var\" ~identifierPart\r\n  catch = \"catch\" ~identifierPart\r\n  finally = \"finally\" ~identifierPart\r\n  return = \"return\" ~identifierPart\r\n  void = \"void\" ~identifierPart\r\n  continue = \"continue\" ~identifierPart\r\n  for = \"for\" ~identifierPart\r\n  switch = \"switch\" ~identifierPart\r\n  while = \"while\" ~identifierPart\r\n  debugger = \"debugger\" ~identifierPart\r\n  function = \"function\" ~identifierPart\r\n  this = \"this\" ~identifierPart\r\n  with = \"with\" ~identifierPart\r\n  default = \"default\" ~identifierPart\r\n  if = \"if\" ~identifierPart\r\n  throw = \"throw\" ~identifierPart\r\n  delete = \"delete\" ~identifierPart\r\n  in = \"in\" ~identifierPart\r\n  try = \"try\" ~identifierPart\r\n  get = \"get\" ~identifierPart\r\n  set = \"set\" ~identifierPart\r\n  class = \"class\" ~identifierPart\r\n  enum = \"enum\" ~identifierPart\r\n  extends = \"extends\" ~identifierPart\r\n  super = \"super\" ~identifierPart\r\n  const = \"const\" ~identifierPart\r\n  export = \"export\" ~identifierPart\r\n  import = \"import\" ~identifierPart\r\n  implements = \"implements\" ~identifierPart\r\n  let = \"let\" ~identifierPart\r\n  private = \"private\" ~identifierPart\r\n  public = \"public\" ~identifierPart\r\n  interface = \"interface\" ~identifierPart\r\n  package = \"package\" ~identifierPart\r\n  protected = \"protected\" ~identifierPart\r\n  static = \"static\" ~identifierPart\r\n  yield = \"yield\" ~identifierPart\r\n  \r\n  // end of lexical rules\r\n\r\n}")
    .withDefaultStartRule("File")
  return decl
    .define("File", [], this.star(this.app("Statement").withInterval(decl.sourceInterval(22, 31))).withInterval(decl.sourceInterval(22, 32)))
    .define("Statement", [], this.app("Definition").withInterval(decl.sourceInterval(52, 64)))
    .define("Definition_namedValue", [], this.seq(this.app("identifier").withInterval(decl.sourceInterval(87, 97)), this.terminal("=").withInterval(decl.sourceInterval(98, 101)), this.app("Expression").withInterval(decl.sourceInterval(102, 112)), this.lex(this.app("sc").withInterval(decl.sourceInterval(114, 116))).withInterval(decl.sourceInterval(113, 116))).withInterval(decl.sourceInterval(87, 116)))
    .define("Definition_namedFunction", [], this.seq(this.app("identifier").withInterval(decl.sourceInterval(136, 146)), this.app("ParamList").withInterval(decl.sourceInterval(147, 156)), this.terminal("=").withInterval(decl.sourceInterval(157, 160)), this.app("Expression").withInterval(decl.sourceInterval(161, 171)), this.lex(this.app("sc").withInterval(decl.sourceInterval(173, 175))).withInterval(decl.sourceInterval(172, 175))).withInterval(decl.sourceInterval(136, 175)))
    .define("Definition", [], this.alt(this.app("Definition_namedValue").withInterval(decl.sourceInterval(87, 116)), this.app("Definition_namedFunction").withInterval(decl.sourceInterval(136, 175))).withInterval(decl.sourceInterval(85, 192)))
    .define("Import", [], this.seq(this.terminal("@import").withInterval(decl.sourceInterval(206, 215)), this.app("stringLiteral").withInterval(decl.sourceInterval(216, 229)), this.lex(this.app("sc").withInterval(decl.sourceInterval(231, 233))).withInterval(decl.sourceInterval(230, 233))).withInterval(decl.sourceInterval(206, 233)))
    .define("Declaration", [], this.seq(this.terminal("@declare").withInterval(decl.sourceInterval(252, 262)), this.app("listOf", [this.app("identifier").withInterval(decl.sourceInterval(270, 280)), this.terminal(",").withInterval(decl.sourceInterval(282, 285))]).withInterval(decl.sourceInterval(263, 286)), this.lex(this.app("sc").withInterval(decl.sourceInterval(288, 290))).withInterval(decl.sourceInterval(287, 290))).withInterval(decl.sourceInterval(252, 290)))
    .define("Expression", [], this.app("Relation").withInterval(decl.sourceInterval(308, 316)))
    .define("Relation_infix", [], this.seq(this.app("Relation").withInterval(decl.sourceInterval(337, 345)), this.alt(this.terminal("==").withInterval(decl.sourceInterval(347, 351)), this.terminal("!=").withInterval(decl.sourceInterval(354, 358)), this.terminal("<").withInterval(decl.sourceInterval(361, 364)), this.terminal(">").withInterval(decl.sourceInterval(367, 370)), this.terminal("<=").withInterval(decl.sourceInterval(373, 377)), this.terminal(">=").withInterval(decl.sourceInterval(380, 384))).withInterval(decl.sourceInterval(347, 384)), this.app("Additive").withInterval(decl.sourceInterval(386, 394))).withInterval(decl.sourceInterval(337, 394)))
    .define("Relation", [], this.alt(this.app("Relation_infix").withInterval(decl.sourceInterval(337, 394)), this.app("Additive").withInterval(decl.sourceInterval(409, 417))).withInterval(decl.sourceInterval(335, 417)))
    .define("Additive_infix", [], this.seq(this.app("Additive").withInterval(decl.sourceInterval(438, 446)), this.alt(this.terminal("+").withInterval(decl.sourceInterval(448, 451)), this.terminal("-").withInterval(decl.sourceInterval(454, 457))).withInterval(decl.sourceInterval(448, 457)), this.app("Multiplicative").withInterval(decl.sourceInterval(459, 473))).withInterval(decl.sourceInterval(438, 473)))
    .define("Additive", [], this.alt(this.app("Additive_infix").withInterval(decl.sourceInterval(438, 473)), this.app("Multiplicative").withInterval(decl.sourceInterval(488, 502))).withInterval(decl.sourceInterval(436, 502)))
    .define("Multiplicative_infix", [], this.seq(this.app("Multiplicative").withInterval(decl.sourceInterval(529, 543)), this.alt(this.terminal("*").withInterval(decl.sourceInterval(545, 548)), this.terminal("/").withInterval(decl.sourceInterval(551, 554)), this.terminal("%").withInterval(decl.sourceInterval(557, 560))).withInterval(decl.sourceInterval(545, 560)), this.app("Factor").withInterval(decl.sourceInterval(562, 568))).withInterval(decl.sourceInterval(529, 568)))
    .define("Multiplicative", [], this.alt(this.app("Multiplicative_infix").withInterval(decl.sourceInterval(529, 568)), this.app("Factor").withInterval(decl.sourceInterval(583, 589))).withInterval(decl.sourceInterval(527, 589)))
    .define("Factor_prefix", [], this.seq(this.terminal("-").withInterval(decl.sourceInterval(608, 611)), this.app("Primary").withInterval(decl.sourceInterval(612, 619))).withInterval(decl.sourceInterval(608, 619)))
    .define("Factor", [], this.alt(this.app("Factor_prefix").withInterval(decl.sourceInterval(608, 619)), this.app("Primary").withInterval(decl.sourceInterval(635, 642))).withInterval(decl.sourceInterval(606, 642)))
    .define("Primary_bindInstanceMethod", [], this.seq(this.app("Primary").withInterval(decl.sourceInterval(662, 669)), this.terminal(".").withInterval(decl.sourceInterval(670, 673)), this.app("identifier").withInterval(decl.sourceInterval(674, 684)), this.app("ArgumentList").withInterval(decl.sourceInterval(685, 697))).withInterval(decl.sourceInterval(662, 697)))
    .define("Primary_select", [], this.seq(this.app("Primary").withInterval(decl.sourceInterval(725, 732)), this.terminal(".").withInterval(decl.sourceInterval(733, 736)), this.app("identifier").withInterval(decl.sourceInterval(737, 747))).withInterval(decl.sourceInterval(725, 747)))
    .define("Primary_index", [], this.seq(this.app("Primary").withInterval(decl.sourceInterval(763, 770)), this.terminal("[").withInterval(decl.sourceInterval(771, 774)), this.app("Expression").withInterval(decl.sourceInterval(775, 785)), this.terminal("]").withInterval(decl.sourceInterval(786, 789))).withInterval(decl.sourceInterval(763, 789)))
    .define("Primary_bind", [], this.seq(this.app("Primary").withInterval(decl.sourceInterval(804, 811)), this.app("ArgumentList").withInterval(decl.sourceInterval(812, 824))).withInterval(decl.sourceInterval(804, 824)))
    .define("Primary_parens", [], this.seq(this.terminal("(").withInterval(decl.sourceInterval(838, 841)), this.app("Expression").withInterval(decl.sourceInterval(842, 852)), this.terminal(")").withInterval(decl.sourceInterval(853, 856))).withInterval(decl.sourceInterval(838, 856)))
    .define("Primary_object", [], this.seq(this.terminal("{").withInterval(decl.sourceInterval(872, 875)), this.star(this.app("Statement").withInterval(decl.sourceInterval(876, 885))).withInterval(decl.sourceInterval(876, 886)), this.terminal("}").withInterval(decl.sourceInterval(887, 890))).withInterval(decl.sourceInterval(872, 890)))
    .define("Primary_nameref", [], this.app("identifier").withInterval(decl.sourceInterval(906, 916)))
    .define("Primary", [], this.alt(this.app("Primary_bindInstanceMethod").withInterval(decl.sourceInterval(662, 697)), this.app("Primary_select").withInterval(decl.sourceInterval(725, 747)), this.app("Primary_index").withInterval(decl.sourceInterval(763, 789)), this.app("Primary_bind").withInterval(decl.sourceInterval(804, 824)), this.app("Primary_parens").withInterval(decl.sourceInterval(838, 856)), this.app("Primary_object").withInterval(decl.sourceInterval(872, 890)), this.app("Primary_nameref").withInterval(decl.sourceInterval(906, 916)), this.app("literal").withInterval(decl.sourceInterval(933, 940)), this.terminal("_").withInterval(decl.sourceInterval(946, 949))).withInterval(decl.sourceInterval(660, 949)))
    .define("ParamList", [], this.seq(this.terminal("(").withInterval(decl.sourceInterval(966, 969)), this.app("listOf", [this.app("identifier").withInterval(decl.sourceInterval(977, 987)), this.terminal(",").withInterval(decl.sourceInterval(989, 992))]).withInterval(decl.sourceInterval(970, 993)), this.terminal(")").withInterval(decl.sourceInterval(994, 997))).withInterval(decl.sourceInterval(966, 997)))
    .define("ArgumentList", [], this.seq(this.terminal("(").withInterval(decl.sourceInterval(1017, 1020)), this.app("listOf", [this.app("Expression").withInterval(decl.sourceInterval(1028, 1038)), this.terminal(",").withInterval(decl.sourceInterval(1040, 1043))]).withInterval(decl.sourceInterval(1021, 1044)), this.terminal(")").withInterval(decl.sourceInterval(1045, 1048))).withInterval(decl.sourceInterval(1017, 1048)))
    .define("sourceCharacter", [], this.app("any").withInterval(decl.sourceInterval(1723, 1726)))
    .override("space", [], this.alt(this.app("whitespace").withInterval(decl.sourceInterval(1792, 1802)), this.app("lineTerminator").withInterval(decl.sourceInterval(1805, 1819)), this.app("comment").withInterval(decl.sourceInterval(1822, 1829))).withInterval(decl.sourceInterval(1792, 1829)))
    .define("whitespace_verticalTab", [], this.terminal("\u000b").withInterval(decl.sourceInterval(1860, 1866)))
    .define("whitespace_formFeed", [], this.terminal("\f").withInterval(decl.sourceInterval(1892, 1898)))
    .define("whitespace_noBreakSpace", [], this.terminal("Â ").withInterval(decl.sourceInterval(1932, 1940)))
    .define("whitespace_byteOrderMark", [], this.terminal("ï»¿").withInterval(decl.sourceInterval(1965, 1973)))
    .define("whitespace", [], this.alt(this.terminal("\t").withInterval(decl.sourceInterval(1848, 1852)), this.app("whitespace_verticalTab").withInterval(decl.sourceInterval(1860, 1866)), this.app("whitespace_formFeed").withInterval(decl.sourceInterval(1892, 1898)), this.terminal(" ").withInterval(decl.sourceInterval(1921, 1924)), this.app("whitespace_noBreakSpace").withInterval(decl.sourceInterval(1932, 1940)), this.app("whitespace_byteOrderMark").withInterval(decl.sourceInterval(1965, 1973)), this.app("unicodeSpaceSeparator").withInterval(decl.sourceInterval(1999, 2020))).withInterval(decl.sourceInterval(1848, 2020)))
    .define("lineTerminator", [], this.alt(this.terminal("\n").withInterval(decl.sourceInterval(2043, 2047)), this.terminal("\r").withInterval(decl.sourceInterval(2050, 2054)), this.terminal("\u2028").withInterval(decl.sourceInterval(2057, 2065)), this.terminal("\u2029").withInterval(decl.sourceInterval(2068, 2076))).withInterval(decl.sourceInterval(2043, 2076)))
    .define("lineTerminatorSequence", [], this.alt(this.terminal("\n").withInterval(decl.sourceInterval(2105, 2109)), this.seq(this.terminal("\r").withInterval(decl.sourceInterval(2112, 2116)), this.not(this.terminal("\n").withInterval(decl.sourceInterval(2118, 2122))).withInterval(decl.sourceInterval(2117, 2122))).withInterval(decl.sourceInterval(2112, 2122)), this.terminal("\u2028").withInterval(decl.sourceInterval(2125, 2133)), this.terminal("\u2029").withInterval(decl.sourceInterval(2136, 2144)), this.terminal("\r\n").withInterval(decl.sourceInterval(2147, 2153))).withInterval(decl.sourceInterval(2105, 2153)))
    .define("comment", [], this.alt(this.app("multiLineComment").withInterval(decl.sourceInterval(2169, 2185)), this.app("singleLineComment").withInterval(decl.sourceInterval(2188, 2205))).withInterval(decl.sourceInterval(2169, 2205)))
    .define("multiLineComment", [], this.seq(this.terminal("/*").withInterval(decl.sourceInterval(2230, 2234)), this.star(this.seq(this.not(this.terminal("*/").withInterval(decl.sourceInterval(2237, 2241))).withInterval(decl.sourceInterval(2236, 2241)), this.app("sourceCharacter").withInterval(decl.sourceInterval(2242, 2257))).withInterval(decl.sourceInterval(2236, 2257))).withInterval(decl.sourceInterval(2235, 2259)), this.terminal("*/").withInterval(decl.sourceInterval(2260, 2264))).withInterval(decl.sourceInterval(2230, 2264)))
    .define("singleLineComment", [], this.seq(this.terminal("//").withInterval(decl.sourceInterval(2288, 2292)), this.star(this.seq(this.not(this.app("lineTerminator").withInterval(decl.sourceInterval(2295, 2309))).withInterval(decl.sourceInterval(2294, 2309)), this.app("sourceCharacter").withInterval(decl.sourceInterval(2310, 2325))).withInterval(decl.sourceInterval(2294, 2325))).withInterval(decl.sourceInterval(2293, 2327))).withInterval(decl.sourceInterval(2288, 2327)))
    .define("identifier", [], this.seq(this.not(this.app("reservedWord").withInterval(decl.sourceInterval(2364, 2376))).withInterval(decl.sourceInterval(2363, 2376)), this.app("identifierName").withInterval(decl.sourceInterval(2377, 2391))).withInterval(decl.sourceInterval(2363, 2391)), "an indentifier")
    .define("identifierName", [], this.seq(this.app("identifierStart").withInterval(decl.sourceInterval(2412, 2427)), this.star(this.app("identifierPart").withInterval(decl.sourceInterval(2428, 2442))).withInterval(decl.sourceInterval(2428, 2443))).withInterval(decl.sourceInterval(2412, 2443)))
    .define("identifierStart_escaped", [], this.seq(this.terminal("\\").withInterval(decl.sourceInterval(2495, 2499)), this.app("unicodeEscapeSequence").withInterval(decl.sourceInterval(2500, 2521))).withInterval(decl.sourceInterval(2495, 2521)))
    .define("identifierStart", [], this.alt(this.app("letter").withInterval(decl.sourceInterval(2467, 2473)), this.terminal("$").withInterval(decl.sourceInterval(2476, 2479)), this.terminal("_").withInterval(decl.sourceInterval(2482, 2485)), this.app("identifierStart_escaped").withInterval(decl.sourceInterval(2495, 2521))).withInterval(decl.sourceInterval(2467, 2532)))
    .define("identifierPart", [], this.alt(this.app("identifierStart").withInterval(decl.sourceInterval(2553, 2568)), this.app("unicodeCombiningMark").withInterval(decl.sourceInterval(2571, 2591)), this.app("unicodeDigit").withInterval(decl.sourceInterval(2600, 2612)), this.app("unicodeConnectorPunctuation").withInterval(decl.sourceInterval(2615, 2642)), this.terminal("â").withInterval(decl.sourceInterval(2651, 2659)), this.terminal("â").withInterval(decl.sourceInterval(2662, 2670))).withInterval(decl.sourceInterval(2553, 2670)))
    .extend("letter", [], this.app("unicodeCategoryNl").withInterval(decl.sourceInterval(2683, 2700)))
    .define("unicodeCategoryNl", [], this.alt(this.range("â ", "â").withInterval(decl.sourceInterval(2726, 2744)), this.terminal("ã").withInterval(decl.sourceInterval(2747, 2755)), this.range("ã¡", "ã©").withInterval(decl.sourceInterval(2758, 2776))).withInterval(decl.sourceInterval(2726, 2776)))
    .define("unicodeDigit", [], this.alt(this.range("0", "9").withInterval(decl.sourceInterval(2807, 2825)), this.range("Ù ", "Ù©").withInterval(decl.sourceInterval(2828, 2846)), this.range("Û°", "Û¹").withInterval(decl.sourceInterval(2849, 2867)), this.range("à¥¦", "à¥¯").withInterval(decl.sourceInterval(2870, 2888)), this.range("à§¦", "à§¯").withInterval(decl.sourceInterval(2891, 2909)), this.range("à©¦", "à©¯").withInterval(decl.sourceInterval(2912, 2930)), this.range("à«¦", "à«¯").withInterval(decl.sourceInterval(2933, 2951)), this.range("à­¦", "à­¯").withInterval(decl.sourceInterval(2954, 2972)), this.range("à¯§", "à¯¯").withInterval(decl.sourceInterval(2975, 2993)), this.range("à±¦", "à±¯").withInterval(decl.sourceInterval(2996, 3014)), this.range("à³¦", "à³¯").withInterval(decl.sourceInterval(3017, 3035)), this.range("àµ¦", "àµ¯").withInterval(decl.sourceInterval(3038, 3056)), this.range("à¹", "à¹").withInterval(decl.sourceInterval(3059, 3077)), this.range("à»", "à»").withInterval(decl.sourceInterval(3080, 3098)), this.range("à¼ ", "à¼©").withInterval(decl.sourceInterval(3101, 3119)), this.range("ï¼", "ï¼").withInterval(decl.sourceInterval(3122, 3140))).withInterval(decl.sourceInterval(2807, 3140)), "a digit")
    .define("unicodeCombiningMark", [], this.alt(this.range("Ì", "Í").withInterval(decl.sourceInterval(3198, 3216)), this.range("Í ", "Í¡").withInterval(decl.sourceInterval(3219, 3237)), this.range("Ò", "Ò").withInterval(decl.sourceInterval(3240, 3258)), this.range("Ö", "Ö¡").withInterval(decl.sourceInterval(3261, 3279)), this.range("Ö£", "Ö¹").withInterval(decl.sourceInterval(3282, 3300)), this.range("Ö»", "Ö½").withInterval(decl.sourceInterval(3303, 3321)), this.range("Ö¿", "Ö¿").withInterval(decl.sourceInterval(3324, 3342)), this.range("×", "×").withInterval(decl.sourceInterval(3345, 3363)), this.range("×", "×").withInterval(decl.sourceInterval(3366, 3384)), this.range("Ù", "Ù").withInterval(decl.sourceInterval(3387, 3405)), this.range("Ù°", "Ù°").withInterval(decl.sourceInterval(3408, 3426)), this.range("Û", "Û").withInterval(decl.sourceInterval(3429, 3447)), this.range("Û", "Û¤").withInterval(decl.sourceInterval(3450, 3468)), this.range("Û§", "Û¨").withInterval(decl.sourceInterval(3471, 3489)), this.range("Ûª", "Û­").withInterval(decl.sourceInterval(3492, 3510)), this.range("à¤", "à¤").withInterval(decl.sourceInterval(3513, 3531)), this.range("à¤¼", "à¤¼").withInterval(decl.sourceInterval(3534, 3552)), this.range("à¥", "à¥").withInterval(decl.sourceInterval(3555, 3573)), this.range("à¥", "à¥").withInterval(decl.sourceInterval(3576, 3594)), this.range("à¥", "à¥").withInterval(decl.sourceInterval(3597, 3615)), this.range("à¥¢", "à¥£").withInterval(decl.sourceInterval(3618, 3636)), this.range("à¦", "à¦").withInterval(decl.sourceInterval(3639, 3657)), this.range("à¦¼", "à¦¼").withInterval(decl.sourceInterval(3660, 3678)), this.range("à§", "à§").withInterval(decl.sourceInterval(3681, 3699)), this.range("à§", "à§").withInterval(decl.sourceInterval(3702, 3720)), this.range("à§¢", "à§£").withInterval(decl.sourceInterval(3723, 3741)), this.range("à¨", "à¨").withInterval(decl.sourceInterval(3744, 3762)), this.range("à¨¼", "à¨¼").withInterval(decl.sourceInterval(3765, 3783)), this.range("à©", "à©").withInterval(decl.sourceInterval(3786, 3804)), this.range("à©", "à©").withInterval(decl.sourceInterval(3807, 3825)), this.range("à©", "à©").withInterval(decl.sourceInterval(3828, 3846)), this.range("à©°", "à©±").withInterval(decl.sourceInterval(3849, 3867)), this.range("àª", "àª").withInterval(decl.sourceInterval(3870, 3888)), this.range("àª¼", "àª¼").withInterval(decl.sourceInterval(3891, 3909)), this.range("à«", "à«").withInterval(decl.sourceInterval(3912, 3930)), this.range("à«", "à«").withInterval(decl.sourceInterval(3933, 3951)), this.range("à«", "à«").withInterval(decl.sourceInterval(3954, 3972)), this.range("à¬", "à¬").withInterval(decl.sourceInterval(3975, 3993)), this.range("à¬¼", "à¬¼").withInterval(decl.sourceInterval(3996, 4014)), this.range("à¬¿", "à¬¿").withInterval(decl.sourceInterval(4017, 4035)), this.range("à­", "à­").withInterval(decl.sourceInterval(4038, 4056)), this.range("à­", "à­").withInterval(decl.sourceInterval(4059, 4077)), this.range("à­", "à­").withInterval(decl.sourceInterval(4080, 4098)), this.range("à®", "à®").withInterval(decl.sourceInterval(4101, 4119)), this.range("à¯", "à¯").withInterval(decl.sourceInterval(4122, 4140)), this.range("à¯", "à¯").withInterval(decl.sourceInterval(4143, 4161)), this.range("à°¾", "à±").withInterval(decl.sourceInterval(4164, 4182)), this.range("à±", "à±").withInterval(decl.sourceInterval(4185, 4203)), this.range("à±", "à±").withInterval(decl.sourceInterval(4206, 4224)), this.range("à±", "à±").withInterval(decl.sourceInterval(4227, 4245)), this.range("à²¿", "à²¿").withInterval(decl.sourceInterval(4248, 4266)), this.range("à³", "à³").withInterval(decl.sourceInterval(4269, 4287)), this.range("à³", "à³").withInterval(decl.sourceInterval(4290, 4308)), this.range("àµ", "àµ").withInterval(decl.sourceInterval(4311, 4329)), this.range("àµ", "àµ").withInterval(decl.sourceInterval(4332, 4350)), this.range("à¸±", "à¸±").withInterval(decl.sourceInterval(4353, 4371)), this.range("à¸´", "à¸º").withInterval(decl.sourceInterval(4374, 4392)), this.range("à¹", "à¹").withInterval(decl.sourceInterval(4395, 4413)), this.range("àº±", "àº±").withInterval(decl.sourceInterval(4416, 4434)), this.range("àº´", "àº¹").withInterval(decl.sourceInterval(4437, 4455)), this.range("àº»", "àº¼").withInterval(decl.sourceInterval(4458, 4476)), this.range("à»", "à»").withInterval(decl.sourceInterval(4479, 4497)), this.range("à¼", "à¼").withInterval(decl.sourceInterval(4500, 4518)), this.range("à¼µ", "à¼µ").withInterval(decl.sourceInterval(4521, 4539)), this.range("à¼·", "à¼·").withInterval(decl.sourceInterval(4542, 4560)), this.range("à¼¹", "à¼¹").withInterval(decl.sourceInterval(4563, 4581)), this.range("à½±", "à½¾").withInterval(decl.sourceInterval(4584, 4602)), this.range("à¾", "à¾").withInterval(decl.sourceInterval(4605, 4623)), this.range("à¾", "à¾").withInterval(decl.sourceInterval(4626, 4644)), this.range("à¾", "à¾").withInterval(decl.sourceInterval(4647, 4665)), this.range("à¾", "à¾").withInterval(decl.sourceInterval(4668, 4686)), this.range("à¾", "à¾­").withInterval(decl.sourceInterval(4689, 4707)), this.range("à¾±", "à¾·").withInterval(decl.sourceInterval(4710, 4728)), this.range("à¾¹", "à¾¹").withInterval(decl.sourceInterval(4731, 4749)), this.range("â", "â").withInterval(decl.sourceInterval(4752, 4770)), this.range("â¡", "â¡").withInterval(decl.sourceInterval(4773, 4791)), this.range("ãª", "ã¯").withInterval(decl.sourceInterval(4794, 4812)), this.range("ã", "ã").withInterval(decl.sourceInterval(4815, 4833)), this.range("ï¬", "ï¬").withInterval(decl.sourceInterval(4836, 4854)), this.range("ï¸ ", "ï¸£").withInterval(decl.sourceInterval(4857, 4875))).withInterval(decl.sourceInterval(3198, 4875)), "a Unicode combining mark")
    .define("unicodeConnectorPunctuation", [], this.alt(this.terminal("_").withInterval(decl.sourceInterval(4911, 4919)), this.range("â¿", "â").withInterval(decl.sourceInterval(4922, 4940)), this.terminal("ã»").withInterval(decl.sourceInterval(4943, 4951)), this.range("ï¸³", "ï¸´").withInterval(decl.sourceInterval(4954, 4972)), this.range("ï¹", "ï¹").withInterval(decl.sourceInterval(4975, 4993)), this.terminal("ï¼¿").withInterval(decl.sourceInterval(4996, 5004)), this.terminal("ï½¥").withInterval(decl.sourceInterval(5007, 5015))).withInterval(decl.sourceInterval(4911, 5015)))
    .define("unicodeSpaceSeparator", [], this.alt(this.range("â", "â").withInterval(decl.sourceInterval(5043, 5061)), this.terminal("ã").withInterval(decl.sourceInterval(5064, 5072))).withInterval(decl.sourceInterval(5043, 5072)))
    .define("reservedWord", [], this.alt(this.app("keyword").withInterval(decl.sourceInterval(5093, 5100)), this.app("futureReservedWord").withInterval(decl.sourceInterval(5103, 5121)), this.app("nullLiteral").withInterval(decl.sourceInterval(5124, 5135)), this.app("booleanLiteral").withInterval(decl.sourceInterval(5138, 5152))).withInterval(decl.sourceInterval(5093, 5152)))
    .define("keyword", [], this.alt(this.app("break").withInterval(decl.sourceInterval(5309, 5314)), this.app("do").withInterval(decl.sourceInterval(5320, 5322)), this.app("instanceof").withInterval(decl.sourceInterval(5332, 5342)), this.app("typeof").withInterval(decl.sourceInterval(5345, 5351)), this.app("case").withInterval(decl.sourceInterval(5359, 5363)), this.app("else").withInterval(decl.sourceInterval(5370, 5374)), this.app("new").withInterval(decl.sourceInterval(5382, 5385)), this.app("var").withInterval(decl.sourceInterval(5395, 5398)), this.app("catch").withInterval(decl.sourceInterval(5406, 5411)), this.app("finally").withInterval(decl.sourceInterval(5417, 5424)), this.app("return").withInterval(decl.sourceInterval(5429, 5435)), this.app("void").withInterval(decl.sourceInterval(5442, 5446)), this.app("continue").withInterval(decl.sourceInterval(5454, 5462)), this.app("for").withInterval(decl.sourceInterval(5465, 5468)), this.app("switch").withInterval(decl.sourceInterval(5477, 5483)), this.app("while").withInterval(decl.sourceInterval(5490, 5495)), this.app("debugger").withInterval(decl.sourceInterval(5503, 5511)), this.app("function").withInterval(decl.sourceInterval(5514, 5522)), this.app("this").withInterval(decl.sourceInterval(5526, 5530)), this.app("with").withInterval(decl.sourceInterval(5539, 5543)), this.app("default").withInterval(decl.sourceInterval(5551, 5558)), this.app("if").withInterval(decl.sourceInterval(5562, 5564)), this.app("throw").withInterval(decl.sourceInterval(5574, 5579)), this.app("delete").withInterval(decl.sourceInterval(5587, 5593)), this.app("in").withInterval(decl.sourceInterval(5598, 5600)), this.app("try").withInterval(decl.sourceInterval(5610, 5613))).withInterval(decl.sourceInterval(5309, 5613)))
    .define("futureReservedWordLax", [], this.alt(this.app("class").withInterval(decl.sourceInterval(5643, 5648)), this.app("enum").withInterval(decl.sourceInterval(5652, 5656)), this.app("extends").withInterval(decl.sourceInterval(5660, 5667)), this.app("super").withInterval(decl.sourceInterval(5677, 5682)), this.app("const").withInterval(decl.sourceInterval(5686, 5691)), this.app("export").withInterval(decl.sourceInterval(5694, 5700)), this.app("import").withInterval(decl.sourceInterval(5710, 5716))).withInterval(decl.sourceInterval(5643, 5716)))
    .define("futureReservedWordStrict", [], this.alt(this.app("futureReservedWordLax").withInterval(decl.sourceInterval(5749, 5770)), this.app("implements").withInterval(decl.sourceInterval(5783, 5793)), this.app("let").withInterval(decl.sourceInterval(5796, 5799)), this.app("private").withInterval(decl.sourceInterval(5806, 5813)), this.app("public").withInterval(decl.sourceInterval(5818, 5824)), this.app("interface").withInterval(decl.sourceInterval(5837, 5846)), this.app("package").withInterval(decl.sourceInterval(5850, 5857)), this.app("protected").withInterval(decl.sourceInterval(5860, 5869)), this.app("static").withInterval(decl.sourceInterval(5872, 5878)), this.app("yield").withInterval(decl.sourceInterval(5891, 5896))).withInterval(decl.sourceInterval(5749, 5896)))
    .define("futureReservedWord", [], this.app("futureReservedWordStrict").withInterval(decl.sourceInterval(5923, 5947)))
    .define("literal", [], this.alt(this.app("nullLiteral").withInterval(decl.sourceInterval(6097, 6108)), this.app("booleanLiteral").withInterval(decl.sourceInterval(6111, 6125)), this.app("numericLiteral").withInterval(decl.sourceInterval(6128, 6142)), this.app("stringLiteral").withInterval(decl.sourceInterval(6150, 6163)), this.app("regularExpressionLiteral").withInterval(decl.sourceInterval(6166, 6190))).withInterval(decl.sourceInterval(6097, 6190)))
    .define("nullLiteral", [], this.seq(this.terminal("null").withInterval(decl.sourceInterval(6254, 6260)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(6262, 6276))).withInterval(decl.sourceInterval(6261, 6276))).withInterval(decl.sourceInterval(6254, 6276)))
    .define("booleanLiteral", [], this.seq(this.alt(this.terminal("true").withInterval(decl.sourceInterval(6298, 6304)), this.terminal("false").withInterval(decl.sourceInterval(6307, 6314))).withInterval(decl.sourceInterval(6298, 6314)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(6317, 6331))).withInterval(decl.sourceInterval(6316, 6331))).withInterval(decl.sourceInterval(6297, 6331)))
    .define("numericLiteral", [], this.alt(this.app("octalIntegerLiteral").withInterval(decl.sourceInterval(6673, 6692)), this.app("hexIntegerLiteral").withInterval(decl.sourceInterval(6695, 6712)), this.app("decimalLiteral").withInterval(decl.sourceInterval(6715, 6729))).withInterval(decl.sourceInterval(6673, 6729)))
    .define("decimalLiteral_bothParts", [], this.seq(this.app("decimalIntegerLiteral").withInterval(decl.sourceInterval(6752, 6773)), this.terminal(".").withInterval(decl.sourceInterval(6774, 6777)), this.star(this.app("decimalDigit").withInterval(decl.sourceInterval(6778, 6790))).withInterval(decl.sourceInterval(6778, 6791)), this.app("exponentPart").withInterval(decl.sourceInterval(6792, 6804))).withInterval(decl.sourceInterval(6752, 6804)))
    .define("decimalLiteral_decimalsOnly", [], this.seq(this.terminal(".").withInterval(decl.sourceInterval(6848, 6851)), this.plus(this.app("decimalDigit").withInterval(decl.sourceInterval(6852, 6864))).withInterval(decl.sourceInterval(6852, 6865)), this.app("exponentPart").withInterval(decl.sourceInterval(6866, 6878))).withInterval(decl.sourceInterval(6848, 6878)))
    .define("decimalLiteral_integerOnly", [], this.seq(this.app("decimalIntegerLiteral").withInterval(decl.sourceInterval(6903, 6924)), this.app("exponentPart").withInterval(decl.sourceInterval(6943, 6955))).withInterval(decl.sourceInterval(6903, 6955)))
    .define("decimalLiteral", [], this.alt(this.app("decimalLiteral_bothParts").withInterval(decl.sourceInterval(6752, 6804)), this.app("decimalLiteral_decimalsOnly").withInterval(decl.sourceInterval(6848, 6878)), this.app("decimalLiteral_integerOnly").withInterval(decl.sourceInterval(6903, 6955))).withInterval(decl.sourceInterval(6752, 6970)))
    .define("decimalIntegerLiteral_nonZero", [], this.seq(this.app("nonZeroDigit").withInterval(decl.sourceInterval(7000, 7012)), this.star(this.app("decimalDigit").withInterval(decl.sourceInterval(7013, 7025))).withInterval(decl.sourceInterval(7013, 7026))).withInterval(decl.sourceInterval(7000, 7026)))
    .define("decimalIntegerLiteral_zero", [], this.terminal("0").withInterval(decl.sourceInterval(7048, 7051)))
    .define("decimalIntegerLiteral", [], this.alt(this.app("decimalIntegerLiteral_nonZero").withInterval(decl.sourceInterval(7000, 7026)), this.app("decimalIntegerLiteral_zero").withInterval(decl.sourceInterval(7048, 7051))).withInterval(decl.sourceInterval(7000, 7083)))
    .define("decimalDigit", [], this.range("0", "9").withInterval(decl.sourceInterval(7102, 7110)))
    .define("nonZeroDigit", [], this.range("1", "9").withInterval(decl.sourceInterval(7129, 7137)))
    .define("exponentPart_present", [], this.seq(this.app("exponentIndicator").withInterval(decl.sourceInterval(7158, 7175)), this.app("signedInteger").withInterval(decl.sourceInterval(7176, 7189))).withInterval(decl.sourceInterval(7158, 7189)))
    .define("exponentPart_absent", [], this.seq().withInterval(decl.sourceInterval(7242, 7242)))
    .define("exponentPart", [], this.alt(this.app("exponentPart_present").withInterval(decl.sourceInterval(7158, 7189)), this.app("exponentPart_absent").withInterval(decl.sourceInterval(7242, 7242))).withInterval(decl.sourceInterval(7158, 7251)))
    .define("exponentIndicator", [], this.alt(this.terminal("e").withInterval(decl.sourceInterval(7275, 7278)), this.terminal("E").withInterval(decl.sourceInterval(7281, 7284))).withInterval(decl.sourceInterval(7275, 7284)))
    .define("signedInteger_positive", [], this.seq(this.terminal("+").withInterval(decl.sourceInterval(7304, 7307)), this.star(this.app("decimalDigit").withInterval(decl.sourceInterval(7308, 7320))).withInterval(decl.sourceInterval(7308, 7321))).withInterval(decl.sourceInterval(7304, 7321)))
    .define("signedInteger_negative", [], this.seq(this.terminal("-").withInterval(decl.sourceInterval(7341, 7344)), this.star(this.app("decimalDigit").withInterval(decl.sourceInterval(7345, 7357))).withInterval(decl.sourceInterval(7345, 7358))).withInterval(decl.sourceInterval(7341, 7358)))
    .define("signedInteger_noSign", [], this.plus(this.app("decimalDigit").withInterval(decl.sourceInterval(7382, 7394))).withInterval(decl.sourceInterval(7382, 7395)))
    .define("signedInteger", [], this.alt(this.app("signedInteger_positive").withInterval(decl.sourceInterval(7304, 7321)), this.app("signedInteger_negative").withInterval(decl.sourceInterval(7341, 7358)), this.app("signedInteger_noSign").withInterval(decl.sourceInterval(7382, 7395))).withInterval(decl.sourceInterval(7304, 7405)))
    .define("hexIntegerLiteral", [], this.alt(this.seq(this.terminal("0x").withInterval(decl.sourceInterval(7431, 7435)), this.plus(this.app("hexDigit").withInterval(decl.sourceInterval(7436, 7444))).withInterval(decl.sourceInterval(7436, 7445))).withInterval(decl.sourceInterval(7431, 7445)), this.seq(this.terminal("0X").withInterval(decl.sourceInterval(7454, 7458)), this.plus(this.app("hexDigit").withInterval(decl.sourceInterval(7459, 7467))).withInterval(decl.sourceInterval(7459, 7468))).withInterval(decl.sourceInterval(7454, 7468))).withInterval(decl.sourceInterval(7431, 7468)))
    .define("octalIntegerLiteral", [], this.seq(this.terminal("0").withInterval(decl.sourceInterval(7600, 7603)), this.plus(this.app("octalDigit").withInterval(decl.sourceInterval(7604, 7614))).withInterval(decl.sourceInterval(7604, 7615))).withInterval(decl.sourceInterval(7600, 7615)))
    .define("octalDigit", [], this.range("0", "7").withInterval(decl.sourceInterval(7634, 7642)))
    .define("stringLiteral", [], this.alt(this.seq(this.terminal("\"").withInterval(decl.sourceInterval(7742, 7746)), this.star(this.app("doubleStringCharacter").withInterval(decl.sourceInterval(7747, 7768))).withInterval(decl.sourceInterval(7747, 7769)), this.terminal("\"").withInterval(decl.sourceInterval(7770, 7774))).withInterval(decl.sourceInterval(7742, 7774)), this.seq(this.terminal("'").withInterval(decl.sourceInterval(7782, 7785)), this.star(this.app("singleStringCharacter").withInterval(decl.sourceInterval(7786, 7807))).withInterval(decl.sourceInterval(7786, 7808)), this.terminal("'").withInterval(decl.sourceInterval(7809, 7812))).withInterval(decl.sourceInterval(7782, 7812))).withInterval(decl.sourceInterval(7742, 7812)))
    .define("doubleStringCharacter_nonEscaped", [], this.seq(this.not(this.alt(this.terminal("\"").withInterval(decl.sourceInterval(7842, 7846)), this.terminal("\\").withInterval(decl.sourceInterval(7849, 7853)), this.app("lineTerminator").withInterval(decl.sourceInterval(7856, 7870))).withInterval(decl.sourceInterval(7842, 7870))).withInterval(decl.sourceInterval(7840, 7871)), this.app("sourceCharacter").withInterval(decl.sourceInterval(7872, 7887))).withInterval(decl.sourceInterval(7840, 7887)))
    .define("doubleStringCharacter_escaped", [], this.seq(this.terminal("\\").withInterval(decl.sourceInterval(7911, 7915)), this.app("escapeSequence").withInterval(decl.sourceInterval(7916, 7930))).withInterval(decl.sourceInterval(7911, 7930)))
    .define("doubleStringCharacter_lineContinuation", [], this.app("lineContinuation").withInterval(decl.sourceInterval(7979, 7995)))
    .define("doubleStringCharacter", [], this.alt(this.app("doubleStringCharacter_nonEscaped").withInterval(decl.sourceInterval(7840, 7887)), this.app("doubleStringCharacter_escaped").withInterval(decl.sourceInterval(7911, 7930)), this.app("doubleStringCharacter_lineContinuation").withInterval(decl.sourceInterval(7979, 7995))).withInterval(decl.sourceInterval(7840, 8046)))
    .define("singleStringCharacter_nonEscaped", [], this.seq(this.not(this.alt(this.terminal("'").withInterval(decl.sourceInterval(8076, 8079)), this.terminal("\\").withInterval(decl.sourceInterval(8082, 8086)), this.app("lineTerminator").withInterval(decl.sourceInterval(8089, 8103))).withInterval(decl.sourceInterval(8076, 8103))).withInterval(decl.sourceInterval(8074, 8104)), this.app("sourceCharacter").withInterval(decl.sourceInterval(8105, 8120))).withInterval(decl.sourceInterval(8074, 8120)))
    .define("singleStringCharacter_escaped", [], this.seq(this.terminal("\\").withInterval(decl.sourceInterval(8144, 8148)), this.app("escapeSequence").withInterval(decl.sourceInterval(8149, 8163))).withInterval(decl.sourceInterval(8144, 8163)))
    .define("singleStringCharacter_lineContinuation", [], this.app("lineContinuation").withInterval(decl.sourceInterval(8211, 8227)))
    .define("singleStringCharacter", [], this.alt(this.app("singleStringCharacter_nonEscaped").withInterval(decl.sourceInterval(8074, 8120)), this.app("singleStringCharacter_escaped").withInterval(decl.sourceInterval(8144, 8163)), this.app("singleStringCharacter_lineContinuation").withInterval(decl.sourceInterval(8211, 8227))).withInterval(decl.sourceInterval(8074, 8277)))
    .define("lineContinuation", [], this.seq(this.terminal("\\").withInterval(decl.sourceInterval(8300, 8304)), this.app("lineTerminatorSequence").withInterval(decl.sourceInterval(8305, 8327))).withInterval(decl.sourceInterval(8300, 8327)))
    .define("escapeSequence", [], this.alt(this.app("unicodeEscapeSequence").withInterval(decl.sourceInterval(8348, 8369)), this.app("hexEscapeSequence").withInterval(decl.sourceInterval(8378, 8395)), this.app("octalEscapeSequence").withInterval(decl.sourceInterval(8404, 8423)), this.app("characterEscapeSequence").withInterval(decl.sourceInterval(8432, 8455))).withInterval(decl.sourceInterval(8348, 8455)))
    .define("characterEscapeSequence", [], this.alt(this.app("singleEscapeCharacter").withInterval(decl.sourceInterval(8505, 8526)), this.app("nonEscapeCharacter").withInterval(decl.sourceInterval(8538, 8556))).withInterval(decl.sourceInterval(8505, 8556)))
    .define("singleEscapeCharacter", [], this.alt(this.terminal("'").withInterval(decl.sourceInterval(8584, 8587)), this.terminal("\"").withInterval(decl.sourceInterval(8645, 8649)), this.terminal("\\").withInterval(decl.sourceInterval(8706, 8710)), this.terminal("b").withInterval(decl.sourceInterval(8767, 8770)), this.terminal("f").withInterval(decl.sourceInterval(8828, 8831)), this.terminal("n").withInterval(decl.sourceInterval(8889, 8892)), this.terminal("r").withInterval(decl.sourceInterval(8950, 8953)), this.terminal("t").withInterval(decl.sourceInterval(9011, 9014)), this.terminal("v").withInterval(decl.sourceInterval(9072, 9075))).withInterval(decl.sourceInterval(8584, 9075)))
    .define("nonEscapeCharacter", [], this.seq(this.not(this.alt(this.app("escapeCharacter").withInterval(decl.sourceInterval(9150, 9165)), this.app("lineTerminator").withInterval(decl.sourceInterval(9168, 9182))).withInterval(decl.sourceInterval(9150, 9182))).withInterval(decl.sourceInterval(9148, 9183)), this.app("sourceCharacter").withInterval(decl.sourceInterval(9184, 9199))).withInterval(decl.sourceInterval(9148, 9199)))
    .define("escapeCharacter", [], this.alt(this.app("singleEscapeCharacter").withInterval(decl.sourceInterval(9221, 9242)), this.app("decimalDigit").withInterval(decl.sourceInterval(9245, 9257)), this.terminal("x").withInterval(decl.sourceInterval(9260, 9263)), this.terminal("u").withInterval(decl.sourceInterval(9266, 9269))).withInterval(decl.sourceInterval(9221, 9269)))
    .define("octalEscapeSequence_whole", [], this.seq(this.app("zeroToThree").withInterval(decl.sourceInterval(9295, 9306)), this.app("octalDigit").withInterval(decl.sourceInterval(9307, 9317)), this.app("octalDigit").withInterval(decl.sourceInterval(9318, 9328))).withInterval(decl.sourceInterval(9295, 9328)))
    .define("octalEscapeSequence_eightTimesfourToSeven", [], this.seq(this.app("fourToSeven").withInterval(decl.sourceInterval(9351, 9362)), this.app("octalDigit").withInterval(decl.sourceInterval(9363, 9373))).withInterval(decl.sourceInterval(9351, 9373)))
    .define("octalEscapeSequence_eightTimesZeroToThree", [], this.seq(this.app("zeroToThree").withInterval(decl.sourceInterval(9423, 9434)), this.app("octalDigit").withInterval(decl.sourceInterval(9435, 9445)), this.not(this.app("decimalDigit").withInterval(decl.sourceInterval(9447, 9459))).withInterval(decl.sourceInterval(9446, 9459))).withInterval(decl.sourceInterval(9423, 9459)))
    .define("octalEscapeSequence_octal", [], this.seq(this.app("octalDigit").withInterval(decl.sourceInterval(9495, 9505)), this.not(this.app("decimalDigit").withInterval(decl.sourceInterval(9507, 9519))).withInterval(decl.sourceInterval(9506, 9519))).withInterval(decl.sourceInterval(9495, 9519)))
    .define("octalEscapeSequence", [], this.alt(this.app("octalEscapeSequence_whole").withInterval(decl.sourceInterval(9295, 9328)), this.app("octalEscapeSequence_eightTimesfourToSeven").withInterval(decl.sourceInterval(9351, 9373)), this.app("octalEscapeSequence_eightTimesZeroToThree").withInterval(decl.sourceInterval(9423, 9459)), this.app("octalEscapeSequence_octal").withInterval(decl.sourceInterval(9495, 9519))).withInterval(decl.sourceInterval(9295, 9540)))
    .define("hexEscapeSequence", [], this.seq(this.terminal("x").withInterval(decl.sourceInterval(9564, 9567)), this.app("hexDigit").withInterval(decl.sourceInterval(9568, 9576)), this.app("hexDigit").withInterval(decl.sourceInterval(9577, 9585))).withInterval(decl.sourceInterval(9564, 9585)))
    .define("unicodeEscapeSequence", [], this.seq(this.terminal("u").withInterval(decl.sourceInterval(9613, 9616)), this.app("hexDigit").withInterval(decl.sourceInterval(9617, 9625)), this.app("hexDigit").withInterval(decl.sourceInterval(9626, 9634)), this.app("hexDigit").withInterval(decl.sourceInterval(9635, 9643)), this.app("hexDigit").withInterval(decl.sourceInterval(9644, 9652))).withInterval(decl.sourceInterval(9613, 9652)))
    .define("zeroToThree", [], this.range("0", "3").withInterval(decl.sourceInterval(9672, 9680)))
    .define("fourToSeven", [], this.range("4", "7").withInterval(decl.sourceInterval(9698, 9706)))
    .define("regularExpressionLiteral", [], this.seq(this.terminal("/").withInterval(decl.sourceInterval(9839, 9842)), this.app("regularExpressionBody").withInterval(decl.sourceInterval(9843, 9864)), this.terminal("/").withInterval(decl.sourceInterval(9865, 9868)), this.app("regularExpressionFlags").withInterval(decl.sourceInterval(9869, 9891))).withInterval(decl.sourceInterval(9839, 9891)))
    .define("regularExpressionBody", [], this.seq(this.app("regularExpressionFirstChar").withInterval(decl.sourceInterval(9919, 9945)), this.star(this.app("regularExpressionChar").withInterval(decl.sourceInterval(9946, 9967))).withInterval(decl.sourceInterval(9946, 9968))).withInterval(decl.sourceInterval(9919, 9968)))
    .define("regularExpressionFirstChar", [], this.alt(this.seq(this.not(this.alt(this.terminal("*").withInterval(decl.sourceInterval(10003, 10006)), this.terminal("\\").withInterval(decl.sourceInterval(10009, 10013)), this.terminal("/").withInterval(decl.sourceInterval(10016, 10019)), this.terminal("[").withInterval(decl.sourceInterval(10022, 10025))).withInterval(decl.sourceInterval(10003, 10025))).withInterval(decl.sourceInterval(10001, 10026)), this.app("regularExpressionNonTerminator").withInterval(decl.sourceInterval(10027, 10057))).withInterval(decl.sourceInterval(10001, 10057)), this.app("regularExpressionBackslashSequence").withInterval(decl.sourceInterval(10069, 10103)), this.app("regularExpressionClass").withInterval(decl.sourceInterval(10115, 10137))).withInterval(decl.sourceInterval(10001, 10137)))
    .define("regularExpressionChar", [], this.alt(this.seq(this.not(this.alt(this.terminal("\\").withInterval(decl.sourceInterval(10167, 10171)), this.terminal("/").withInterval(decl.sourceInterval(10174, 10177)), this.terminal("[").withInterval(decl.sourceInterval(10180, 10183))).withInterval(decl.sourceInterval(10167, 10183))).withInterval(decl.sourceInterval(10165, 10184)), this.app("regularExpressionNonTerminator").withInterval(decl.sourceInterval(10185, 10215))).withInterval(decl.sourceInterval(10165, 10215)), this.app("regularExpressionBackslashSequence").withInterval(decl.sourceInterval(10225, 10259)), this.app("regularExpressionClass").withInterval(decl.sourceInterval(10269, 10291))).withInterval(decl.sourceInterval(10165, 10291)))
    .define("regularExpressionBackslashSequence", [], this.seq(this.terminal("\\").withInterval(decl.sourceInterval(10332, 10336)), this.app("regularExpressionNonTerminator").withInterval(decl.sourceInterval(10337, 10367))).withInterval(decl.sourceInterval(10332, 10367)))
    .define("regularExpressionNonTerminator", [], this.seq(this.not(this.app("lineTerminator").withInterval(decl.sourceInterval(10406, 10420))).withInterval(decl.sourceInterval(10404, 10421)), this.app("sourceCharacter").withInterval(decl.sourceInterval(10422, 10437))).withInterval(decl.sourceInterval(10404, 10437)))
    .define("regularExpressionClass", [], this.seq(this.terminal("[").withInterval(decl.sourceInterval(10466, 10469)), this.star(this.app("regularExpressionClassChar").withInterval(decl.sourceInterval(10470, 10496))).withInterval(decl.sourceInterval(10470, 10497)), this.terminal("]").withInterval(decl.sourceInterval(10498, 10501))).withInterval(decl.sourceInterval(10466, 10501)))
    .define("regularExpressionClassChar", [], this.alt(this.seq(this.not(this.alt(this.terminal("]").withInterval(decl.sourceInterval(10536, 10539)), this.terminal("\\").withInterval(decl.sourceInterval(10542, 10546))).withInterval(decl.sourceInterval(10536, 10546))).withInterval(decl.sourceInterval(10534, 10547)), this.app("regularExpressionNonTerminator").withInterval(decl.sourceInterval(10548, 10578))).withInterval(decl.sourceInterval(10534, 10578)), this.app("regularExpressionBackslashSequence").withInterval(decl.sourceInterval(10590, 10624))).withInterval(decl.sourceInterval(10534, 10624)))
    .define("regularExpressionFlags", [], this.star(this.app("identifierPart").withInterval(decl.sourceInterval(10653, 10667))).withInterval(decl.sourceInterval(10653, 10668)))
    .define("multiLineCommentNoNL", [], this.seq(this.terminal("/*").withInterval(decl.sourceInterval(10763, 10767)), this.star(this.seq(this.not(this.alt(this.terminal("*/").withInterval(decl.sourceInterval(10771, 10775)), this.app("lineTerminator").withInterval(decl.sourceInterval(10778, 10792))).withInterval(decl.sourceInterval(10771, 10792))).withInterval(decl.sourceInterval(10769, 10793)), this.app("sourceCharacter").withInterval(decl.sourceInterval(10794, 10809))).withInterval(decl.sourceInterval(10769, 10809))).withInterval(decl.sourceInterval(10768, 10811)), this.terminal("*/").withInterval(decl.sourceInterval(10812, 10816))).withInterval(decl.sourceInterval(10763, 10816)))
    .define("spacesNoNL", [], this.star(this.alt(this.app("whitespace").withInterval(decl.sourceInterval(10938, 10948)), this.app("singleLineComment").withInterval(decl.sourceInterval(10951, 10968)), this.app("multiLineCommentNoNL").withInterval(decl.sourceInterval(10971, 10991))).withInterval(decl.sourceInterval(10938, 10991))).withInterval(decl.sourceInterval(10937, 10993)))
    .define("sc", [], this.alt(this.seq(this.star(this.app("space").withInterval(decl.sourceInterval(11372, 11377))).withInterval(decl.sourceInterval(11372, 11378)), this.alt(this.terminal(";").withInterval(decl.sourceInterval(11380, 11383)), this.app("end").withInterval(decl.sourceInterval(11386, 11389))).withInterval(decl.sourceInterval(11380, 11389))).withInterval(decl.sourceInterval(11372, 11390)), this.seq(this.app("spacesNoNL").withInterval(decl.sourceInterval(11396, 11406)), this.alt(this.app("lineTerminator").withInterval(decl.sourceInterval(11408, 11422)), this.seq(this.not(this.app("multiLineCommentNoNL").withInterval(decl.sourceInterval(11426, 11446))).withInterval(decl.sourceInterval(11425, 11446)), this.app("multiLineComment").withInterval(decl.sourceInterval(11447, 11463))).withInterval(decl.sourceInterval(11425, 11463)), this.la(this.terminal("}").withInterval(decl.sourceInterval(11467, 11470))).withInterval(decl.sourceInterval(11466, 11470))).withInterval(decl.sourceInterval(11408, 11470))).withInterval(decl.sourceInterval(11396, 11471))).withInterval(decl.sourceInterval(11372, 11471)))
    .define("break", [], this.seq(this.terminal("break").withInterval(decl.sourceInterval(11537, 11544)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(11546, 11560))).withInterval(decl.sourceInterval(11545, 11560))).withInterval(decl.sourceInterval(11537, 11560)))
    .define("do", [], this.seq(this.terminal("do").withInterval(decl.sourceInterval(11569, 11573)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(11575, 11589))).withInterval(decl.sourceInterval(11574, 11589))).withInterval(decl.sourceInterval(11569, 11589)))
    .define("instanceof", [], this.seq(this.terminal("instanceof").withInterval(decl.sourceInterval(11606, 11618)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(11620, 11634))).withInterval(decl.sourceInterval(11619, 11634))).withInterval(decl.sourceInterval(11606, 11634)))
    .define("typeof", [], this.seq(this.terminal("typeof").withInterval(decl.sourceInterval(11647, 11655)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(11657, 11671))).withInterval(decl.sourceInterval(11656, 11671))).withInterval(decl.sourceInterval(11647, 11671)))
    .define("case", [], this.seq(this.terminal("case").withInterval(decl.sourceInterval(11682, 11688)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(11690, 11704))).withInterval(decl.sourceInterval(11689, 11704))).withInterval(decl.sourceInterval(11682, 11704)))
    .define("else", [], this.seq(this.terminal("else").withInterval(decl.sourceInterval(11715, 11721)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(11723, 11737))).withInterval(decl.sourceInterval(11722, 11737))).withInterval(decl.sourceInterval(11715, 11737)))
    .define("new", [], this.seq(this.terminal("new").withInterval(decl.sourceInterval(11747, 11752)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(11754, 11768))).withInterval(decl.sourceInterval(11753, 11768))).withInterval(decl.sourceInterval(11747, 11768)))
    .define("var", [], this.seq(this.terminal("var").withInterval(decl.sourceInterval(11778, 11783)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(11785, 11799))).withInterval(decl.sourceInterval(11784, 11799))).withInterval(decl.sourceInterval(11778, 11799)))
    .define("catch", [], this.seq(this.terminal("catch").withInterval(decl.sourceInterval(11811, 11818)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(11820, 11834))).withInterval(decl.sourceInterval(11819, 11834))).withInterval(decl.sourceInterval(11811, 11834)))
    .define("finally", [], this.seq(this.terminal("finally").withInterval(decl.sourceInterval(11848, 11857)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(11859, 11873))).withInterval(decl.sourceInterval(11858, 11873))).withInterval(decl.sourceInterval(11848, 11873)))
    .define("return", [], this.seq(this.terminal("return").withInterval(decl.sourceInterval(11886, 11894)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(11896, 11910))).withInterval(decl.sourceInterval(11895, 11910))).withInterval(decl.sourceInterval(11886, 11910)))
    .define("void", [], this.seq(this.terminal("void").withInterval(decl.sourceInterval(11921, 11927)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(11929, 11943))).withInterval(decl.sourceInterval(11928, 11943))).withInterval(decl.sourceInterval(11921, 11943)))
    .define("continue", [], this.seq(this.terminal("continue").withInterval(decl.sourceInterval(11958, 11968)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(11970, 11984))).withInterval(decl.sourceInterval(11969, 11984))).withInterval(decl.sourceInterval(11958, 11984)))
    .define("for", [], this.seq(this.terminal("for").withInterval(decl.sourceInterval(11994, 11999)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(12001, 12015))).withInterval(decl.sourceInterval(12000, 12015))).withInterval(decl.sourceInterval(11994, 12015)))
    .define("switch", [], this.seq(this.terminal("switch").withInterval(decl.sourceInterval(12028, 12036)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(12038, 12052))).withInterval(decl.sourceInterval(12037, 12052))).withInterval(decl.sourceInterval(12028, 12052)))
    .define("while", [], this.seq(this.terminal("while").withInterval(decl.sourceInterval(12064, 12071)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(12073, 12087))).withInterval(decl.sourceInterval(12072, 12087))).withInterval(decl.sourceInterval(12064, 12087)))
    .define("debugger", [], this.seq(this.terminal("debugger").withInterval(decl.sourceInterval(12102, 12112)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(12114, 12128))).withInterval(decl.sourceInterval(12113, 12128))).withInterval(decl.sourceInterval(12102, 12128)))
    .define("function", [], this.seq(this.terminal("function").withInterval(decl.sourceInterval(12143, 12153)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(12155, 12169))).withInterval(decl.sourceInterval(12154, 12169))).withInterval(decl.sourceInterval(12143, 12169)))
    .define("this", [], this.seq(this.terminal("this").withInterval(decl.sourceInterval(12180, 12186)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(12188, 12202))).withInterval(decl.sourceInterval(12187, 12202))).withInterval(decl.sourceInterval(12180, 12202)))
    .define("with", [], this.seq(this.terminal("with").withInterval(decl.sourceInterval(12213, 12219)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(12221, 12235))).withInterval(decl.sourceInterval(12220, 12235))).withInterval(decl.sourceInterval(12213, 12235)))
    .define("default", [], this.seq(this.terminal("default").withInterval(decl.sourceInterval(12249, 12258)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(12260, 12274))).withInterval(decl.sourceInterval(12259, 12274))).withInterval(decl.sourceInterval(12249, 12274)))
    .define("if", [], this.seq(this.terminal("if").withInterval(decl.sourceInterval(12283, 12287)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(12289, 12303))).withInterval(decl.sourceInterval(12288, 12303))).withInterval(decl.sourceInterval(12283, 12303)))
    .define("throw", [], this.seq(this.terminal("throw").withInterval(decl.sourceInterval(12315, 12322)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(12324, 12338))).withInterval(decl.sourceInterval(12323, 12338))).withInterval(decl.sourceInterval(12315, 12338)))
    .define("delete", [], this.seq(this.terminal("delete").withInterval(decl.sourceInterval(12351, 12359)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(12361, 12375))).withInterval(decl.sourceInterval(12360, 12375))).withInterval(decl.sourceInterval(12351, 12375)))
    .define("in", [], this.seq(this.terminal("in").withInterval(decl.sourceInterval(12384, 12388)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(12390, 12404))).withInterval(decl.sourceInterval(12389, 12404))).withInterval(decl.sourceInterval(12384, 12404)))
    .define("try", [], this.seq(this.terminal("try").withInterval(decl.sourceInterval(12414, 12419)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(12421, 12435))).withInterval(decl.sourceInterval(12420, 12435))).withInterval(decl.sourceInterval(12414, 12435)))
    .define("get", [], this.seq(this.terminal("get").withInterval(decl.sourceInterval(12445, 12450)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(12452, 12466))).withInterval(decl.sourceInterval(12451, 12466))).withInterval(decl.sourceInterval(12445, 12466)))
    .define("set", [], this.seq(this.terminal("set").withInterval(decl.sourceInterval(12476, 12481)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(12483, 12497))).withInterval(decl.sourceInterval(12482, 12497))).withInterval(decl.sourceInterval(12476, 12497)))
    .define("class", [], this.seq(this.terminal("class").withInterval(decl.sourceInterval(12509, 12516)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(12518, 12532))).withInterval(decl.sourceInterval(12517, 12532))).withInterval(decl.sourceInterval(12509, 12532)))
    .define("enum", [], this.seq(this.terminal("enum").withInterval(decl.sourceInterval(12543, 12549)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(12551, 12565))).withInterval(decl.sourceInterval(12550, 12565))).withInterval(decl.sourceInterval(12543, 12565)))
    .define("extends", [], this.seq(this.terminal("extends").withInterval(decl.sourceInterval(12579, 12588)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(12590, 12604))).withInterval(decl.sourceInterval(12589, 12604))).withInterval(decl.sourceInterval(12579, 12604)))
    .define("super", [], this.seq(this.terminal("super").withInterval(decl.sourceInterval(12616, 12623)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(12625, 12639))).withInterval(decl.sourceInterval(12624, 12639))).withInterval(decl.sourceInterval(12616, 12639)))
    .define("const", [], this.seq(this.terminal("const").withInterval(decl.sourceInterval(12651, 12658)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(12660, 12674))).withInterval(decl.sourceInterval(12659, 12674))).withInterval(decl.sourceInterval(12651, 12674)))
    .define("export", [], this.seq(this.terminal("export").withInterval(decl.sourceInterval(12687, 12695)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(12697, 12711))).withInterval(decl.sourceInterval(12696, 12711))).withInterval(decl.sourceInterval(12687, 12711)))
    .define("import", [], this.seq(this.terminal("import").withInterval(decl.sourceInterval(12724, 12732)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(12734, 12748))).withInterval(decl.sourceInterval(12733, 12748))).withInterval(decl.sourceInterval(12724, 12748)))
    .define("implements", [], this.seq(this.terminal("implements").withInterval(decl.sourceInterval(12765, 12777)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(12779, 12793))).withInterval(decl.sourceInterval(12778, 12793))).withInterval(decl.sourceInterval(12765, 12793)))
    .define("let", [], this.seq(this.terminal("let").withInterval(decl.sourceInterval(12803, 12808)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(12810, 12824))).withInterval(decl.sourceInterval(12809, 12824))).withInterval(decl.sourceInterval(12803, 12824)))
    .define("private", [], this.seq(this.terminal("private").withInterval(decl.sourceInterval(12838, 12847)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(12849, 12863))).withInterval(decl.sourceInterval(12848, 12863))).withInterval(decl.sourceInterval(12838, 12863)))
    .define("public", [], this.seq(this.terminal("public").withInterval(decl.sourceInterval(12876, 12884)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(12886, 12900))).withInterval(decl.sourceInterval(12885, 12900))).withInterval(decl.sourceInterval(12876, 12900)))
    .define("interface", [], this.seq(this.terminal("interface").withInterval(decl.sourceInterval(12916, 12927)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(12929, 12943))).withInterval(decl.sourceInterval(12928, 12943))).withInterval(decl.sourceInterval(12916, 12943)))
    .define("package", [], this.seq(this.terminal("package").withInterval(decl.sourceInterval(12957, 12966)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(12968, 12982))).withInterval(decl.sourceInterval(12967, 12982))).withInterval(decl.sourceInterval(12957, 12982)))
    .define("protected", [], this.seq(this.terminal("protected").withInterval(decl.sourceInterval(12998, 13009)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(13011, 13025))).withInterval(decl.sourceInterval(13010, 13025))).withInterval(decl.sourceInterval(12998, 13025)))
    .define("static", [], this.seq(this.terminal("static").withInterval(decl.sourceInterval(13038, 13046)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(13048, 13062))).withInterval(decl.sourceInterval(13047, 13062))).withInterval(decl.sourceInterval(13038, 13062)))
    .define("yield", [], this.seq(this.terminal("yield").withInterval(decl.sourceInterval(13074, 13081)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(13083, 13097))).withInterval(decl.sourceInterval(13082, 13097))).withInterval(decl.sourceInterval(13074, 13097)))
    .build();
});
