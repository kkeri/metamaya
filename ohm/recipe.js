(function() {
  var decl = this.newGrammar("Metamaya")
    .withSource("Metamaya {\r\n\r\n\tFile = Statement*\r\n\r\n\tStatement =\r\n\t\t| Definition\r\n\r\n\tDefinition =\r\n\t\t| identifier \"=\" Expression #sc -- namedValue\r\n\t\t| identifier \"{\" Statement* \"}\" #sc -- namedObject\r\n\t\t| identifier ParamList \"=\" Expression #sc -- namedFunction\r\n\r\n\tImport = \"@import\" stringLiteral #sc\r\n\r\n\tDeclaration = \"@declare\" listOf<identifier, \",\"> #sc\r\n\r\n\tExpression = Relation\r\n\r\n\tRelation =\r\n\t\t| Relation (\"==\" | \"!=\" | \"<\" | \">\" | \"<=\" | \">=\") Additive -- infix\r\n\t\t| Additive\r\n\r\n\tAdditive =\r\n\t\t| Additive (\"+\" | \"-\") Multiplicative -- infix\r\n\t\t| Multiplicative\r\n\r\n\tMultiplicative =\r\n\t\t| Multiplicative (\"*\" | \"/\" | \"%\") Factor -- infix\r\n\t\t| Factor\r\n\r\n\tFactor =\r\n\t\t| \"-\" Primary -- prefix\r\n\t\t| \"if\" \"(\" Expression \")\" Expression \"else\" Expression -- if\r\n\t\t| Primary\r\n\r\n\tPrimary =\r\n\t\t| Primary \"[\" Expression \"]\" -- index\r\n\t\t| Primary \"{\" Statement* \"}\" -- objectExtend\r\n\t\t| Primary ArgumentList -- invoke\r\n\t\t| Primary \".\" identifier ArgumentList -- invokeProperty\r\n\t\t| Primary \".\" identifier -- getProperty\r\n\t\t| \"(\" Expression \")\" -- parens\r\n\t\t| \"{\" Statement* \"}\" -- object\r\n\t\t| identifier -- nameReference\r\n\t\t| literal\r\n\t\t| \"_\"\r\n\r\n\tParamList = \"(\" listOf<Parameter, \",\"> \")\"\r\n\r\n\tParameter = identifier\r\n\r\n\tArgumentList = \"(\" listOf<Expression, \",\"> \")\"\r\n\r\n// --------------------------------------------------------------------------\r\n\r\n  // ï¿½A.1 Lexical Grammar -- http://ecma-international.org/ecma-262/5.1/#sec-A.1\r\n\r\n  /*\r\n\tNote: the following lexical conventions (see http://ecma-international.org/ecma-262/5.1/#sec-7)\r\n\tare not implemented in this parser.\r\n\r\n\t// Goal production in contexts where a leading \"/\" or \"/=\" is permitted:\r\n\tInputElementDiv = whitespace | lineTerminator | comment | token | DivPunctuator\r\n\r\n\t// Goal production in contexts where a leading \"/\" or \"/=' is not permitted:\r\n\tInputElementRegExp = whitespace | lineTerminator | comment | token | regularExpressionLiteral\r\n  */\r\n\r\n  sourceCharacter = any\r\n\r\n  // Override Ohm's built-in definition of space.\r\n  space := whitespace | lineTerminator | comment\r\n\r\n  whitespace = \"\\t\"\r\n\t\t\t | \"\\x0B\"    -- verticalTab\r\n\t\t\t | \"\\x0C\"    -- formFeed\r\n\t\t\t | \" \"\r\n\t\t\t | \"\\u00A0\"  -- noBreakSpace\r\n\t\t\t | \"\\uFEFF\"  -- byteOrderMark\r\n\t\t\t | unicodeSpaceSeparator\r\n\r\n  lineTerminator = \"\\n\" | \"\\r\" | \"\\u2028\" | \"\\u2029\"\r\n  lineTerminatorSequence = \"\\n\" | \"\\r\" ~\"\\n\" | \"\\u2028\" | \"\\u2029\" | \"\\r\\n\"\r\n\r\n  comment = multiLineComment | singleLineComment\r\n\r\n  multiLineComment = \"/*\" (~\"*/\" sourceCharacter)* \"*/\"\r\n  singleLineComment = \"//\" (~lineTerminator sourceCharacter)*\r\n\r\n  identifier (an indentifier) = ~reservedWord identifierName\r\n  identifierName = identifierStart identifierPart*\r\n\r\n  identifierStart = letter | \"$\" | \"_\"\r\n\t\t\t\t  | \"\\\\\" unicodeEscapeSequence -- escaped\r\n  identifierPart = identifierStart | unicodeCombiningMark\r\n\t\t\t\t | unicodeDigit | unicodeConnectorPunctuation\r\n\t\t\t\t | \"\\u200C\" | \"\\u200D\"\r\n letter += unicodeCategoryNl\r\n  unicodeCategoryNl\r\n\t= \"\\u2160\"..\"\\u2182\" | \"\\u3007\" | \"\\u3021\"..\"\\u3029\"\r\n  unicodeDigit (a digit)\r\n\t= \"\\u0030\"..\"\\u0039\" | \"\\u0660\"..\"\\u0669\" | \"\\u06F0\"..\"\\u06F9\" | \"\\u0966\"..\"\\u096F\" | \"\\u09E6\"..\"\\u09EF\" | \"\\u0A66\"..\"\\u0A6F\" | \"\\u0AE6\"..\"\\u0AEF\" | \"\\u0B66\"..\"\\u0B6F\" | \"\\u0BE7\"..\"\\u0BEF\" | \"\\u0C66\"..\"\\u0C6F\" | \"\\u0CE6\"..\"\\u0CEF\" | \"\\u0D66\"..\"\\u0D6F\" | \"\\u0E50\"..\"\\u0E59\" | \"\\u0ED0\"..\"\\u0ED9\" | \"\\u0F20\"..\"\\u0F29\" | \"\\uFF10\"..\"\\uFF19\"\r\n\r\n  unicodeCombiningMark (a Unicode combining mark)\r\n\t= \"\\u0300\"..\"\\u0345\" | \"\\u0360\"..\"\\u0361\" | \"\\u0483\"..\"\\u0486\" | \"\\u0591\"..\"\\u05A1\" | \"\\u05A3\"..\"\\u05B9\" | \"\\u05BB\"..\"\\u05BD\" | \"\\u05BF\"..\"\\u05BF\" | \"\\u05C1\"..\"\\u05C2\" | \"\\u05C4\"..\"\\u05C4\" | \"\\u064B\"..\"\\u0652\" | \"\\u0670\"..\"\\u0670\" | \"\\u06D6\"..\"\\u06DC\" | \"\\u06DF\"..\"\\u06E4\" | \"\\u06E7\"..\"\\u06E8\" | \"\\u06EA\"..\"\\u06ED\" | \"\\u0901\"..\"\\u0902\" | \"\\u093C\"..\"\\u093C\" | \"\\u0941\"..\"\\u0948\" | \"\\u094D\"..\"\\u094D\" | \"\\u0951\"..\"\\u0954\" | \"\\u0962\"..\"\\u0963\" | \"\\u0981\"..\"\\u0981\" | \"\\u09BC\"..\"\\u09BC\" | \"\\u09C1\"..\"\\u09C4\" | \"\\u09CD\"..\"\\u09CD\" | \"\\u09E2\"..\"\\u09E3\" | \"\\u0A02\"..\"\\u0A02\" | \"\\u0A3C\"..\"\\u0A3C\" | \"\\u0A41\"..\"\\u0A42\" | \"\\u0A47\"..\"\\u0A48\" | \"\\u0A4B\"..\"\\u0A4D\" | \"\\u0A70\"..\"\\u0A71\" | \"\\u0A81\"..\"\\u0A82\" | \"\\u0ABC\"..\"\\u0ABC\" | \"\\u0AC1\"..\"\\u0AC5\" | \"\\u0AC7\"..\"\\u0AC8\" | \"\\u0ACD\"..\"\\u0ACD\" | \"\\u0B01\"..\"\\u0B01\" | \"\\u0B3C\"..\"\\u0B3C\" | \"\\u0B3F\"..\"\\u0B3F\" | \"\\u0B41\"..\"\\u0B43\" | \"\\u0B4D\"..\"\\u0B4D\" | \"\\u0B56\"..\"\\u0B56\" | \"\\u0B82\"..\"\\u0B82\" | \"\\u0BC0\"..\"\\u0BC0\" | \"\\u0BCD\"..\"\\u0BCD\" | \"\\u0C3E\"..\"\\u0C40\" | \"\\u0C46\"..\"\\u0C48\" | \"\\u0C4A\"..\"\\u0C4D\" | \"\\u0C55\"..\"\\u0C56\" | \"\\u0CBF\"..\"\\u0CBF\" | \"\\u0CC6\"..\"\\u0CC6\" | \"\\u0CCC\"..\"\\u0CCD\" | \"\\u0D41\"..\"\\u0D43\" | \"\\u0D4D\"..\"\\u0D4D\" | \"\\u0E31\"..\"\\u0E31\" | \"\\u0E34\"..\"\\u0E3A\" | \"\\u0E47\"..\"\\u0E4E\" | \"\\u0EB1\"..\"\\u0EB1\" | \"\\u0EB4\"..\"\\u0EB9\" | \"\\u0EBB\"..\"\\u0EBC\" | \"\\u0EC8\"..\"\\u0ECD\" | \"\\u0F18\"..\"\\u0F19\" | \"\\u0F35\"..\"\\u0F35\" | \"\\u0F37\"..\"\\u0F37\" | \"\\u0F39\"..\"\\u0F39\" | \"\\u0F71\"..\"\\u0F7E\" | \"\\u0F80\"..\"\\u0F84\" | \"\\u0F86\"..\"\\u0F87\" | \"\\u0F90\"..\"\\u0F95\" | \"\\u0F97\"..\"\\u0F97\" | \"\\u0F99\"..\"\\u0FAD\" | \"\\u0FB1\"..\"\\u0FB7\" | \"\\u0FB9\"..\"\\u0FB9\" | \"\\u20D0\"..\"\\u20DC\" | \"\\u20E1\"..\"\\u20E1\" | \"\\u302A\"..\"\\u302F\" | \"\\u3099\"..\"\\u309A\" | \"\\uFB1E\"..\"\\uFB1E\" | \"\\uFE20\"..\"\\uFE23\"\r\n\r\n  unicodeConnectorPunctuation = \"\\u005F\" | \"\\u203F\"..\"\\u2040\" | \"\\u30FB\" | \"\\uFE33\"..\"\\uFE34\" | \"\\uFE4D\"..\"\\uFE4F\" | \"\\uFF3F\" | \"\\uFF65\"\r\n  unicodeSpaceSeparator = \"\\u2000\"..\"\\u200B\" | \"\\u3000\"\r\n\r\n  reservedWord = keyword | futureReservedWord | nullLiteral | booleanLiteral\r\n\r\n  // Note: keywords that are the complete prefix of another keyword should\r\n  // be prioritized (e.g. 'in' should come before 'instanceof')\r\n  keyword = break    | do        | instanceof | typeof\r\n\t\t  | case     | else      | new        | var\r\n\t\t  | catch    | finally   | return     | void\r\n\t\t  | continue | for       | switch     | while\r\n\t\t  | debugger | function  | this       | with\r\n\t\t  | default  | if        | throw\r\n\t\t  | delete   | in        | try\r\n\r\n  futureReservedWordLax = class  | enum  | extends\r\n\t\t\t\t\t\t| super  | const | export\r\n\t\t\t\t\t\t| import\r\n\r\n  futureReservedWordStrict = futureReservedWordLax\r\n\t\t\t\t\t\t   | implements | let     | private   | public\r\n\t\t\t\t\t\t   | interface  | package | protected | static\r\n\t\t\t\t\t\t   | yield\r\n\r\n  futureReservedWord = futureReservedWordStrict\r\n\r\n  /*\r\n\tNote: Punctuator and DivPunctuator (see https://es5.github.io/x7.html#x7.7) are\r\n\tnot currently used by this grammar.\r\n  */\r\n\r\n  literal = nullLiteral | booleanLiteral | numericLiteral\r\n\t\t  | stringLiteral | regularExpressionLiteral // spec forgot Regexp literals in appendix?\r\n\r\n  nullLiteral = \"null\" ~identifierPart\r\n  booleanLiteral = (\"true\" | \"false\") ~identifierPart\r\n\r\n  // For semantics on how decimal literals are constructed, see section 7.8.3\r\n\r\n  // Note that the ordering of hexIntegerLiteral and decimalLiteral is reversed w.r.t. the spec\r\n  // This is intentional: the order decimalLiteral | hexIntegerLiteral will parse\r\n  // \"0x...\" as a decimal literal \"0\" followed by \"x...\"\r\n  numericLiteral = octalIntegerLiteral | hexIntegerLiteral | decimalLiteral\r\n\r\n  decimalLiteral = decimalIntegerLiteral \".\" decimalDigit* exponentPart -- bothParts\r\n\t\t\t\t |                       \".\" decimalDigit+ exponentPart -- decimalsOnly\r\n\t\t\t\t | decimalIntegerLiteral                   exponentPart -- integerOnly\r\n\r\n  decimalIntegerLiteral = nonZeroDigit decimalDigit*  -- nonZero\r\n\t\t\t\t\t\t| \"0\"                         -- zero\r\n  decimalDigit = \"0\"..\"9\"\r\n  nonZeroDigit = \"1\"..\"9\"\r\n\r\n  exponentPart = exponentIndicator signedInteger -- present\r\n\t\t\t   |                                 -- absent\r\n  exponentIndicator = \"e\" | \"E\"\r\n  signedInteger = \"+\" decimalDigit* -- positive\r\n\t\t\t\t| \"-\" decimalDigit* -- negative\r\n\t\t\t\t|     decimalDigit+ -- noSign\r\n\r\n  hexIntegerLiteral = \"0x\" hexDigit+\r\n\t\t\t\t\t| \"0X\" hexDigit+\r\n\r\n  // hexDigit defined in Ohm's built-in rules (otherwise: hexDigit = \"0\"..\"9\" | \"a\"..\"f\" | \"A\"..\"F\")\r\n\r\n  octalIntegerLiteral = \"0\" octalDigit+\r\n\r\n  octalDigit = \"0\"..\"7\"\r\n\r\n  // For semantics on how string literals are constructed, see section 7.8.4\r\n  stringLiteral = \"\\\"\" doubleStringCharacter* \"\\\"\"\r\n\t\t\t\t| \"'\" singleStringCharacter* \"'\"\r\n  doubleStringCharacter = ~(\"\\\"\" | \"\\\\\" | lineTerminator) sourceCharacter -- nonEscaped\r\n\t\t\t\t\t\t| \"\\\\\" escapeSequence                             -- escaped\r\n\t\t\t\t\t\t| lineContinuation                                -- lineContinuation\r\n  singleStringCharacter = ~(\"'\" | \"\\\\\" | lineTerminator) sourceCharacter -- nonEscaped\r\n\t\t\t\t\t\t| \"\\\\\" escapeSequence                            -- escaped\r\n\t\t\t\t\t\t| lineContinuation                               -- lineContinuation\r\n  lineContinuation = \"\\\\\" lineTerminatorSequence\r\n  escapeSequence = unicodeEscapeSequence\r\n\t\t\t\t | hexEscapeSequence\r\n\t\t\t\t | octalEscapeSequence\r\n\t\t\t\t | characterEscapeSequence  // Must come last.\r\n  characterEscapeSequence = singleEscapeCharacter\r\n\t\t\t\t\t\t  | nonEscapeCharacter\r\n  singleEscapeCharacter = \"'\"  // -> ( String.fromCharCode(0039) ) /*\\u0027*/\r\n\t\t\t\t\t\t| \"\\\"\" // -> ( String.fromCharCode(0034) ) /*\\u0022*/\r\n\t\t\t\t\t\t| \"\\\\\" // -> ( String.fromCharCode(0092) ) /*\\u005C*/\r\n\t\t\t\t\t\t| \"b\"  // -> ( String.fromCharCode(0008) ) /*\\u0008*/\r\n\t\t\t\t\t\t| \"f\"  // -> ( String.fromCharCode(0012) ) /*\\u000C*/\r\n\t\t\t\t\t\t| \"n\"  // -> ( String.fromCharCode(0010) ) /*\\u000A*/\r\n\t\t\t\t\t\t| \"r\"  // -> ( String.fromCharCode(0013) ) /*\\u000D*/\r\n\t\t\t\t\t\t| \"t\"  // -> ( String.fromCharCode(0009) ) /*\\u0009*/\r\n\t\t\t\t\t\t| \"v\"  // -> ( String.fromCharCode(0011) ) /*\\u000B*/\r\n  nonEscapeCharacter = ~(escapeCharacter | lineTerminator) sourceCharacter\r\n  escapeCharacter = singleEscapeCharacter | decimalDigit | \"x\" | \"u\"\r\n  octalEscapeSequence = zeroToThree octalDigit octalDigit    -- whole\r\n\t\t\t\t\t  | fourToSeven octalDigit               -- eightTimesfourToSeven\r\n\t\t\t\t\t  | zeroToThree octalDigit ~decimalDigit -- eightTimesZeroToThree\r\n\t\t\t\t\t  | octalDigit ~decimalDigit             -- octal\r\n  hexEscapeSequence = \"x\" hexDigit hexDigit\r\n  unicodeEscapeSequence = \"u\" hexDigit hexDigit hexDigit hexDigit\r\n\r\n  zeroToThree = \"0\"..\"3\"\r\n  fourToSeven = \"4\"..\"7\"\r\n\r\n  // ï¿½7.8.5 Regular Expression Literals -- http://ecma-international.org/ecma-262/5.1/#sec-7.8.5\r\n\r\n  regularExpressionLiteral = \"/\" regularExpressionBody \"/\" regularExpressionFlags\r\n  regularExpressionBody = regularExpressionFirstChar regularExpressionChar*\r\n  regularExpressionFirstChar = ~(\"*\" | \"\\\\\" | \"/\" | \"[\") regularExpressionNonTerminator\r\n\t\t\t\t\t\t\t | regularExpressionBackslashSequence\r\n\t\t\t\t\t\t\t | regularExpressionClass\r\n  regularExpressionChar = ~(\"\\\\\" | \"/\" | \"[\") regularExpressionNonTerminator\r\n\t\t\t\t\t\t| regularExpressionBackslashSequence\r\n\t\t\t\t\t\t| regularExpressionClass\r\n  regularExpressionBackslashSequence = \"\\\\\" regularExpressionNonTerminator\r\n  regularExpressionNonTerminator = ~(lineTerminator) sourceCharacter\r\n  regularExpressionClass = \"[\" regularExpressionClassChar* \"]\"\r\n  regularExpressionClassChar = ~(\"]\" | \"\\\\\") regularExpressionNonTerminator\r\n\t\t\t\t\t\t\t | regularExpressionBackslashSequence\r\n  regularExpressionFlags = identifierPart*\r\n\r\n  // === Implementation-level rules (not part of the spec) ===\r\n\r\n  multiLineCommentNoNL = \"/*\" (~(\"*/\" | lineTerminator) sourceCharacter)* \"*/\"\r\n\r\n  // does not accept lineTerminators, not even implicit ones in a multiLineComment (cf. section 7.4)\r\n  spacesNoNL = (whitespace | singleLineComment | multiLineCommentNoNL)*\r\n\r\n  // A semicolon is \"automatically inserted\" if a newline is reached the end of the input stream\r\n  // is reached, or the offending token is \"}\".\r\n  // See http://ecma-international.org/ecma-262/5.1/#sec-7.9 for more information.\r\n  // NOTE: Applications of this rule *must* appear in a lexical context -- either in the body of a\r\n  // lexical rule, or inside `#()`.\r\n  sc = space* (\";\" | end)\r\n\t | spacesNoNL (lineTerminator | ~multiLineCommentNoNL multiLineComment | &\"}\")\r\n\r\n  // Convenience rules for parsing keyword tokens.\r\n  break = \"break\" ~identifierPart\r\n  do = \"do\" ~identifierPart\r\n  instanceof = \"instanceof\" ~identifierPart\r\n  typeof = \"typeof\" ~identifierPart\r\n  case = \"case\" ~identifierPart\r\n  else = \"else\" ~identifierPart\r\n  new = \"new\" ~identifierPart\r\n  var = \"var\" ~identifierPart\r\n  catch = \"catch\" ~identifierPart\r\n  finally = \"finally\" ~identifierPart\r\n  return = \"return\" ~identifierPart\r\n  void = \"void\" ~identifierPart\r\n  continue = \"continue\" ~identifierPart\r\n  for = \"for\" ~identifierPart\r\n  switch = \"switch\" ~identifierPart\r\n  while = \"while\" ~identifierPart\r\n  debugger = \"debugger\" ~identifierPart\r\n  function = \"function\" ~identifierPart\r\n  this = \"this\" ~identifierPart\r\n  with = \"with\" ~identifierPart\r\n  default = \"default\" ~identifierPart\r\n  if = \"if\" ~identifierPart\r\n  throw = \"throw\" ~identifierPart\r\n  delete = \"delete\" ~identifierPart\r\n  in = \"in\" ~identifierPart\r\n  try = \"try\" ~identifierPart\r\n  get = \"get\" ~identifierPart\r\n  set = \"set\" ~identifierPart\r\n  class = \"class\" ~identifierPart\r\n  enum = \"enum\" ~identifierPart\r\n  extends = \"extends\" ~identifierPart\r\n  super = \"super\" ~identifierPart\r\n  const = \"const\" ~identifierPart\r\n  export = \"export\" ~identifierPart\r\n  import = \"import\" ~identifierPart\r\n  implements = \"implements\" ~identifierPart\r\n  let = \"let\" ~identifierPart\r\n  private = \"private\" ~identifierPart\r\n  public = \"public\" ~identifierPart\r\n  interface = \"interface\" ~identifierPart\r\n  package = \"package\" ~identifierPart\r\n  protected = \"protected\" ~identifierPart\r\n  static = \"static\" ~identifierPart\r\n  yield = \"yield\" ~identifierPart\r\n  \r\n  // end of lexical rules\r\n\r\n}")
    .withDefaultStartRule("File")
  return decl
    .define("File", [], this.star(this.app("Statement").withInterval(decl.sourceInterval(22, 31))).withInterval(decl.sourceInterval(22, 32)))
    .define("Statement", [], this.app("Definition").withInterval(decl.sourceInterval(52, 64)))
    .define("Definition_namedValue", [], this.seq(this.app("identifier").withInterval(decl.sourceInterval(87, 97)), this.terminal("=").withInterval(decl.sourceInterval(98, 101)), this.app("Expression").withInterval(decl.sourceInterval(102, 112)), this.lex(this.app("sc").withInterval(decl.sourceInterval(114, 116))).withInterval(decl.sourceInterval(113, 116))).withInterval(decl.sourceInterval(87, 116)))
    .define("Definition_namedObject", [], this.seq(this.app("identifier").withInterval(decl.sourceInterval(136, 146)), this.terminal("{").withInterval(decl.sourceInterval(147, 150)), this.star(this.app("Statement").withInterval(decl.sourceInterval(151, 160))).withInterval(decl.sourceInterval(151, 161)), this.terminal("}").withInterval(decl.sourceInterval(162, 165)), this.lex(this.app("sc").withInterval(decl.sourceInterval(167, 169))).withInterval(decl.sourceInterval(166, 169))).withInterval(decl.sourceInterval(136, 169)))
    .define("Definition_namedFunction", [], this.seq(this.app("identifier").withInterval(decl.sourceInterval(190, 200)), this.app("ParamList").withInterval(decl.sourceInterval(201, 210)), this.terminal("=").withInterval(decl.sourceInterval(211, 214)), this.app("Expression").withInterval(decl.sourceInterval(215, 225)), this.lex(this.app("sc").withInterval(decl.sourceInterval(227, 229))).withInterval(decl.sourceInterval(226, 229))).withInterval(decl.sourceInterval(190, 229)))
    .define("Definition", [], this.alt(this.app("Definition_namedValue").withInterval(decl.sourceInterval(87, 116)), this.app("Definition_namedObject").withInterval(decl.sourceInterval(136, 169)), this.app("Definition_namedFunction").withInterval(decl.sourceInterval(190, 229))).withInterval(decl.sourceInterval(85, 246)))
    .define("Import", [], this.seq(this.terminal("@import").withInterval(decl.sourceInterval(260, 269)), this.app("stringLiteral").withInterval(decl.sourceInterval(270, 283)), this.lex(this.app("sc").withInterval(decl.sourceInterval(285, 287))).withInterval(decl.sourceInterval(284, 287))).withInterval(decl.sourceInterval(260, 287)))
    .define("Declaration", [], this.seq(this.terminal("@declare").withInterval(decl.sourceInterval(306, 316)), this.app("listOf", [this.app("identifier").withInterval(decl.sourceInterval(324, 334)), this.terminal(",").withInterval(decl.sourceInterval(336, 339))]).withInterval(decl.sourceInterval(317, 340)), this.lex(this.app("sc").withInterval(decl.sourceInterval(342, 344))).withInterval(decl.sourceInterval(341, 344))).withInterval(decl.sourceInterval(306, 344)))
    .define("Expression", [], this.app("Relation").withInterval(decl.sourceInterval(362, 370)))
    .define("Relation_infix", [], this.seq(this.app("Relation").withInterval(decl.sourceInterval(391, 399)), this.alt(this.terminal("==").withInterval(decl.sourceInterval(401, 405)), this.terminal("!=").withInterval(decl.sourceInterval(408, 412)), this.terminal("<").withInterval(decl.sourceInterval(415, 418)), this.terminal(">").withInterval(decl.sourceInterval(421, 424)), this.terminal("<=").withInterval(decl.sourceInterval(427, 431)), this.terminal(">=").withInterval(decl.sourceInterval(434, 438))).withInterval(decl.sourceInterval(401, 438)), this.app("Additive").withInterval(decl.sourceInterval(440, 448))).withInterval(decl.sourceInterval(391, 448)))
    .define("Relation", [], this.alt(this.app("Relation_infix").withInterval(decl.sourceInterval(391, 448)), this.app("Additive").withInterval(decl.sourceInterval(463, 471))).withInterval(decl.sourceInterval(389, 471)))
    .define("Additive_infix", [], this.seq(this.app("Additive").withInterval(decl.sourceInterval(492, 500)), this.alt(this.terminal("+").withInterval(decl.sourceInterval(502, 505)), this.terminal("-").withInterval(decl.sourceInterval(508, 511))).withInterval(decl.sourceInterval(502, 511)), this.app("Multiplicative").withInterval(decl.sourceInterval(513, 527))).withInterval(decl.sourceInterval(492, 527)))
    .define("Additive", [], this.alt(this.app("Additive_infix").withInterval(decl.sourceInterval(492, 527)), this.app("Multiplicative").withInterval(decl.sourceInterval(542, 556))).withInterval(decl.sourceInterval(490, 556)))
    .define("Multiplicative_infix", [], this.seq(this.app("Multiplicative").withInterval(decl.sourceInterval(583, 597)), this.alt(this.terminal("*").withInterval(decl.sourceInterval(599, 602)), this.terminal("/").withInterval(decl.sourceInterval(605, 608)), this.terminal("%").withInterval(decl.sourceInterval(611, 614))).withInterval(decl.sourceInterval(599, 614)), this.app("Factor").withInterval(decl.sourceInterval(616, 622))).withInterval(decl.sourceInterval(583, 622)))
    .define("Multiplicative", [], this.alt(this.app("Multiplicative_infix").withInterval(decl.sourceInterval(583, 622)), this.app("Factor").withInterval(decl.sourceInterval(637, 643))).withInterval(decl.sourceInterval(581, 643)))
    .define("Factor_prefix", [], this.seq(this.terminal("-").withInterval(decl.sourceInterval(662, 665)), this.app("Primary").withInterval(decl.sourceInterval(666, 673))).withInterval(decl.sourceInterval(662, 673)))
    .define("Factor_if", [], this.seq(this.terminal("if").withInterval(decl.sourceInterval(689, 693)), this.terminal("(").withInterval(decl.sourceInterval(694, 697)), this.app("Expression").withInterval(decl.sourceInterval(698, 708)), this.terminal(")").withInterval(decl.sourceInterval(709, 712)), this.app("Expression").withInterval(decl.sourceInterval(713, 723)), this.terminal("else").withInterval(decl.sourceInterval(724, 730)), this.app("Expression").withInterval(decl.sourceInterval(731, 741))).withInterval(decl.sourceInterval(689, 741)))
    .define("Factor", [], this.alt(this.app("Factor_prefix").withInterval(decl.sourceInterval(662, 673)), this.app("Factor_if").withInterval(decl.sourceInterval(689, 741)), this.app("Primary").withInterval(decl.sourceInterval(753, 760))).withInterval(decl.sourceInterval(660, 760)))
    .define("Primary_index", [], this.seq(this.app("Primary").withInterval(decl.sourceInterval(780, 787)), this.terminal("[").withInterval(decl.sourceInterval(788, 791)), this.app("Expression").withInterval(decl.sourceInterval(792, 802)), this.terminal("]").withInterval(decl.sourceInterval(803, 806))).withInterval(decl.sourceInterval(780, 806)))
    .define("Primary_objectExtend", [], this.seq(this.app("Primary").withInterval(decl.sourceInterval(821, 828)), this.terminal("{").withInterval(decl.sourceInterval(829, 832)), this.star(this.app("Statement").withInterval(decl.sourceInterval(833, 842))).withInterval(decl.sourceInterval(833, 843)), this.terminal("}").withInterval(decl.sourceInterval(844, 847))).withInterval(decl.sourceInterval(821, 847)))
    .define("Primary_invoke", [], this.seq(this.app("Primary").withInterval(decl.sourceInterval(869, 876)), this.app("ArgumentList").withInterval(decl.sourceInterval(877, 889))).withInterval(decl.sourceInterval(869, 889)))
    .define("Primary_invokeProperty", [], this.seq(this.app("Primary").withInterval(decl.sourceInterval(905, 912)), this.terminal(".").withInterval(decl.sourceInterval(913, 916)), this.app("identifier").withInterval(decl.sourceInterval(917, 927)), this.app("ArgumentList").withInterval(decl.sourceInterval(928, 940))).withInterval(decl.sourceInterval(905, 940)))
    .define("Primary_getProperty", [], this.seq(this.app("Primary").withInterval(decl.sourceInterval(964, 971)), this.terminal(".").withInterval(decl.sourceInterval(972, 975)), this.app("identifier").withInterval(decl.sourceInterval(976, 986))).withInterval(decl.sourceInterval(964, 986)))
    .define("Primary_parens", [], this.seq(this.terminal("(").withInterval(decl.sourceInterval(1007, 1010)), this.app("Expression").withInterval(decl.sourceInterval(1011, 1021)), this.terminal(")").withInterval(decl.sourceInterval(1022, 1025))).withInterval(decl.sourceInterval(1007, 1025)))
    .define("Primary_object", [], this.seq(this.terminal("{").withInterval(decl.sourceInterval(1041, 1044)), this.star(this.app("Statement").withInterval(decl.sourceInterval(1045, 1054))).withInterval(decl.sourceInterval(1045, 1055)), this.terminal("}").withInterval(decl.sourceInterval(1056, 1059))).withInterval(decl.sourceInterval(1041, 1059)))
    .define("Primary_nameReference", [], this.app("identifier").withInterval(decl.sourceInterval(1075, 1085)))
    .define("Primary", [], this.alt(this.app("Primary_index").withInterval(decl.sourceInterval(780, 806)), this.app("Primary_objectExtend").withInterval(decl.sourceInterval(821, 847)), this.app("Primary_invoke").withInterval(decl.sourceInterval(869, 889)), this.app("Primary_invokeProperty").withInterval(decl.sourceInterval(905, 940)), this.app("Primary_getProperty").withInterval(decl.sourceInterval(964, 986)), this.app("Primary_parens").withInterval(decl.sourceInterval(1007, 1025)), this.app("Primary_object").withInterval(decl.sourceInterval(1041, 1059)), this.app("Primary_nameReference").withInterval(decl.sourceInterval(1075, 1085)), this.app("literal").withInterval(decl.sourceInterval(1108, 1115)), this.terminal("_").withInterval(decl.sourceInterval(1121, 1124))).withInterval(decl.sourceInterval(778, 1124)))
    .define("ParamList", [], this.seq(this.terminal("(").withInterval(decl.sourceInterval(1141, 1144)), this.app("listOf", [this.app("Parameter").withInterval(decl.sourceInterval(1152, 1161)), this.terminal(",").withInterval(decl.sourceInterval(1163, 1166))]).withInterval(decl.sourceInterval(1145, 1167)), this.terminal(")").withInterval(decl.sourceInterval(1168, 1171))).withInterval(decl.sourceInterval(1141, 1171)))
    .define("Parameter", [], this.app("identifier").withInterval(decl.sourceInterval(1188, 1198)))
    .define("ArgumentList", [], this.seq(this.terminal("(").withInterval(decl.sourceInterval(1218, 1221)), this.app("listOf", [this.app("Expression").withInterval(decl.sourceInterval(1229, 1239)), this.terminal(",").withInterval(decl.sourceInterval(1241, 1244))]).withInterval(decl.sourceInterval(1222, 1245)), this.terminal(")").withInterval(decl.sourceInterval(1246, 1249))).withInterval(decl.sourceInterval(1218, 1249)))
    .define("sourceCharacter", [], this.app("any").withInterval(decl.sourceInterval(1924, 1927)))
    .override("space", [], this.alt(this.app("whitespace").withInterval(decl.sourceInterval(1993, 2003)), this.app("lineTerminator").withInterval(decl.sourceInterval(2006, 2020)), this.app("comment").withInterval(decl.sourceInterval(2023, 2030))).withInterval(decl.sourceInterval(1993, 2030)))
    .define("whitespace_verticalTab", [], this.terminal("\u000b").withInterval(decl.sourceInterval(2061, 2067)))
    .define("whitespace_formFeed", [], this.terminal("\f").withInterval(decl.sourceInterval(2093, 2099)))
    .define("whitespace_noBreakSpace", [], this.terminal("Â ").withInterval(decl.sourceInterval(2133, 2141)))
    .define("whitespace_byteOrderMark", [], this.terminal("ï»¿").withInterval(decl.sourceInterval(2166, 2174)))
    .define("whitespace", [], this.alt(this.terminal("\t").withInterval(decl.sourceInterval(2049, 2053)), this.app("whitespace_verticalTab").withInterval(decl.sourceInterval(2061, 2067)), this.app("whitespace_formFeed").withInterval(decl.sourceInterval(2093, 2099)), this.terminal(" ").withInterval(decl.sourceInterval(2122, 2125)), this.app("whitespace_noBreakSpace").withInterval(decl.sourceInterval(2133, 2141)), this.app("whitespace_byteOrderMark").withInterval(decl.sourceInterval(2166, 2174)), this.app("unicodeSpaceSeparator").withInterval(decl.sourceInterval(2200, 2221))).withInterval(decl.sourceInterval(2049, 2221)))
    .define("lineTerminator", [], this.alt(this.terminal("\n").withInterval(decl.sourceInterval(2244, 2248)), this.terminal("\r").withInterval(decl.sourceInterval(2251, 2255)), this.terminal("\u2028").withInterval(decl.sourceInterval(2258, 2266)), this.terminal("\u2029").withInterval(decl.sourceInterval(2269, 2277))).withInterval(decl.sourceInterval(2244, 2277)))
    .define("lineTerminatorSequence", [], this.alt(this.terminal("\n").withInterval(decl.sourceInterval(2306, 2310)), this.seq(this.terminal("\r").withInterval(decl.sourceInterval(2313, 2317)), this.not(this.terminal("\n").withInterval(decl.sourceInterval(2319, 2323))).withInterval(decl.sourceInterval(2318, 2323))).withInterval(decl.sourceInterval(2313, 2323)), this.terminal("\u2028").withInterval(decl.sourceInterval(2326, 2334)), this.terminal("\u2029").withInterval(decl.sourceInterval(2337, 2345)), this.terminal("\r\n").withInterval(decl.sourceInterval(2348, 2354))).withInterval(decl.sourceInterval(2306, 2354)))
    .define("comment", [], this.alt(this.app("multiLineComment").withInterval(decl.sourceInterval(2370, 2386)), this.app("singleLineComment").withInterval(decl.sourceInterval(2389, 2406))).withInterval(decl.sourceInterval(2370, 2406)))
    .define("multiLineComment", [], this.seq(this.terminal("/*").withInterval(decl.sourceInterval(2431, 2435)), this.star(this.seq(this.not(this.terminal("*/").withInterval(decl.sourceInterval(2438, 2442))).withInterval(decl.sourceInterval(2437, 2442)), this.app("sourceCharacter").withInterval(decl.sourceInterval(2443, 2458))).withInterval(decl.sourceInterval(2437, 2458))).withInterval(decl.sourceInterval(2436, 2460)), this.terminal("*/").withInterval(decl.sourceInterval(2461, 2465))).withInterval(decl.sourceInterval(2431, 2465)))
    .define("singleLineComment", [], this.seq(this.terminal("//").withInterval(decl.sourceInterval(2489, 2493)), this.star(this.seq(this.not(this.app("lineTerminator").withInterval(decl.sourceInterval(2496, 2510))).withInterval(decl.sourceInterval(2495, 2510)), this.app("sourceCharacter").withInterval(decl.sourceInterval(2511, 2526))).withInterval(decl.sourceInterval(2495, 2526))).withInterval(decl.sourceInterval(2494, 2528))).withInterval(decl.sourceInterval(2489, 2528)))
    .define("identifier", [], this.seq(this.not(this.app("reservedWord").withInterval(decl.sourceInterval(2565, 2577))).withInterval(decl.sourceInterval(2564, 2577)), this.app("identifierName").withInterval(decl.sourceInterval(2578, 2592))).withInterval(decl.sourceInterval(2564, 2592)), "an indentifier")
    .define("identifierName", [], this.seq(this.app("identifierStart").withInterval(decl.sourceInterval(2613, 2628)), this.star(this.app("identifierPart").withInterval(decl.sourceInterval(2629, 2643))).withInterval(decl.sourceInterval(2629, 2644))).withInterval(decl.sourceInterval(2613, 2644)))
    .define("identifierStart_escaped", [], this.seq(this.terminal("\\").withInterval(decl.sourceInterval(2696, 2700)), this.app("unicodeEscapeSequence").withInterval(decl.sourceInterval(2701, 2722))).withInterval(decl.sourceInterval(2696, 2722)))
    .define("identifierStart", [], this.alt(this.app("letter").withInterval(decl.sourceInterval(2668, 2674)), this.terminal("$").withInterval(decl.sourceInterval(2677, 2680)), this.terminal("_").withInterval(decl.sourceInterval(2683, 2686)), this.app("identifierStart_escaped").withInterval(decl.sourceInterval(2696, 2722))).withInterval(decl.sourceInterval(2668, 2733)))
    .define("identifierPart", [], this.alt(this.app("identifierStart").withInterval(decl.sourceInterval(2754, 2769)), this.app("unicodeCombiningMark").withInterval(decl.sourceInterval(2772, 2792)), this.app("unicodeDigit").withInterval(decl.sourceInterval(2801, 2813)), this.app("unicodeConnectorPunctuation").withInterval(decl.sourceInterval(2816, 2843)), this.terminal("â").withInterval(decl.sourceInterval(2852, 2860)), this.terminal("â").withInterval(decl.sourceInterval(2863, 2871))).withInterval(decl.sourceInterval(2754, 2871)))
    .extend("letter", [], this.app("unicodeCategoryNl").withInterval(decl.sourceInterval(2884, 2901)))
    .define("unicodeCategoryNl", [], this.alt(this.range("â ", "â").withInterval(decl.sourceInterval(2927, 2945)), this.terminal("ã").withInterval(decl.sourceInterval(2948, 2956)), this.range("ã¡", "ã©").withInterval(decl.sourceInterval(2959, 2977))).withInterval(decl.sourceInterval(2927, 2977)))
    .define("unicodeDigit", [], this.alt(this.range("0", "9").withInterval(decl.sourceInterval(3008, 3026)), this.range("Ù ", "Ù©").withInterval(decl.sourceInterval(3029, 3047)), this.range("Û°", "Û¹").withInterval(decl.sourceInterval(3050, 3068)), this.range("à¥¦", "à¥¯").withInterval(decl.sourceInterval(3071, 3089)), this.range("à§¦", "à§¯").withInterval(decl.sourceInterval(3092, 3110)), this.range("à©¦", "à©¯").withInterval(decl.sourceInterval(3113, 3131)), this.range("à«¦", "à«¯").withInterval(decl.sourceInterval(3134, 3152)), this.range("à­¦", "à­¯").withInterval(decl.sourceInterval(3155, 3173)), this.range("à¯§", "à¯¯").withInterval(decl.sourceInterval(3176, 3194)), this.range("à±¦", "à±¯").withInterval(decl.sourceInterval(3197, 3215)), this.range("à³¦", "à³¯").withInterval(decl.sourceInterval(3218, 3236)), this.range("àµ¦", "àµ¯").withInterval(decl.sourceInterval(3239, 3257)), this.range("à¹", "à¹").withInterval(decl.sourceInterval(3260, 3278)), this.range("à»", "à»").withInterval(decl.sourceInterval(3281, 3299)), this.range("à¼ ", "à¼©").withInterval(decl.sourceInterval(3302, 3320)), this.range("ï¼", "ï¼").withInterval(decl.sourceInterval(3323, 3341))).withInterval(decl.sourceInterval(3008, 3341)), "a digit")
    .define("unicodeCombiningMark", [], this.alt(this.range("Ì", "Í").withInterval(decl.sourceInterval(3399, 3417)), this.range("Í ", "Í¡").withInterval(decl.sourceInterval(3420, 3438)), this.range("Ò", "Ò").withInterval(decl.sourceInterval(3441, 3459)), this.range("Ö", "Ö¡").withInterval(decl.sourceInterval(3462, 3480)), this.range("Ö£", "Ö¹").withInterval(decl.sourceInterval(3483, 3501)), this.range("Ö»", "Ö½").withInterval(decl.sourceInterval(3504, 3522)), this.range("Ö¿", "Ö¿").withInterval(decl.sourceInterval(3525, 3543)), this.range("×", "×").withInterval(decl.sourceInterval(3546, 3564)), this.range("×", "×").withInterval(decl.sourceInterval(3567, 3585)), this.range("Ù", "Ù").withInterval(decl.sourceInterval(3588, 3606)), this.range("Ù°", "Ù°").withInterval(decl.sourceInterval(3609, 3627)), this.range("Û", "Û").withInterval(decl.sourceInterval(3630, 3648)), this.range("Û", "Û¤").withInterval(decl.sourceInterval(3651, 3669)), this.range("Û§", "Û¨").withInterval(decl.sourceInterval(3672, 3690)), this.range("Ûª", "Û­").withInterval(decl.sourceInterval(3693, 3711)), this.range("à¤", "à¤").withInterval(decl.sourceInterval(3714, 3732)), this.range("à¤¼", "à¤¼").withInterval(decl.sourceInterval(3735, 3753)), this.range("à¥", "à¥").withInterval(decl.sourceInterval(3756, 3774)), this.range("à¥", "à¥").withInterval(decl.sourceInterval(3777, 3795)), this.range("à¥", "à¥").withInterval(decl.sourceInterval(3798, 3816)), this.range("à¥¢", "à¥£").withInterval(decl.sourceInterval(3819, 3837)), this.range("à¦", "à¦").withInterval(decl.sourceInterval(3840, 3858)), this.range("à¦¼", "à¦¼").withInterval(decl.sourceInterval(3861, 3879)), this.range("à§", "à§").withInterval(decl.sourceInterval(3882, 3900)), this.range("à§", "à§").withInterval(decl.sourceInterval(3903, 3921)), this.range("à§¢", "à§£").withInterval(decl.sourceInterval(3924, 3942)), this.range("à¨", "à¨").withInterval(decl.sourceInterval(3945, 3963)), this.range("à¨¼", "à¨¼").withInterval(decl.sourceInterval(3966, 3984)), this.range("à©", "à©").withInterval(decl.sourceInterval(3987, 4005)), this.range("à©", "à©").withInterval(decl.sourceInterval(4008, 4026)), this.range("à©", "à©").withInterval(decl.sourceInterval(4029, 4047)), this.range("à©°", "à©±").withInterval(decl.sourceInterval(4050, 4068)), this.range("àª", "àª").withInterval(decl.sourceInterval(4071, 4089)), this.range("àª¼", "àª¼").withInterval(decl.sourceInterval(4092, 4110)), this.range("à«", "à«").withInterval(decl.sourceInterval(4113, 4131)), this.range("à«", "à«").withInterval(decl.sourceInterval(4134, 4152)), this.range("à«", "à«").withInterval(decl.sourceInterval(4155, 4173)), this.range("à¬", "à¬").withInterval(decl.sourceInterval(4176, 4194)), this.range("à¬¼", "à¬¼").withInterval(decl.sourceInterval(4197, 4215)), this.range("à¬¿", "à¬¿").withInterval(decl.sourceInterval(4218, 4236)), this.range("à­", "à­").withInterval(decl.sourceInterval(4239, 4257)), this.range("à­", "à­").withInterval(decl.sourceInterval(4260, 4278)), this.range("à­", "à­").withInterval(decl.sourceInterval(4281, 4299)), this.range("à®", "à®").withInterval(decl.sourceInterval(4302, 4320)), this.range("à¯", "à¯").withInterval(decl.sourceInterval(4323, 4341)), this.range("à¯", "à¯").withInterval(decl.sourceInterval(4344, 4362)), this.range("à°¾", "à±").withInterval(decl.sourceInterval(4365, 4383)), this.range("à±", "à±").withInterval(decl.sourceInterval(4386, 4404)), this.range("à±", "à±").withInterval(decl.sourceInterval(4407, 4425)), this.range("à±", "à±").withInterval(decl.sourceInterval(4428, 4446)), this.range("à²¿", "à²¿").withInterval(decl.sourceInterval(4449, 4467)), this.range("à³", "à³").withInterval(decl.sourceInterval(4470, 4488)), this.range("à³", "à³").withInterval(decl.sourceInterval(4491, 4509)), this.range("àµ", "àµ").withInterval(decl.sourceInterval(4512, 4530)), this.range("àµ", "àµ").withInterval(decl.sourceInterval(4533, 4551)), this.range("à¸±", "à¸±").withInterval(decl.sourceInterval(4554, 4572)), this.range("à¸´", "à¸º").withInterval(decl.sourceInterval(4575, 4593)), this.range("à¹", "à¹").withInterval(decl.sourceInterval(4596, 4614)), this.range("àº±", "àº±").withInterval(decl.sourceInterval(4617, 4635)), this.range("àº´", "àº¹").withInterval(decl.sourceInterval(4638, 4656)), this.range("àº»", "àº¼").withInterval(decl.sourceInterval(4659, 4677)), this.range("à»", "à»").withInterval(decl.sourceInterval(4680, 4698)), this.range("à¼", "à¼").withInterval(decl.sourceInterval(4701, 4719)), this.range("à¼µ", "à¼µ").withInterval(decl.sourceInterval(4722, 4740)), this.range("à¼·", "à¼·").withInterval(decl.sourceInterval(4743, 4761)), this.range("à¼¹", "à¼¹").withInterval(decl.sourceInterval(4764, 4782)), this.range("à½±", "à½¾").withInterval(decl.sourceInterval(4785, 4803)), this.range("à¾", "à¾").withInterval(decl.sourceInterval(4806, 4824)), this.range("à¾", "à¾").withInterval(decl.sourceInterval(4827, 4845)), this.range("à¾", "à¾").withInterval(decl.sourceInterval(4848, 4866)), this.range("à¾", "à¾").withInterval(decl.sourceInterval(4869, 4887)), this.range("à¾", "à¾­").withInterval(decl.sourceInterval(4890, 4908)), this.range("à¾±", "à¾·").withInterval(decl.sourceInterval(4911, 4929)), this.range("à¾¹", "à¾¹").withInterval(decl.sourceInterval(4932, 4950)), this.range("â", "â").withInterval(decl.sourceInterval(4953, 4971)), this.range("â¡", "â¡").withInterval(decl.sourceInterval(4974, 4992)), this.range("ãª", "ã¯").withInterval(decl.sourceInterval(4995, 5013)), this.range("ã", "ã").withInterval(decl.sourceInterval(5016, 5034)), this.range("ï¬", "ï¬").withInterval(decl.sourceInterval(5037, 5055)), this.range("ï¸ ", "ï¸£").withInterval(decl.sourceInterval(5058, 5076))).withInterval(decl.sourceInterval(3399, 5076)), "a Unicode combining mark")
    .define("unicodeConnectorPunctuation", [], this.alt(this.terminal("_").withInterval(decl.sourceInterval(5112, 5120)), this.range("â¿", "â").withInterval(decl.sourceInterval(5123, 5141)), this.terminal("ã»").withInterval(decl.sourceInterval(5144, 5152)), this.range("ï¸³", "ï¸´").withInterval(decl.sourceInterval(5155, 5173)), this.range("ï¹", "ï¹").withInterval(decl.sourceInterval(5176, 5194)), this.terminal("ï¼¿").withInterval(decl.sourceInterval(5197, 5205)), this.terminal("ï½¥").withInterval(decl.sourceInterval(5208, 5216))).withInterval(decl.sourceInterval(5112, 5216)))
    .define("unicodeSpaceSeparator", [], this.alt(this.range("â", "â").withInterval(decl.sourceInterval(5244, 5262)), this.terminal("ã").withInterval(decl.sourceInterval(5265, 5273))).withInterval(decl.sourceInterval(5244, 5273)))
    .define("reservedWord", [], this.alt(this.app("keyword").withInterval(decl.sourceInterval(5294, 5301)), this.app("futureReservedWord").withInterval(decl.sourceInterval(5304, 5322)), this.app("nullLiteral").withInterval(decl.sourceInterval(5325, 5336)), this.app("booleanLiteral").withInterval(decl.sourceInterval(5339, 5353))).withInterval(decl.sourceInterval(5294, 5353)))
    .define("keyword", [], this.alt(this.app("break").withInterval(decl.sourceInterval(5510, 5515)), this.app("do").withInterval(decl.sourceInterval(5521, 5523)), this.app("instanceof").withInterval(decl.sourceInterval(5533, 5543)), this.app("typeof").withInterval(decl.sourceInterval(5546, 5552)), this.app("case").withInterval(decl.sourceInterval(5560, 5564)), this.app("else").withInterval(decl.sourceInterval(5571, 5575)), this.app("new").withInterval(decl.sourceInterval(5583, 5586)), this.app("var").withInterval(decl.sourceInterval(5596, 5599)), this.app("catch").withInterval(decl.sourceInterval(5607, 5612)), this.app("finally").withInterval(decl.sourceInterval(5618, 5625)), this.app("return").withInterval(decl.sourceInterval(5630, 5636)), this.app("void").withInterval(decl.sourceInterval(5643, 5647)), this.app("continue").withInterval(decl.sourceInterval(5655, 5663)), this.app("for").withInterval(decl.sourceInterval(5666, 5669)), this.app("switch").withInterval(decl.sourceInterval(5678, 5684)), this.app("while").withInterval(decl.sourceInterval(5691, 5696)), this.app("debugger").withInterval(decl.sourceInterval(5704, 5712)), this.app("function").withInterval(decl.sourceInterval(5715, 5723)), this.app("this").withInterval(decl.sourceInterval(5727, 5731)), this.app("with").withInterval(decl.sourceInterval(5740, 5744)), this.app("default").withInterval(decl.sourceInterval(5752, 5759)), this.app("if").withInterval(decl.sourceInterval(5763, 5765)), this.app("throw").withInterval(decl.sourceInterval(5775, 5780)), this.app("delete").withInterval(decl.sourceInterval(5788, 5794)), this.app("in").withInterval(decl.sourceInterval(5799, 5801)), this.app("try").withInterval(decl.sourceInterval(5811, 5814))).withInterval(decl.sourceInterval(5510, 5814)))
    .define("futureReservedWordLax", [], this.alt(this.app("class").withInterval(decl.sourceInterval(5844, 5849)), this.app("enum").withInterval(decl.sourceInterval(5853, 5857)), this.app("extends").withInterval(decl.sourceInterval(5861, 5868)), this.app("super").withInterval(decl.sourceInterval(5878, 5883)), this.app("const").withInterval(decl.sourceInterval(5887, 5892)), this.app("export").withInterval(decl.sourceInterval(5895, 5901)), this.app("import").withInterval(decl.sourceInterval(5911, 5917))).withInterval(decl.sourceInterval(5844, 5917)))
    .define("futureReservedWordStrict", [], this.alt(this.app("futureReservedWordLax").withInterval(decl.sourceInterval(5950, 5971)), this.app("implements").withInterval(decl.sourceInterval(5984, 5994)), this.app("let").withInterval(decl.sourceInterval(5997, 6000)), this.app("private").withInterval(decl.sourceInterval(6007, 6014)), this.app("public").withInterval(decl.sourceInterval(6019, 6025)), this.app("interface").withInterval(decl.sourceInterval(6038, 6047)), this.app("package").withInterval(decl.sourceInterval(6051, 6058)), this.app("protected").withInterval(decl.sourceInterval(6061, 6070)), this.app("static").withInterval(decl.sourceInterval(6073, 6079)), this.app("yield").withInterval(decl.sourceInterval(6092, 6097))).withInterval(decl.sourceInterval(5950, 6097)))
    .define("futureReservedWord", [], this.app("futureReservedWordStrict").withInterval(decl.sourceInterval(6124, 6148)))
    .define("literal", [], this.alt(this.app("nullLiteral").withInterval(decl.sourceInterval(6298, 6309)), this.app("booleanLiteral").withInterval(decl.sourceInterval(6312, 6326)), this.app("numericLiteral").withInterval(decl.sourceInterval(6329, 6343)), this.app("stringLiteral").withInterval(decl.sourceInterval(6351, 6364)), this.app("regularExpressionLiteral").withInterval(decl.sourceInterval(6367, 6391))).withInterval(decl.sourceInterval(6298, 6391)))
    .define("nullLiteral", [], this.seq(this.terminal("null").withInterval(decl.sourceInterval(6455, 6461)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(6463, 6477))).withInterval(decl.sourceInterval(6462, 6477))).withInterval(decl.sourceInterval(6455, 6477)))
    .define("booleanLiteral", [], this.seq(this.alt(this.terminal("true").withInterval(decl.sourceInterval(6499, 6505)), this.terminal("false").withInterval(decl.sourceInterval(6508, 6515))).withInterval(decl.sourceInterval(6499, 6515)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(6518, 6532))).withInterval(decl.sourceInterval(6517, 6532))).withInterval(decl.sourceInterval(6498, 6532)))
    .define("numericLiteral", [], this.alt(this.app("octalIntegerLiteral").withInterval(decl.sourceInterval(6874, 6893)), this.app("hexIntegerLiteral").withInterval(decl.sourceInterval(6896, 6913)), this.app("decimalLiteral").withInterval(decl.sourceInterval(6916, 6930))).withInterval(decl.sourceInterval(6874, 6930)))
    .define("decimalLiteral_bothParts", [], this.seq(this.app("decimalIntegerLiteral").withInterval(decl.sourceInterval(6953, 6974)), this.terminal(".").withInterval(decl.sourceInterval(6975, 6978)), this.star(this.app("decimalDigit").withInterval(decl.sourceInterval(6979, 6991))).withInterval(decl.sourceInterval(6979, 6992)), this.app("exponentPart").withInterval(decl.sourceInterval(6993, 7005))).withInterval(decl.sourceInterval(6953, 7005)))
    .define("decimalLiteral_decimalsOnly", [], this.seq(this.terminal(".").withInterval(decl.sourceInterval(7049, 7052)), this.plus(this.app("decimalDigit").withInterval(decl.sourceInterval(7053, 7065))).withInterval(decl.sourceInterval(7053, 7066)), this.app("exponentPart").withInterval(decl.sourceInterval(7067, 7079))).withInterval(decl.sourceInterval(7049, 7079)))
    .define("decimalLiteral_integerOnly", [], this.seq(this.app("decimalIntegerLiteral").withInterval(decl.sourceInterval(7104, 7125)), this.app("exponentPart").withInterval(decl.sourceInterval(7144, 7156))).withInterval(decl.sourceInterval(7104, 7156)))
    .define("decimalLiteral", [], this.alt(this.app("decimalLiteral_bothParts").withInterval(decl.sourceInterval(6953, 7005)), this.app("decimalLiteral_decimalsOnly").withInterval(decl.sourceInterval(7049, 7079)), this.app("decimalLiteral_integerOnly").withInterval(decl.sourceInterval(7104, 7156))).withInterval(decl.sourceInterval(6953, 7171)))
    .define("decimalIntegerLiteral_nonZero", [], this.seq(this.app("nonZeroDigit").withInterval(decl.sourceInterval(7201, 7213)), this.star(this.app("decimalDigit").withInterval(decl.sourceInterval(7214, 7226))).withInterval(decl.sourceInterval(7214, 7227))).withInterval(decl.sourceInterval(7201, 7227)))
    .define("decimalIntegerLiteral_zero", [], this.terminal("0").withInterval(decl.sourceInterval(7249, 7252)))
    .define("decimalIntegerLiteral", [], this.alt(this.app("decimalIntegerLiteral_nonZero").withInterval(decl.sourceInterval(7201, 7227)), this.app("decimalIntegerLiteral_zero").withInterval(decl.sourceInterval(7249, 7252))).withInterval(decl.sourceInterval(7201, 7284)))
    .define("decimalDigit", [], this.range("0", "9").withInterval(decl.sourceInterval(7303, 7311)))
    .define("nonZeroDigit", [], this.range("1", "9").withInterval(decl.sourceInterval(7330, 7338)))
    .define("exponentPart_present", [], this.seq(this.app("exponentIndicator").withInterval(decl.sourceInterval(7359, 7376)), this.app("signedInteger").withInterval(decl.sourceInterval(7377, 7390))).withInterval(decl.sourceInterval(7359, 7390)))
    .define("exponentPart_absent", [], this.seq().withInterval(decl.sourceInterval(7443, 7443)))
    .define("exponentPart", [], this.alt(this.app("exponentPart_present").withInterval(decl.sourceInterval(7359, 7390)), this.app("exponentPart_absent").withInterval(decl.sourceInterval(7443, 7443))).withInterval(decl.sourceInterval(7359, 7452)))
    .define("exponentIndicator", [], this.alt(this.terminal("e").withInterval(decl.sourceInterval(7476, 7479)), this.terminal("E").withInterval(decl.sourceInterval(7482, 7485))).withInterval(decl.sourceInterval(7476, 7485)))
    .define("signedInteger_positive", [], this.seq(this.terminal("+").withInterval(decl.sourceInterval(7505, 7508)), this.star(this.app("decimalDigit").withInterval(decl.sourceInterval(7509, 7521))).withInterval(decl.sourceInterval(7509, 7522))).withInterval(decl.sourceInterval(7505, 7522)))
    .define("signedInteger_negative", [], this.seq(this.terminal("-").withInterval(decl.sourceInterval(7542, 7545)), this.star(this.app("decimalDigit").withInterval(decl.sourceInterval(7546, 7558))).withInterval(decl.sourceInterval(7546, 7559))).withInterval(decl.sourceInterval(7542, 7559)))
    .define("signedInteger_noSign", [], this.plus(this.app("decimalDigit").withInterval(decl.sourceInterval(7583, 7595))).withInterval(decl.sourceInterval(7583, 7596)))
    .define("signedInteger", [], this.alt(this.app("signedInteger_positive").withInterval(decl.sourceInterval(7505, 7522)), this.app("signedInteger_negative").withInterval(decl.sourceInterval(7542, 7559)), this.app("signedInteger_noSign").withInterval(decl.sourceInterval(7583, 7596))).withInterval(decl.sourceInterval(7505, 7606)))
    .define("hexIntegerLiteral", [], this.alt(this.seq(this.terminal("0x").withInterval(decl.sourceInterval(7632, 7636)), this.plus(this.app("hexDigit").withInterval(decl.sourceInterval(7637, 7645))).withInterval(decl.sourceInterval(7637, 7646))).withInterval(decl.sourceInterval(7632, 7646)), this.seq(this.terminal("0X").withInterval(decl.sourceInterval(7655, 7659)), this.plus(this.app("hexDigit").withInterval(decl.sourceInterval(7660, 7668))).withInterval(decl.sourceInterval(7660, 7669))).withInterval(decl.sourceInterval(7655, 7669))).withInterval(decl.sourceInterval(7632, 7669)))
    .define("octalIntegerLiteral", [], this.seq(this.terminal("0").withInterval(decl.sourceInterval(7801, 7804)), this.plus(this.app("octalDigit").withInterval(decl.sourceInterval(7805, 7815))).withInterval(decl.sourceInterval(7805, 7816))).withInterval(decl.sourceInterval(7801, 7816)))
    .define("octalDigit", [], this.range("0", "7").withInterval(decl.sourceInterval(7835, 7843)))
    .define("stringLiteral", [], this.alt(this.seq(this.terminal("\"").withInterval(decl.sourceInterval(7943, 7947)), this.star(this.app("doubleStringCharacter").withInterval(decl.sourceInterval(7948, 7969))).withInterval(decl.sourceInterval(7948, 7970)), this.terminal("\"").withInterval(decl.sourceInterval(7971, 7975))).withInterval(decl.sourceInterval(7943, 7975)), this.seq(this.terminal("'").withInterval(decl.sourceInterval(7983, 7986)), this.star(this.app("singleStringCharacter").withInterval(decl.sourceInterval(7987, 8008))).withInterval(decl.sourceInterval(7987, 8009)), this.terminal("'").withInterval(decl.sourceInterval(8010, 8013))).withInterval(decl.sourceInterval(7983, 8013))).withInterval(decl.sourceInterval(7943, 8013)))
    .define("doubleStringCharacter_nonEscaped", [], this.seq(this.not(this.alt(this.terminal("\"").withInterval(decl.sourceInterval(8043, 8047)), this.terminal("\\").withInterval(decl.sourceInterval(8050, 8054)), this.app("lineTerminator").withInterval(decl.sourceInterval(8057, 8071))).withInterval(decl.sourceInterval(8043, 8071))).withInterval(decl.sourceInterval(8041, 8072)), this.app("sourceCharacter").withInterval(decl.sourceInterval(8073, 8088))).withInterval(decl.sourceInterval(8041, 8088)))
    .define("doubleStringCharacter_escaped", [], this.seq(this.terminal("\\").withInterval(decl.sourceInterval(8112, 8116)), this.app("escapeSequence").withInterval(decl.sourceInterval(8117, 8131))).withInterval(decl.sourceInterval(8112, 8131)))
    .define("doubleStringCharacter_lineContinuation", [], this.app("lineContinuation").withInterval(decl.sourceInterval(8180, 8196)))
    .define("doubleStringCharacter", [], this.alt(this.app("doubleStringCharacter_nonEscaped").withInterval(decl.sourceInterval(8041, 8088)), this.app("doubleStringCharacter_escaped").withInterval(decl.sourceInterval(8112, 8131)), this.app("doubleStringCharacter_lineContinuation").withInterval(decl.sourceInterval(8180, 8196))).withInterval(decl.sourceInterval(8041, 8247)))
    .define("singleStringCharacter_nonEscaped", [], this.seq(this.not(this.alt(this.terminal("'").withInterval(decl.sourceInterval(8277, 8280)), this.terminal("\\").withInterval(decl.sourceInterval(8283, 8287)), this.app("lineTerminator").withInterval(decl.sourceInterval(8290, 8304))).withInterval(decl.sourceInterval(8277, 8304))).withInterval(decl.sourceInterval(8275, 8305)), this.app("sourceCharacter").withInterval(decl.sourceInterval(8306, 8321))).withInterval(decl.sourceInterval(8275, 8321)))
    .define("singleStringCharacter_escaped", [], this.seq(this.terminal("\\").withInterval(decl.sourceInterval(8345, 8349)), this.app("escapeSequence").withInterval(decl.sourceInterval(8350, 8364))).withInterval(decl.sourceInterval(8345, 8364)))
    .define("singleStringCharacter_lineContinuation", [], this.app("lineContinuation").withInterval(decl.sourceInterval(8412, 8428)))
    .define("singleStringCharacter", [], this.alt(this.app("singleStringCharacter_nonEscaped").withInterval(decl.sourceInterval(8275, 8321)), this.app("singleStringCharacter_escaped").withInterval(decl.sourceInterval(8345, 8364)), this.app("singleStringCharacter_lineContinuation").withInterval(decl.sourceInterval(8412, 8428))).withInterval(decl.sourceInterval(8275, 8478)))
    .define("lineContinuation", [], this.seq(this.terminal("\\").withInterval(decl.sourceInterval(8501, 8505)), this.app("lineTerminatorSequence").withInterval(decl.sourceInterval(8506, 8528))).withInterval(decl.sourceInterval(8501, 8528)))
    .define("escapeSequence", [], this.alt(this.app("unicodeEscapeSequence").withInterval(decl.sourceInterval(8549, 8570)), this.app("hexEscapeSequence").withInterval(decl.sourceInterval(8579, 8596)), this.app("octalEscapeSequence").withInterval(decl.sourceInterval(8605, 8624)), this.app("characterEscapeSequence").withInterval(decl.sourceInterval(8633, 8656))).withInterval(decl.sourceInterval(8549, 8656)))
    .define("characterEscapeSequence", [], this.alt(this.app("singleEscapeCharacter").withInterval(decl.sourceInterval(8706, 8727)), this.app("nonEscapeCharacter").withInterval(decl.sourceInterval(8739, 8757))).withInterval(decl.sourceInterval(8706, 8757)))
    .define("singleEscapeCharacter", [], this.alt(this.terminal("'").withInterval(decl.sourceInterval(8785, 8788)), this.terminal("\"").withInterval(decl.sourceInterval(8846, 8850)), this.terminal("\\").withInterval(decl.sourceInterval(8907, 8911)), this.terminal("b").withInterval(decl.sourceInterval(8968, 8971)), this.terminal("f").withInterval(decl.sourceInterval(9029, 9032)), this.terminal("n").withInterval(decl.sourceInterval(9090, 9093)), this.terminal("r").withInterval(decl.sourceInterval(9151, 9154)), this.terminal("t").withInterval(decl.sourceInterval(9212, 9215)), this.terminal("v").withInterval(decl.sourceInterval(9273, 9276))).withInterval(decl.sourceInterval(8785, 9276)))
    .define("nonEscapeCharacter", [], this.seq(this.not(this.alt(this.app("escapeCharacter").withInterval(decl.sourceInterval(9351, 9366)), this.app("lineTerminator").withInterval(decl.sourceInterval(9369, 9383))).withInterval(decl.sourceInterval(9351, 9383))).withInterval(decl.sourceInterval(9349, 9384)), this.app("sourceCharacter").withInterval(decl.sourceInterval(9385, 9400))).withInterval(decl.sourceInterval(9349, 9400)))
    .define("escapeCharacter", [], this.alt(this.app("singleEscapeCharacter").withInterval(decl.sourceInterval(9422, 9443)), this.app("decimalDigit").withInterval(decl.sourceInterval(9446, 9458)), this.terminal("x").withInterval(decl.sourceInterval(9461, 9464)), this.terminal("u").withInterval(decl.sourceInterval(9467, 9470))).withInterval(decl.sourceInterval(9422, 9470)))
    .define("octalEscapeSequence_whole", [], this.seq(this.app("zeroToThree").withInterval(decl.sourceInterval(9496, 9507)), this.app("octalDigit").withInterval(decl.sourceInterval(9508, 9518)), this.app("octalDigit").withInterval(decl.sourceInterval(9519, 9529))).withInterval(decl.sourceInterval(9496, 9529)))
    .define("octalEscapeSequence_eightTimesfourToSeven", [], this.seq(this.app("fourToSeven").withInterval(decl.sourceInterval(9552, 9563)), this.app("octalDigit").withInterval(decl.sourceInterval(9564, 9574))).withInterval(decl.sourceInterval(9552, 9574)))
    .define("octalEscapeSequence_eightTimesZeroToThree", [], this.seq(this.app("zeroToThree").withInterval(decl.sourceInterval(9624, 9635)), this.app("octalDigit").withInterval(decl.sourceInterval(9636, 9646)), this.not(this.app("decimalDigit").withInterval(decl.sourceInterval(9648, 9660))).withInterval(decl.sourceInterval(9647, 9660))).withInterval(decl.sourceInterval(9624, 9660)))
    .define("octalEscapeSequence_octal", [], this.seq(this.app("octalDigit").withInterval(decl.sourceInterval(9696, 9706)), this.not(this.app("decimalDigit").withInterval(decl.sourceInterval(9708, 9720))).withInterval(decl.sourceInterval(9707, 9720))).withInterval(decl.sourceInterval(9696, 9720)))
    .define("octalEscapeSequence", [], this.alt(this.app("octalEscapeSequence_whole").withInterval(decl.sourceInterval(9496, 9529)), this.app("octalEscapeSequence_eightTimesfourToSeven").withInterval(decl.sourceInterval(9552, 9574)), this.app("octalEscapeSequence_eightTimesZeroToThree").withInterval(decl.sourceInterval(9624, 9660)), this.app("octalEscapeSequence_octal").withInterval(decl.sourceInterval(9696, 9720))).withInterval(decl.sourceInterval(9496, 9741)))
    .define("hexEscapeSequence", [], this.seq(this.terminal("x").withInterval(decl.sourceInterval(9765, 9768)), this.app("hexDigit").withInterval(decl.sourceInterval(9769, 9777)), this.app("hexDigit").withInterval(decl.sourceInterval(9778, 9786))).withInterval(decl.sourceInterval(9765, 9786)))
    .define("unicodeEscapeSequence", [], this.seq(this.terminal("u").withInterval(decl.sourceInterval(9814, 9817)), this.app("hexDigit").withInterval(decl.sourceInterval(9818, 9826)), this.app("hexDigit").withInterval(decl.sourceInterval(9827, 9835)), this.app("hexDigit").withInterval(decl.sourceInterval(9836, 9844)), this.app("hexDigit").withInterval(decl.sourceInterval(9845, 9853))).withInterval(decl.sourceInterval(9814, 9853)))
    .define("zeroToThree", [], this.range("0", "3").withInterval(decl.sourceInterval(9873, 9881)))
    .define("fourToSeven", [], this.range("4", "7").withInterval(decl.sourceInterval(9899, 9907)))
    .define("regularExpressionLiteral", [], this.seq(this.terminal("/").withInterval(decl.sourceInterval(10040, 10043)), this.app("regularExpressionBody").withInterval(decl.sourceInterval(10044, 10065)), this.terminal("/").withInterval(decl.sourceInterval(10066, 10069)), this.app("regularExpressionFlags").withInterval(decl.sourceInterval(10070, 10092))).withInterval(decl.sourceInterval(10040, 10092)))
    .define("regularExpressionBody", [], this.seq(this.app("regularExpressionFirstChar").withInterval(decl.sourceInterval(10120, 10146)), this.star(this.app("regularExpressionChar").withInterval(decl.sourceInterval(10147, 10168))).withInterval(decl.sourceInterval(10147, 10169))).withInterval(decl.sourceInterval(10120, 10169)))
    .define("regularExpressionFirstChar", [], this.alt(this.seq(this.not(this.alt(this.terminal("*").withInterval(decl.sourceInterval(10204, 10207)), this.terminal("\\").withInterval(decl.sourceInterval(10210, 10214)), this.terminal("/").withInterval(decl.sourceInterval(10217, 10220)), this.terminal("[").withInterval(decl.sourceInterval(10223, 10226))).withInterval(decl.sourceInterval(10204, 10226))).withInterval(decl.sourceInterval(10202, 10227)), this.app("regularExpressionNonTerminator").withInterval(decl.sourceInterval(10228, 10258))).withInterval(decl.sourceInterval(10202, 10258)), this.app("regularExpressionBackslashSequence").withInterval(decl.sourceInterval(10270, 10304)), this.app("regularExpressionClass").withInterval(decl.sourceInterval(10316, 10338))).withInterval(decl.sourceInterval(10202, 10338)))
    .define("regularExpressionChar", [], this.alt(this.seq(this.not(this.alt(this.terminal("\\").withInterval(decl.sourceInterval(10368, 10372)), this.terminal("/").withInterval(decl.sourceInterval(10375, 10378)), this.terminal("[").withInterval(decl.sourceInterval(10381, 10384))).withInterval(decl.sourceInterval(10368, 10384))).withInterval(decl.sourceInterval(10366, 10385)), this.app("regularExpressionNonTerminator").withInterval(decl.sourceInterval(10386, 10416))).withInterval(decl.sourceInterval(10366, 10416)), this.app("regularExpressionBackslashSequence").withInterval(decl.sourceInterval(10426, 10460)), this.app("regularExpressionClass").withInterval(decl.sourceInterval(10470, 10492))).withInterval(decl.sourceInterval(10366, 10492)))
    .define("regularExpressionBackslashSequence", [], this.seq(this.terminal("\\").withInterval(decl.sourceInterval(10533, 10537)), this.app("regularExpressionNonTerminator").withInterval(decl.sourceInterval(10538, 10568))).withInterval(decl.sourceInterval(10533, 10568)))
    .define("regularExpressionNonTerminator", [], this.seq(this.not(this.app("lineTerminator").withInterval(decl.sourceInterval(10607, 10621))).withInterval(decl.sourceInterval(10605, 10622)), this.app("sourceCharacter").withInterval(decl.sourceInterval(10623, 10638))).withInterval(decl.sourceInterval(10605, 10638)))
    .define("regularExpressionClass", [], this.seq(this.terminal("[").withInterval(decl.sourceInterval(10667, 10670)), this.star(this.app("regularExpressionClassChar").withInterval(decl.sourceInterval(10671, 10697))).withInterval(decl.sourceInterval(10671, 10698)), this.terminal("]").withInterval(decl.sourceInterval(10699, 10702))).withInterval(decl.sourceInterval(10667, 10702)))
    .define("regularExpressionClassChar", [], this.alt(this.seq(this.not(this.alt(this.terminal("]").withInterval(decl.sourceInterval(10737, 10740)), this.terminal("\\").withInterval(decl.sourceInterval(10743, 10747))).withInterval(decl.sourceInterval(10737, 10747))).withInterval(decl.sourceInterval(10735, 10748)), this.app("regularExpressionNonTerminator").withInterval(decl.sourceInterval(10749, 10779))).withInterval(decl.sourceInterval(10735, 10779)), this.app("regularExpressionBackslashSequence").withInterval(decl.sourceInterval(10791, 10825))).withInterval(decl.sourceInterval(10735, 10825)))
    .define("regularExpressionFlags", [], this.star(this.app("identifierPart").withInterval(decl.sourceInterval(10854, 10868))).withInterval(decl.sourceInterval(10854, 10869)))
    .define("multiLineCommentNoNL", [], this.seq(this.terminal("/*").withInterval(decl.sourceInterval(10964, 10968)), this.star(this.seq(this.not(this.alt(this.terminal("*/").withInterval(decl.sourceInterval(10972, 10976)), this.app("lineTerminator").withInterval(decl.sourceInterval(10979, 10993))).withInterval(decl.sourceInterval(10972, 10993))).withInterval(decl.sourceInterval(10970, 10994)), this.app("sourceCharacter").withInterval(decl.sourceInterval(10995, 11010))).withInterval(decl.sourceInterval(10970, 11010))).withInterval(decl.sourceInterval(10969, 11012)), this.terminal("*/").withInterval(decl.sourceInterval(11013, 11017))).withInterval(decl.sourceInterval(10964, 11017)))
    .define("spacesNoNL", [], this.star(this.alt(this.app("whitespace").withInterval(decl.sourceInterval(11139, 11149)), this.app("singleLineComment").withInterval(decl.sourceInterval(11152, 11169)), this.app("multiLineCommentNoNL").withInterval(decl.sourceInterval(11172, 11192))).withInterval(decl.sourceInterval(11139, 11192))).withInterval(decl.sourceInterval(11138, 11194)))
    .define("sc", [], this.alt(this.seq(this.star(this.app("space").withInterval(decl.sourceInterval(11573, 11578))).withInterval(decl.sourceInterval(11573, 11579)), this.alt(this.terminal(";").withInterval(decl.sourceInterval(11581, 11584)), this.app("end").withInterval(decl.sourceInterval(11587, 11590))).withInterval(decl.sourceInterval(11581, 11590))).withInterval(decl.sourceInterval(11573, 11591)), this.seq(this.app("spacesNoNL").withInterval(decl.sourceInterval(11597, 11607)), this.alt(this.app("lineTerminator").withInterval(decl.sourceInterval(11609, 11623)), this.seq(this.not(this.app("multiLineCommentNoNL").withInterval(decl.sourceInterval(11627, 11647))).withInterval(decl.sourceInterval(11626, 11647)), this.app("multiLineComment").withInterval(decl.sourceInterval(11648, 11664))).withInterval(decl.sourceInterval(11626, 11664)), this.la(this.terminal("}").withInterval(decl.sourceInterval(11668, 11671))).withInterval(decl.sourceInterval(11667, 11671))).withInterval(decl.sourceInterval(11609, 11671))).withInterval(decl.sourceInterval(11597, 11672))).withInterval(decl.sourceInterval(11573, 11672)))
    .define("break", [], this.seq(this.terminal("break").withInterval(decl.sourceInterval(11738, 11745)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(11747, 11761))).withInterval(decl.sourceInterval(11746, 11761))).withInterval(decl.sourceInterval(11738, 11761)))
    .define("do", [], this.seq(this.terminal("do").withInterval(decl.sourceInterval(11770, 11774)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(11776, 11790))).withInterval(decl.sourceInterval(11775, 11790))).withInterval(decl.sourceInterval(11770, 11790)))
    .define("instanceof", [], this.seq(this.terminal("instanceof").withInterval(decl.sourceInterval(11807, 11819)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(11821, 11835))).withInterval(decl.sourceInterval(11820, 11835))).withInterval(decl.sourceInterval(11807, 11835)))
    .define("typeof", [], this.seq(this.terminal("typeof").withInterval(decl.sourceInterval(11848, 11856)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(11858, 11872))).withInterval(decl.sourceInterval(11857, 11872))).withInterval(decl.sourceInterval(11848, 11872)))
    .define("case", [], this.seq(this.terminal("case").withInterval(decl.sourceInterval(11883, 11889)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(11891, 11905))).withInterval(decl.sourceInterval(11890, 11905))).withInterval(decl.sourceInterval(11883, 11905)))
    .define("else", [], this.seq(this.terminal("else").withInterval(decl.sourceInterval(11916, 11922)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(11924, 11938))).withInterval(decl.sourceInterval(11923, 11938))).withInterval(decl.sourceInterval(11916, 11938)))
    .define("new", [], this.seq(this.terminal("new").withInterval(decl.sourceInterval(11948, 11953)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(11955, 11969))).withInterval(decl.sourceInterval(11954, 11969))).withInterval(decl.sourceInterval(11948, 11969)))
    .define("var", [], this.seq(this.terminal("var").withInterval(decl.sourceInterval(11979, 11984)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(11986, 12000))).withInterval(decl.sourceInterval(11985, 12000))).withInterval(decl.sourceInterval(11979, 12000)))
    .define("catch", [], this.seq(this.terminal("catch").withInterval(decl.sourceInterval(12012, 12019)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(12021, 12035))).withInterval(decl.sourceInterval(12020, 12035))).withInterval(decl.sourceInterval(12012, 12035)))
    .define("finally", [], this.seq(this.terminal("finally").withInterval(decl.sourceInterval(12049, 12058)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(12060, 12074))).withInterval(decl.sourceInterval(12059, 12074))).withInterval(decl.sourceInterval(12049, 12074)))
    .define("return", [], this.seq(this.terminal("return").withInterval(decl.sourceInterval(12087, 12095)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(12097, 12111))).withInterval(decl.sourceInterval(12096, 12111))).withInterval(decl.sourceInterval(12087, 12111)))
    .define("void", [], this.seq(this.terminal("void").withInterval(decl.sourceInterval(12122, 12128)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(12130, 12144))).withInterval(decl.sourceInterval(12129, 12144))).withInterval(decl.sourceInterval(12122, 12144)))
    .define("continue", [], this.seq(this.terminal("continue").withInterval(decl.sourceInterval(12159, 12169)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(12171, 12185))).withInterval(decl.sourceInterval(12170, 12185))).withInterval(decl.sourceInterval(12159, 12185)))
    .define("for", [], this.seq(this.terminal("for").withInterval(decl.sourceInterval(12195, 12200)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(12202, 12216))).withInterval(decl.sourceInterval(12201, 12216))).withInterval(decl.sourceInterval(12195, 12216)))
    .define("switch", [], this.seq(this.terminal("switch").withInterval(decl.sourceInterval(12229, 12237)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(12239, 12253))).withInterval(decl.sourceInterval(12238, 12253))).withInterval(decl.sourceInterval(12229, 12253)))
    .define("while", [], this.seq(this.terminal("while").withInterval(decl.sourceInterval(12265, 12272)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(12274, 12288))).withInterval(decl.sourceInterval(12273, 12288))).withInterval(decl.sourceInterval(12265, 12288)))
    .define("debugger", [], this.seq(this.terminal("debugger").withInterval(decl.sourceInterval(12303, 12313)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(12315, 12329))).withInterval(decl.sourceInterval(12314, 12329))).withInterval(decl.sourceInterval(12303, 12329)))
    .define("function", [], this.seq(this.terminal("function").withInterval(decl.sourceInterval(12344, 12354)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(12356, 12370))).withInterval(decl.sourceInterval(12355, 12370))).withInterval(decl.sourceInterval(12344, 12370)))
    .define("this", [], this.seq(this.terminal("this").withInterval(decl.sourceInterval(12381, 12387)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(12389, 12403))).withInterval(decl.sourceInterval(12388, 12403))).withInterval(decl.sourceInterval(12381, 12403)))
    .define("with", [], this.seq(this.terminal("with").withInterval(decl.sourceInterval(12414, 12420)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(12422, 12436))).withInterval(decl.sourceInterval(12421, 12436))).withInterval(decl.sourceInterval(12414, 12436)))
    .define("default", [], this.seq(this.terminal("default").withInterval(decl.sourceInterval(12450, 12459)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(12461, 12475))).withInterval(decl.sourceInterval(12460, 12475))).withInterval(decl.sourceInterval(12450, 12475)))
    .define("if", [], this.seq(this.terminal("if").withInterval(decl.sourceInterval(12484, 12488)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(12490, 12504))).withInterval(decl.sourceInterval(12489, 12504))).withInterval(decl.sourceInterval(12484, 12504)))
    .define("throw", [], this.seq(this.terminal("throw").withInterval(decl.sourceInterval(12516, 12523)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(12525, 12539))).withInterval(decl.sourceInterval(12524, 12539))).withInterval(decl.sourceInterval(12516, 12539)))
    .define("delete", [], this.seq(this.terminal("delete").withInterval(decl.sourceInterval(12552, 12560)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(12562, 12576))).withInterval(decl.sourceInterval(12561, 12576))).withInterval(decl.sourceInterval(12552, 12576)))
    .define("in", [], this.seq(this.terminal("in").withInterval(decl.sourceInterval(12585, 12589)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(12591, 12605))).withInterval(decl.sourceInterval(12590, 12605))).withInterval(decl.sourceInterval(12585, 12605)))
    .define("try", [], this.seq(this.terminal("try").withInterval(decl.sourceInterval(12615, 12620)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(12622, 12636))).withInterval(decl.sourceInterval(12621, 12636))).withInterval(decl.sourceInterval(12615, 12636)))
    .define("get", [], this.seq(this.terminal("get").withInterval(decl.sourceInterval(12646, 12651)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(12653, 12667))).withInterval(decl.sourceInterval(12652, 12667))).withInterval(decl.sourceInterval(12646, 12667)))
    .define("set", [], this.seq(this.terminal("set").withInterval(decl.sourceInterval(12677, 12682)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(12684, 12698))).withInterval(decl.sourceInterval(12683, 12698))).withInterval(decl.sourceInterval(12677, 12698)))
    .define("class", [], this.seq(this.terminal("class").withInterval(decl.sourceInterval(12710, 12717)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(12719, 12733))).withInterval(decl.sourceInterval(12718, 12733))).withInterval(decl.sourceInterval(12710, 12733)))
    .define("enum", [], this.seq(this.terminal("enum").withInterval(decl.sourceInterval(12744, 12750)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(12752, 12766))).withInterval(decl.sourceInterval(12751, 12766))).withInterval(decl.sourceInterval(12744, 12766)))
    .define("extends", [], this.seq(this.terminal("extends").withInterval(decl.sourceInterval(12780, 12789)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(12791, 12805))).withInterval(decl.sourceInterval(12790, 12805))).withInterval(decl.sourceInterval(12780, 12805)))
    .define("super", [], this.seq(this.terminal("super").withInterval(decl.sourceInterval(12817, 12824)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(12826, 12840))).withInterval(decl.sourceInterval(12825, 12840))).withInterval(decl.sourceInterval(12817, 12840)))
    .define("const", [], this.seq(this.terminal("const").withInterval(decl.sourceInterval(12852, 12859)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(12861, 12875))).withInterval(decl.sourceInterval(12860, 12875))).withInterval(decl.sourceInterval(12852, 12875)))
    .define("export", [], this.seq(this.terminal("export").withInterval(decl.sourceInterval(12888, 12896)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(12898, 12912))).withInterval(decl.sourceInterval(12897, 12912))).withInterval(decl.sourceInterval(12888, 12912)))
    .define("import", [], this.seq(this.terminal("import").withInterval(decl.sourceInterval(12925, 12933)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(12935, 12949))).withInterval(decl.sourceInterval(12934, 12949))).withInterval(decl.sourceInterval(12925, 12949)))
    .define("implements", [], this.seq(this.terminal("implements").withInterval(decl.sourceInterval(12966, 12978)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(12980, 12994))).withInterval(decl.sourceInterval(12979, 12994))).withInterval(decl.sourceInterval(12966, 12994)))
    .define("let", [], this.seq(this.terminal("let").withInterval(decl.sourceInterval(13004, 13009)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(13011, 13025))).withInterval(decl.sourceInterval(13010, 13025))).withInterval(decl.sourceInterval(13004, 13025)))
    .define("private", [], this.seq(this.terminal("private").withInterval(decl.sourceInterval(13039, 13048)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(13050, 13064))).withInterval(decl.sourceInterval(13049, 13064))).withInterval(decl.sourceInterval(13039, 13064)))
    .define("public", [], this.seq(this.terminal("public").withInterval(decl.sourceInterval(13077, 13085)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(13087, 13101))).withInterval(decl.sourceInterval(13086, 13101))).withInterval(decl.sourceInterval(13077, 13101)))
    .define("interface", [], this.seq(this.terminal("interface").withInterval(decl.sourceInterval(13117, 13128)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(13130, 13144))).withInterval(decl.sourceInterval(13129, 13144))).withInterval(decl.sourceInterval(13117, 13144)))
    .define("package", [], this.seq(this.terminal("package").withInterval(decl.sourceInterval(13158, 13167)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(13169, 13183))).withInterval(decl.sourceInterval(13168, 13183))).withInterval(decl.sourceInterval(13158, 13183)))
    .define("protected", [], this.seq(this.terminal("protected").withInterval(decl.sourceInterval(13199, 13210)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(13212, 13226))).withInterval(decl.sourceInterval(13211, 13226))).withInterval(decl.sourceInterval(13199, 13226)))
    .define("static", [], this.seq(this.terminal("static").withInterval(decl.sourceInterval(13239, 13247)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(13249, 13263))).withInterval(decl.sourceInterval(13248, 13263))).withInterval(decl.sourceInterval(13239, 13263)))
    .define("yield", [], this.seq(this.terminal("yield").withInterval(decl.sourceInterval(13275, 13282)), this.not(this.app("identifierPart").withInterval(decl.sourceInterval(13284, 13298))).withInterval(decl.sourceInterval(13283, 13298))).withInterval(decl.sourceInterval(13275, 13298)))
    .build();
});
